WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: f04db8e0-f361-40c7-b333-55afb351ba72
Created: 2025-05-15T20:06:46.184Z
Duration: 2135.5886
Channels: 1

00:00:00.080 --> 00:00:02.240
Alright. So today we're going to be doing

00:00:02.400 --> 00:00:06.240
Intro to React. So React is another front

00:00:06.240 --> 00:00:10.160
end framework, and it's not entirely distinct from

00:00:10.160 --> 00:00:12.720
HTML CSS. You'll be using the same concepts,

00:00:12.720 --> 00:00:15.600
but it's the framework we'll be working with

00:00:14.715 --> 00:00:18.075
for our final projects and the framework that's

00:00:18.075 --> 00:00:22.635
used everywhere in web dev. But just to

00:00:22.635 --> 00:00:26.315
recap, let's talk about HTML, CSS, and JavaScript

00:00:26.315 --> 00:00:28.955
again. So if you remember the analogy, we

00:00:28.955 --> 00:00:33.090
have HTML skeleton. CSS is the styling and

00:00:33.090 --> 00:00:38.530
then JavaScript makes everything work. So for example,

00:00:38.530 --> 00:00:41.250
we can talk about the Facebook website again.

00:00:41.490 --> 00:00:44.955
And if you have the Facebook website, the

00:00:44.955 --> 00:00:47.195
first section might look like this, where we

00:00:47.195 --> 00:00:48.955
have a friend section which has a bunch

00:00:48.955 --> 00:00:50.955
of divs with a couple of different classes

00:00:50.955 --> 00:00:53.355
for styling. It also includes images and things

00:00:53.355 --> 00:00:55.835
like that. And maybe just as a warm

00:00:55.835 --> 00:00:58.075
up, turn and talk to someone next to

00:00:58.075 --> 00:01:00.370
you about what what the main feed might

00:01:00.370 --> 00:02:15.595
look like in terms of the HTML. So

00:02:15.595 --> 00:02:19.515
it might look something like this. And so

00:02:19.515 --> 00:02:21.460
we have a lot of different nested boxes

00:02:21.460 --> 00:02:25.460
here. You have to have a couple different

00:02:25.460 --> 00:02:27.220
classes for all the different headings that's going

00:02:27.220 --> 00:02:31.460
on and all the different styling. And in

00:02:31.460 --> 00:02:34.555
essence, it's kind of really messy. And if

00:02:34.555 --> 00:02:36.315
you ever open up just developer tools on

00:02:36.315 --> 00:02:38.715
any random website on the web, you'll notice

00:02:38.715 --> 00:02:40.715
that there's a ton of divs. And if

00:02:40.715 --> 00:02:42.395
you want to get to what you're looking

00:02:42.395 --> 00:02:46.370
for, it's just a whole big mess. And

00:02:46.770 --> 00:02:48.690
so it would be really nice if instead

00:02:48.690 --> 00:02:50.210
of having to write all of this up,

00:02:50.290 --> 00:02:54.050
we could just write one line and say

00:02:54.050 --> 00:02:56.210
build Facebook. But of course, that doesn't make

00:02:56.210 --> 00:02:59.985
any sense because we actually have to write

00:02:59.985 --> 00:03:02.065
down what we want Facebook to look like.

00:03:02.385 --> 00:03:06.065
And so the idea here is we sort

00:03:06.065 --> 00:03:08.865
of want to have some sort of modular

00:03:09.265 --> 00:03:12.225
framework where we can build Facebook by just

00:03:12.225 --> 00:03:15.170
writing down the tag Facebook. But to write

00:03:15.170 --> 00:03:16.770
down the tag Facebook, we can define it

00:03:16.770 --> 00:03:18.610
in terms of other tags, like the nav

00:03:18.610 --> 00:03:21.250
bar, the friends feed, the friends and the

00:03:21.250 --> 00:03:23.970
posts in your feed. And if we have

00:03:23.970 --> 00:03:25.570
some sort of framework where we can do

00:03:25.570 --> 00:03:27.890
this sort of abstraction where we're able to

00:03:28.485 --> 00:03:33.045
call some new custom HTML tag and then

00:03:33.045 --> 00:03:35.365
use that to render part of the feed,

00:03:35.365 --> 00:03:36.725
then we can make our code look a

00:03:36.725 --> 00:03:39.045
lot nicer because we can build in modules.

00:03:40.485 --> 00:03:43.400
And it can also help us with the

00:03:43.400 --> 00:03:45.640
usability if we have different modules that are

00:03:45.640 --> 00:03:47.480
repeated. For example, in the feed, there'll be

00:03:47.480 --> 00:03:52.600
posts that are repeated over and over. And

00:03:52.680 --> 00:03:55.545
it would continue down the tree, you would

00:03:55.545 --> 00:03:57.785
define each of these new fake HTML tags,

00:03:57.785 --> 00:04:00.025
like navbar, friends, and feed in terms of

00:04:00.265 --> 00:04:03.465
other fake HTML tags, or just raw HTML.

00:04:04.505 --> 00:04:06.985
So this is the whole idea behind React,

00:04:07.145 --> 00:04:10.050
which is a library that's used everywhere for

00:04:10.050 --> 00:04:13.010
building your front end. And these fake HTML

00:04:13.010 --> 00:04:15.250
tags that I just mentioned are what's called

00:04:15.250 --> 00:04:18.130
components, and these are the building blocks for

00:04:18.130 --> 00:04:24.155
React. So components are something that you name

00:04:24.155 --> 00:04:26.075
yourself. And so they can look anything like

00:04:26.075 --> 00:04:28.395
Facebook nav bar post or feed. But it

00:04:28.395 --> 00:04:30.555
can be any name you want, but generally

00:04:30.555 --> 00:04:32.475
you'll want to name it something that actually

00:04:32.475 --> 00:04:38.100
makes sense. But what exactly is a component?

00:04:38.100 --> 00:04:40.740
Well, it's some abstraction that tells you how

00:04:40.740 --> 00:04:42.900
to render a certain part of the website.

00:04:42.900 --> 00:04:44.980
And it's very general. You can do sort

00:04:44.980 --> 00:04:47.460
of anything you want with any front end

00:04:47.860 --> 00:04:50.465
you want with it. Because within a component,

00:04:50.465 --> 00:04:52.865
you're rendering all the HTML, CSS, and JavaScript

00:04:52.865 --> 00:04:55.425
at once. You can define the actions that

00:04:55.425 --> 00:04:57.185
happen when buttons are clicked. You can define

00:04:57.185 --> 00:04:58.545
how it looks, and you can define the

00:04:58.545 --> 00:05:01.105
actual structure to the HTML. And it's all

00:05:01.105 --> 00:05:03.505
neatly packaged into one component that you can

00:05:03.505 --> 00:05:06.000
reuse and call to build a part of

00:05:06.000 --> 00:05:09.600
your website. And it's sort of like a

00:05:09.600 --> 00:05:12.720
function in JavaScript, as Abhi was talking about

00:05:12.720 --> 00:05:14.560
in the last two lectures. You call on

00:05:14.560 --> 00:05:16.560
this component, and then it returns a part

00:05:16.560 --> 00:05:21.665
of your website for you. So going through

00:05:21.825 --> 00:05:24.305
Facebook, we can talk about what the components

00:05:24.305 --> 00:05:27.425
might look like. So the root level component

00:05:27.425 --> 00:05:29.345
is called app, and this is just everything

00:05:29.345 --> 00:05:32.650
in your website. And I'm going to be

00:05:32.650 --> 00:05:34.890
using a bunch of dash boxes here to

00:05:35.690 --> 00:05:38.490
show how the modules appear on the website.

00:05:38.970 --> 00:05:42.170
So within this total app component, there's going

00:05:42.170 --> 00:05:43.850
to be a number of different components, like

00:05:43.850 --> 00:05:46.315
the nav bar, the info bar, which has

00:05:46.315 --> 00:05:47.755
all your friends and things like that, and

00:05:47.755 --> 00:05:49.755
then your feed, which has all your posts.

00:05:50.075 --> 00:05:52.875
And these components can also be further broken

00:05:52.875 --> 00:05:55.515
down. For example, the feed component can be

00:05:55.515 --> 00:05:57.595
broken down into further smaller components that you

00:05:57.595 --> 00:06:00.250
build, like the post components. And these post

00:06:00.250 --> 00:06:02.650
components can be broken down into even smaller

00:06:02.650 --> 00:06:04.730
components, such as the actual content of the

00:06:04.730 --> 00:06:06.890
post and the post body and comments that

00:06:06.890 --> 00:06:11.210
appear below it. And you can see that

00:06:11.210 --> 00:06:14.545
there's this dependency. Each component depends on other

00:06:14.545 --> 00:06:17.585
components that make it up. And the structure

00:06:17.585 --> 00:06:19.025
is a bit like a tree, and we

00:06:19.025 --> 00:06:21.665
call this the component tree. And so it

00:06:21.665 --> 00:06:23.905
makes sense why the app component is called

00:06:23.905 --> 00:06:25.505
the root, because it's the root of the

00:06:25.505 --> 00:06:29.300
tree. And the arrows indicate dependencies. So app

00:06:29.300 --> 00:06:32.500
depends on the three components, navbar, feed and

00:06:32.500 --> 00:06:34.260
info bar, because that's what's used to build

00:06:34.260 --> 00:06:36.180
it. And then feed depends on posts, and

00:06:36.180 --> 00:06:38.580
posts depends on the content and the comments.

00:06:43.065 --> 00:06:45.225
Basically, in summary, the main idea of React

00:06:45.225 --> 00:06:48.185
is having these components that depend on other

00:06:48.185 --> 00:06:50.505
components and that can be reused. So these

00:06:50.505 --> 00:06:52.670
are all function calls, and you call on

00:06:52.670 --> 00:06:54.110
the function to build a part of your

00:06:54.110 --> 00:06:56.270
website. And that makes it really nice because

00:06:56.270 --> 00:06:58.030
now you can see what your website looks

00:06:58.030 --> 00:07:00.750
like. When you're writing up this website, instead

00:07:00.750 --> 00:07:02.590
of having a bunch of divs, you instead

00:07:02.590 --> 00:07:04.830
have a post body, which is composed of

00:07:04.830 --> 00:07:07.345
posts and comments, and then a feed, which

00:07:07.345 --> 00:07:09.905
is composed of post bodies, which is composed

00:07:09.905 --> 00:07:16.065
of posts and things like that. Within each

00:07:16.065 --> 00:07:18.945
component, can put whatever HTML, CSS, JavaScript you

00:07:18.945 --> 00:07:21.820
want to have any sort of front functionality

00:07:21.820 --> 00:07:26.300
that you need. So that's the summary of

00:07:26.300 --> 00:07:29.180
how components work in React. But to actually

00:07:29.180 --> 00:07:30.940
make them work, there's a couple of key

00:07:30.940 --> 00:07:34.505
features that we need to know about. So

00:07:34.505 --> 00:07:39.385
for example, if we have a comment, even

00:07:39.385 --> 00:07:41.785
if there are a bunch of different comments,

00:07:42.345 --> 00:07:45.305
are approximately the same, they're not entirely the

00:07:45.305 --> 00:07:47.040
same. So they don't have the exact same

00:07:47.040 --> 00:07:49.520
HTML, so we need to be able to

00:07:49.520 --> 00:07:53.360
generalize it. The way we're going to be

00:07:53.360 --> 00:07:57.520
doing this is or sorry, start, the things

00:07:57.520 --> 00:07:59.840
that can differ between comments are things like

00:07:59.840 --> 00:08:02.945
the actual content of the comment, author of

00:08:02.945 --> 00:08:06.225
the comment, when it's posted, and even the

00:08:06.225 --> 00:08:09.105
profile picture. But the general structure of it's

00:08:09.105 --> 00:08:10.705
the same in terms of how the HTML

00:08:10.705 --> 00:08:12.945
elements are ordered with respect to each other.

00:08:13.265 --> 00:08:17.340
So to be able to reuse this, reuse

00:08:17.340 --> 00:08:19.900
the skeleton where we have the same structure

00:08:19.900 --> 00:08:22.540
and the Like and Reply buttons are the

00:08:22.540 --> 00:08:25.740
same, we want to have some sort of

00:08:26.460 --> 00:08:29.180
input to our comment. And these are what

00:08:29.180 --> 00:08:32.665
are called props. So just like your functions

00:08:32.665 --> 00:08:35.465
have inputs, your components also can take in

00:08:35.465 --> 00:08:38.025
inputs and then render a part of your

00:08:38.025 --> 00:08:44.110
website based on those inputs. So for the

00:08:44.110 --> 00:08:45.550
case of our comment, since we want to

00:08:45.550 --> 00:08:48.510
have the author name, the actual content of

00:08:48.510 --> 00:08:50.270
the comment, the picture profile picture, and the

00:08:50.270 --> 00:08:52.990
date posted to vary along the comments, we

00:08:52.990 --> 00:08:55.710
can pass in these props, these inputs to

00:08:55.710 --> 00:08:57.790
the comment component, and then get out a

00:08:57.790 --> 00:09:00.885
comment that we want. So this sort of

00:09:00.885 --> 00:09:03.525
structure where we have post which depends on

00:09:03.525 --> 00:09:06.005
comments is we call the one where the

00:09:06.005 --> 00:09:07.925
arrow starts, the parent, and the one where

00:09:07.925 --> 00:09:10.645
the arrow ends, the child. And props are

00:09:10.645 --> 00:09:14.850
passed from the parent to the child, indicating

00:09:14.850 --> 00:09:19.410
what they want the child to render. So

00:09:19.410 --> 00:09:22.530
when you add in the props of Kenny

00:09:22.530 --> 00:09:25.410
Choi and the comment and then posted a

00:09:25.410 --> 00:09:28.050
minute ago, then you can render the comment

00:09:28.050 --> 00:09:32.425
that you want. One thing of note is

00:09:33.305 --> 00:09:36.345
when you pass in the prop, you can't

00:09:36.345 --> 00:09:38.905
mutate the prop on the side of the

00:09:38.905 --> 00:09:45.510
child. Or you can do things with the

00:09:45.510 --> 00:09:47.030
props. So just like if you take in

00:09:47.030 --> 00:09:48.870
a function and, say, you take in a

00:09:48.870 --> 00:09:52.550
number, you can do calculations of the number,

00:09:52.550 --> 00:09:54.345
but you can't change the number itself. So

00:09:54.345 --> 00:09:56.425
these props are determined within the parent, and

00:09:56.425 --> 00:09:58.185
it's passed down to the child, and they

00:09:58.185 --> 00:10:02.505
can't be changed by the child. And also

00:10:02.505 --> 00:10:04.665
another thing is you also can't pass the

00:10:04.665 --> 00:10:09.020
props from child to parent. So the main

00:10:09.020 --> 00:10:11.580
thing with props is it lets us generalize

00:10:11.580 --> 00:10:13.980
these React components. And if we have a

00:10:13.980 --> 00:10:16.140
component which has parts of it which are

00:10:16.140 --> 00:10:18.700
variable, then we can pass in these variables

00:10:18.780 --> 00:10:20.380
to indicate how we want it to render.

00:10:24.655 --> 00:10:26.895
But that's how we actually render something that

00:10:26.895 --> 00:10:29.295
changes over time. But how do we actually

00:10:29.935 --> 00:10:32.655
keep track of what's changing on the website?

00:10:32.655 --> 00:10:35.455
Because these props are not mutable. And so

00:10:35.455 --> 00:10:37.135
if our website is updating over time, let's

00:10:37.135 --> 00:10:39.060
say more comments are flooding in, then we

00:10:39.060 --> 00:10:40.500
need a way to keep track of what

00:10:40.500 --> 00:10:44.340
we want to render on our website. To

00:10:44.340 --> 00:10:46.100
do this, we're going to use something called

00:10:46.100 --> 00:10:48.740
the state. So this is the second important

00:10:48.740 --> 00:10:52.285
part of React components. And these are actually

00:10:52.285 --> 00:10:55.565
just the main two, props and states. So

00:10:55.565 --> 00:10:58.365
state is some sort of information maintained by

00:10:58.365 --> 00:11:00.285
a component. It's not something that's taken in

00:11:00.285 --> 00:11:03.485
by a component. And it's something that's mutable,

00:11:03.565 --> 00:11:06.740
unlike props. And it's something that you can

00:11:06.740 --> 00:11:09.700
update with whatever logic you want within your

00:11:09.700 --> 00:11:15.860
JavaScript. So for example, in the case of

00:11:15.860 --> 00:11:18.835
our posts and comments, within the post we

00:11:18.835 --> 00:11:21.315
can maintain the state which has a list

00:11:21.315 --> 00:11:26.035
of comments. So we can have an array

00:11:26.035 --> 00:11:29.235
which contains the first comment and then another

00:11:29.235 --> 00:11:32.030
comment and just maintain the state of comments

00:11:32.030 --> 00:11:35.550
which can change over time. And we use

00:11:35.550 --> 00:11:38.270
this state to pass down props to the

00:11:38.270 --> 00:11:41.550
child components of the comments. And once we

00:11:41.550 --> 00:11:44.510
pass this down, the comment components can render

00:11:44.975 --> 00:11:47.055
the comments that we have within the state.

00:11:52.415 --> 00:11:54.895
Why do we keep the comment data in

00:11:55.375 --> 00:11:57.295
the post state and not the comment state?

00:11:58.790 --> 00:12:01.990
Well, the post state is sort of the

00:12:01.990 --> 00:12:04.070
larger component, and it contains all the comments.

00:12:04.070 --> 00:12:05.670
And we want to know which comments to

00:12:05.670 --> 00:12:09.510
render when in the post state. So can't

00:12:09.510 --> 00:12:11.110
maintain these within the comment states because we

00:12:11.110 --> 00:12:14.695
don't know how many comments to have. So

00:12:14.695 --> 00:12:16.695
for example, if we add another comment, then

00:12:17.015 --> 00:12:19.655
we don't have another comment component where we

00:12:19.655 --> 00:12:23.735
can store that state. So we need to

00:12:23.735 --> 00:12:25.015
have it in the post state so that

00:12:25.015 --> 00:12:27.255
we can actually render the x number of

00:12:27.255 --> 00:12:31.710
comments that we need. So in this example,

00:12:31.710 --> 00:12:33.790
if we add another comment, we need to

00:12:33.790 --> 00:12:35.630
be able to render that additional comment. But

00:12:35.630 --> 00:12:37.470
if we didn't have the state within the

00:12:37.470 --> 00:12:38.910
post, we wouldn't be able to do that.

00:12:41.645 --> 00:12:43.725
We can go through another example of using

00:12:43.725 --> 00:12:47.805
states and props. So there's a feature on

00:12:47.805 --> 00:12:50.285
Facebook where you can hit view replies to

00:12:50.285 --> 00:12:54.045
a comment. And you interact with it by

00:12:54.045 --> 00:12:57.130
clicking on the button, and the website needs

00:12:57.130 --> 00:13:04.250
to adjust by rendering these comment replies. Turn

00:13:04.250 --> 00:13:07.450
and talk to a neighbor about which of

00:13:07.450 --> 00:13:10.330
these options is best for showing comment replies.

00:14:35.815 --> 00:14:38.615
So in this case, the best thing to

00:14:38.615 --> 00:14:41.575
do is to store the state show replies

00:14:41.575 --> 00:14:44.855
within the comment component. So this is the

00:14:44.855 --> 00:14:47.335
same structure as the previous one, except now

00:14:47.335 --> 00:14:50.240
our comment component is the parent component. And

00:14:50.240 --> 00:14:52.640
it needs to maintain whether or not to

00:14:52.640 --> 00:14:56.240
render the replies, which are its children components.

00:14:58.640 --> 00:15:02.240
So if we maintain this showReply state within

00:15:02.240 --> 00:15:04.480
the common component, we can toggle it to

00:15:04.480 --> 00:15:08.095
be true or false. And then if it's

00:15:08.095 --> 00:15:10.815
true, then we'll render its children components, which

00:15:10.815 --> 00:15:16.095
are the replies. So as another recap, the

00:15:16.095 --> 00:15:18.895
state is some information that you store within

00:15:18.895 --> 00:15:21.710
a component. And it is just what it

00:15:21.710 --> 00:15:23.710
is. It stores the state of the component,

00:15:23.950 --> 00:15:26.270
which determines how it renders things and how

00:15:26.270 --> 00:15:30.270
it renders its children. And it's mutable, and

00:15:30.270 --> 00:15:31.870
you can use the states and pass it

00:15:31.870 --> 00:15:36.375
down into children components as props to determine

00:15:36.375 --> 00:15:43.015
what to render. And here's an overall review

00:15:43.015 --> 00:15:45.575
of what's going on here. And we have

00:15:45.575 --> 00:15:48.055
states and props. Again, the states are passed

00:15:48.055 --> 00:15:51.560
down into the children components, and it renders.

00:15:53.560 --> 00:15:57.320
So that's the basic structure of React and

00:15:57.320 --> 00:15:59.640
React components. Are there any questions so far?

00:16:06.285 --> 00:16:10.685
Okay. If not, then I'll pass it off

00:16:10.685 --> 00:16:37.495
to Sanveth for an actual practical application. Cool.

00:16:44.295 --> 00:16:46.375
So we've seen a little bit about how

00:16:46.375 --> 00:16:49.415
React can help you with abstraction, as well

00:16:49.415 --> 00:16:53.960
as reusability with components, making your websites a

00:16:53.960 --> 00:16:56.440
lot cleaner to code up. So let's see

00:16:56.440 --> 00:17:00.600
how that actually looks like in code. And

00:17:00.600 --> 00:17:02.200
my workflow for this is going to be

00:17:02.200 --> 00:17:05.640
starting with the hard coded version where we're

00:17:05.640 --> 00:17:08.335
directly writing in all the information you'd need

00:17:08.335 --> 00:17:11.295
to render something, and then slowly rolling it

00:17:11.295 --> 00:17:14.975
back and abstracting it away. So let's start

00:17:14.975 --> 00:17:17.855
with this pretty simple component here. It's just

00:17:17.855 --> 00:17:22.920
a common reply, not too much information. Critically,

00:17:22.920 --> 00:17:29.960
it's just the name and the content. Yeah,

00:17:29.960 --> 00:17:31.800
so let's look at the code for a

00:17:31.800 --> 00:17:34.440
general React component. Three things that you're going

00:17:34.440 --> 00:17:37.655
to need in every file that you write.

00:17:37.815 --> 00:17:40.135
First, you need to import React. Again, React

00:17:40.135 --> 00:17:42.455
is a library. It's not built into JavaScript.

00:17:42.615 --> 00:17:45.255
So you'll need to first import React. We're

00:17:45.255 --> 00:17:47.175
also going to import this useState thing. That's

00:17:47.175 --> 00:17:49.570
going to help us with maintaining state. More

00:17:49.570 --> 00:17:52.210
on that later. Next, we have to actually

00:17:52.210 --> 00:17:54.690
define our component. So I want you to

00:17:54.690 --> 00:17:58.210
start thinking of these components as functions. And

00:17:58.210 --> 00:18:00.450
a function is just like a fancy name

00:18:00.450 --> 00:18:03.125
for something with inputs and outputs. Right? Our

00:18:03.125 --> 00:18:04.485
inputs in this case are going to be

00:18:04.485 --> 00:18:07.125
whatever props are passed down to us from

00:18:07.125 --> 00:18:11.205
a parent component. And our output is just

00:18:11.205 --> 00:18:12.565
going to be what we render on the

00:18:12.565 --> 00:18:17.220
actual page. Finally, we have to export the

00:18:17.220 --> 00:18:19.220
component. And this will let us reuse it

00:18:19.220 --> 00:18:27.755
in top level components. So again, I want

00:18:27.755 --> 00:18:30.155
you to start thinking of components as functions

00:18:30.155 --> 00:18:32.875
that take in props and then output something

00:18:32.875 --> 00:18:41.150
to be rendered. As Evan mentioned before, a

00:18:41.150 --> 00:18:43.390
React component kind of bundles together a bunch

00:18:43.390 --> 00:18:46.430
of JavaScript logic, as well as HTML rendering,

00:18:47.070 --> 00:18:51.550
and as well as CSS. So going back

00:18:51.550 --> 00:18:53.255
to the function analogy, you can think of

00:18:53.255 --> 00:18:55.575
the logic of the function as all the

00:18:55.575 --> 00:18:58.135
JavaScript. And then what you want to render

00:18:58.135 --> 00:19:00.375
is something called JSX. It's kind of similar

00:19:00.375 --> 00:19:02.615
to HTML. I'll explain it a little bit

00:19:03.415 --> 00:19:06.615
in a bit. But that's the general idea.

00:19:08.900 --> 00:19:11.220
So let's try to render this comment reply.

00:19:14.500 --> 00:19:16.660
As you can see, it looks very similar

00:19:16.660 --> 00:19:19.300
to what we've done before. We'll just create

00:19:19.300 --> 00:19:23.345
a div, and then, again, we're hard coding

00:19:23.345 --> 00:19:24.785
right now, so we'll just add in the

00:19:24.785 --> 00:19:30.385
header and then some text. But of course,

00:19:30.385 --> 00:19:31.585
this isn't what we want our end goal

00:19:31.585 --> 00:19:32.945
to be. We want to be able to

00:19:32.945 --> 00:19:35.985
reuse this component for any arbitrary name or

00:19:35.985 --> 00:19:42.100
common text. And this is where we use

00:19:42.100 --> 00:19:48.740
props. Okay. If you'll recall, props are just

00:19:48.740 --> 00:19:50.980
like an object that's passed down into your

00:19:50.980 --> 00:19:53.985
function. And the way that we extract information

00:19:53.985 --> 00:19:55.905
from objects in JavaScript is by using this

00:19:55.905 --> 00:19:59.585
dot thing. So we'll just do props. Name,

00:19:59.585 --> 00:20:06.400
props dot content. And now that we've done

00:20:06.400 --> 00:20:08.560
that, we've removed all the hard code away,

00:20:08.560 --> 00:20:11.360
we can easily reuse this component to render

00:20:11.360 --> 00:20:15.280
at least the name and the content. Okay.

00:20:15.280 --> 00:20:18.160
So right. What is JSX? I mentioned that

00:20:18.160 --> 00:20:20.160
it's very similar to HTML, and it is.

00:20:21.575 --> 00:20:26.375
But there are a couple of differences. So

00:20:26.535 --> 00:20:30.935
one difference is that in JSX, you can

00:20:30.935 --> 00:20:34.695
actually escape into JavaScript as well if you

00:20:34.695 --> 00:20:36.680
want to do some logic within your component.

00:20:36.840 --> 00:20:41.880
So for example, you can see here within

00:20:41.880 --> 00:20:45.160
the curly braces, what's going on inside of

00:20:45.160 --> 00:20:48.120
there isn't actually HTML, right? It's JavaScript because

00:20:48.120 --> 00:20:55.205
we're unpacking something from an object. So anytime

00:20:55.205 --> 00:20:58.405
we want to extract something from props, we'll

00:20:58.405 --> 00:21:00.965
have to use these curly braces. Also notice

00:21:00.965 --> 00:21:03.000
that instead of class, which we would normally

00:21:03.000 --> 00:21:04.520
use if we wanted to style something with

00:21:04.520 --> 00:21:07.160
CSS, we're using class name. And that's because

00:21:07.160 --> 00:21:09.160
class is already a thing in JavaScript. So

00:21:09.160 --> 00:21:11.480
we can't just use the same thing again.

00:21:17.475 --> 00:21:20.435
But yeah, for most purposes, you can kind

00:21:20.435 --> 00:21:22.195
of think of them as the same thing.

00:21:22.515 --> 00:21:25.395
Just remember those two things about escaping so

00:21:25.395 --> 00:21:28.675
that you can use JavaScript and class name.

00:21:34.020 --> 00:21:35.860
Okay, right. So we've talked about props a

00:21:35.860 --> 00:21:38.100
little bit. Let's move on to talking about

00:21:38.100 --> 00:21:43.700
state. So in our components, we had two

00:21:43.700 --> 00:21:45.620
things that could easily be passed down from

00:21:45.620 --> 00:21:49.505
the parent into this component. But something like

00:21:49.505 --> 00:21:51.185
a Like button, it doesn't really make sense

00:21:51.185 --> 00:21:52.625
to store that in the parent, right? Because

00:21:52.625 --> 00:21:55.345
we can just do that in each modular

00:21:55.345 --> 00:22:00.750
comment reply. So how about we let this

00:22:00.750 --> 00:22:03.870
component maintain the state by itself? The syntax

00:22:03.870 --> 00:22:07.150
for maintaining state is as follows up here,

00:22:07.150 --> 00:22:08.830
and you'll get some more practice with this,

00:22:08.830 --> 00:22:10.830
so don't worry if you don't understand it

00:22:10.830 --> 00:22:14.795
at first. But the idea is to initialize

00:22:14.795 --> 00:22:18.315
a state, you'll write const, and then you'll

00:22:18.315 --> 00:22:21.755
have to put the state variable as well

00:22:21.755 --> 00:22:25.100
as the state setter. The state variable is

00:22:25.100 --> 00:22:27.340
just the state itself, and the setter is

00:22:27.340 --> 00:22:30.540
a function that can mutate the state. And

00:22:30.540 --> 00:22:32.700
then you set that equal to useState, which

00:22:32.700 --> 00:22:35.260
is like initializing it. And then within those

00:22:36.135 --> 00:22:39.255
parentheses over there is the initial value. So

00:22:39.655 --> 00:22:43.655
this is like initializing isLiked to false. And

00:22:43.655 --> 00:22:45.335
it's also giving us a function that can

00:22:45.335 --> 00:22:54.880
change it. So let's use our state to

00:22:54.880 --> 00:23:01.600
render the like function. There's some styling missing

00:23:01.600 --> 00:23:04.000
here, but the general idea is that we

00:23:04.000 --> 00:23:07.595
just want if isLiked is true, then we

00:23:07.595 --> 00:23:09.675
display liked. And then if it's not, then

00:23:09.675 --> 00:23:11.435
we put like to see that you can

00:23:11.435 --> 00:23:15.355
like it. The syntax that I have here

00:23:15.355 --> 00:23:17.755
might be new to some of you. But

00:23:17.755 --> 00:23:19.355
again, we have it in curly braces because

00:23:19.355 --> 00:23:23.660
it's in JavaScript. It's JavaScript logic. So the

00:23:23.660 --> 00:23:25.980
statement is called a ternary. And it's just

00:23:25.980 --> 00:23:28.060
like an if else statement, but written a

00:23:28.060 --> 00:23:30.940
little bit more clean, or not clean, depending

00:23:30.940 --> 00:23:33.420
on what you like. But you'll put the

00:23:33.420 --> 00:23:36.825
condition here, then a question mark. And then

00:23:36.825 --> 00:23:38.825
if the condition is true, then it'll return

00:23:38.825 --> 00:23:40.825
this. And if it's not, then it'll return

00:23:40.825 --> 00:23:46.105
that. So if isLiked is true, then we're

00:23:46.105 --> 00:23:48.025
going to display liked as we want. And

00:23:48.025 --> 00:23:49.225
if it's not, then we're going to put

00:23:49.225 --> 00:23:59.110
liked. And now, skipping a little things, we

00:23:59.110 --> 00:24:01.030
have a nice component that we can reuse.

00:24:03.035 --> 00:24:06.715
And, yeah, it doesn't matter what the name

00:24:06.715 --> 00:24:08.315
or the message is. We can use this

00:24:08.315 --> 00:24:12.475
for basically anything. Okay. I'll stop for questions

00:24:13.035 --> 00:24:27.130
real quick. Cool. Now that we've written our

00:24:27.130 --> 00:24:30.330
first component, let's try to work through an

00:24:30.330 --> 00:24:35.495
entire web page. So the first thing that

00:24:35.495 --> 00:24:37.495
we need to do is understand the structure

00:24:37.495 --> 00:24:39.655
of this thing. So let's try to work

00:24:39.655 --> 00:24:41.815
through and generate the component tree that Evan

00:24:41.815 --> 00:24:47.490
was talking about earlier. In any web page,

00:24:47.730 --> 00:24:49.250
the root is going to be just this

00:24:49.250 --> 00:24:55.730
app component, which will contain everything. And let's

00:24:55.730 --> 00:24:57.730
try to look for some other components in

00:24:57.730 --> 00:25:03.295
here. So some things that we can think

00:25:03.295 --> 00:25:06.095
of are, first, the nav bar. That seems

00:25:06.095 --> 00:25:07.695
like it's pretty modular, and we might want

00:25:07.695 --> 00:25:11.135
to abstract things away in that. The intro

00:25:11.135 --> 00:25:13.700
seems like it can also be combined into

00:25:13.700 --> 00:25:17.220
one specific component. Photos would be nice to

00:25:17.220 --> 00:25:21.060
keep, abstracts it away. And then post is

00:25:21.060 --> 00:25:23.060
definitely something that we want to reuse many,

00:25:23.060 --> 00:25:25.460
many times. That's a great candidate for a

00:25:25.460 --> 00:25:32.235
component. Here's what a tree looks like. We

00:25:32.235 --> 00:25:34.475
have app at the top level, and it

00:25:34.475 --> 00:25:42.260
depends on all of these different components. To

00:25:42.260 --> 00:25:45.060
reiterate, React components are powerful because they can

00:25:45.060 --> 00:25:49.940
help us with abstraction and reusability. And again,

00:25:49.940 --> 00:25:54.340
abstraction means putting a bunch of things into

00:25:54.340 --> 00:25:55.860
a black box so that you won't have

00:25:55.860 --> 00:25:58.815
to look at fine details and stuff. But

00:25:58.815 --> 00:26:02.895
you can reuse it by just importing it

00:26:02.895 --> 00:26:06.175
and then writing down the name of it.

00:26:06.895 --> 00:26:12.470
And reusability, I think, is pretty clear. So

00:26:12.470 --> 00:26:16.630
yeah, navbar, intro, photos, they're all great to

00:26:16.630 --> 00:26:19.670
keep as components because you'll abstract away messy

00:26:19.670 --> 00:26:21.190
code that you don't want to look at

00:26:21.190 --> 00:26:22.390
every time you look at your web page.

00:26:22.885 --> 00:26:25.765
And post is helpful for both abstraction as

00:26:25.765 --> 00:26:27.365
well as your usability, because we're going to

00:26:27.365 --> 00:26:37.160
have many posts on a single page. And

00:26:37.160 --> 00:26:38.920
again, my workflow for this is going to

00:26:38.920 --> 00:26:41.080
be starting with the hard coded version and

00:26:41.080 --> 00:26:43.720
then rolling it back to a more abstracted

00:26:43.720 --> 00:26:47.640
and reusable module. So let's start with the

00:26:47.640 --> 00:26:52.025
app. Okay, this one I'll just start off

00:26:52.025 --> 00:26:55.465
with, fully modular. But you can see that

00:26:56.105 --> 00:26:59.065
this app is very simple. All it does

00:26:59.065 --> 00:27:04.390
is instantiate all of these different components, And

00:27:04.390 --> 00:27:06.230
there's really not that much more to it.

00:27:07.830 --> 00:27:10.870
One thing that we are missing is props.

00:27:12.310 --> 00:27:14.630
So if you'll recall from the tree, all

00:27:14.630 --> 00:27:17.430
these different components were like direct children of

00:27:17.430 --> 00:27:19.235
the app component, which means the app is

00:27:19.235 --> 00:27:22.435
responsible for passing down props into those ones.

00:27:28.115 --> 00:27:31.475
The syntax to pass down props in React

00:27:31.475 --> 00:27:36.270
is very similar to attributes in HTML. You

00:27:36.270 --> 00:27:39.550
can set a variable inside of your props

00:27:39.550 --> 00:27:42.990
object by doing this kind of thing. So

00:27:42.990 --> 00:27:54.965
write the variable that equals the value. So

00:27:54.965 --> 00:27:56.565
if we wanted to add props into our

00:27:56.565 --> 00:27:58.565
components, this is what it would look like.

00:27:58.725 --> 00:28:02.325
So, for example, in intro, we'd want to

00:28:02.325 --> 00:28:05.925
know the education and the city of whatever

00:28:05.760 --> 00:28:08.640
person this profile is of, so we pass

00:28:08.640 --> 00:28:12.080
that down. Photos, we want to pass down

00:28:13.040 --> 00:28:14.800
maybe the paths to all the photos that

00:28:14.800 --> 00:28:18.605
we have in our database somewhere. And then

00:28:18.605 --> 00:28:20.925
the post, obviously we want the name and

00:28:20.925 --> 00:28:28.045
the content. All right, let's look at some

00:28:28.045 --> 00:28:32.700
of these children components. And again, we're starting

00:28:32.700 --> 00:28:37.180
hard coded and then rolling it back. So

00:28:37.180 --> 00:28:39.980
the intro here, pretty simple. It just has

00:28:39.980 --> 00:28:42.940
two pieces of information, wherever you study at

00:28:42.940 --> 00:28:48.595
and wherever you're from. Let's try to roll

00:28:48.595 --> 00:28:54.035
it back using the props. Again, remember that

00:28:54.035 --> 00:28:56.595
every React component is just a function that

00:28:56.595 --> 00:28:58.675
takes props and turns it into something to

00:28:58.675 --> 00:29:01.930
render. So assuming that we get the props,

00:29:02.010 --> 00:29:04.090
all we need to do is just access

00:29:04.090 --> 00:29:07.450
those attributes of the props. So use curly

00:29:07.450 --> 00:29:11.050
braces, then props.education, and then for the city,

00:29:11.050 --> 00:29:22.085
props.city. Let's look at photos. So photos is

00:29:22.085 --> 00:29:24.805
a little bit more complicated. To render this

00:29:24.805 --> 00:29:28.245
component, we want to have access to all

00:29:28.080 --> 00:29:29.680
images that will be used here. So we

00:29:29.680 --> 00:29:33.760
have like seven pictures in Kenny's Facebook page.

00:29:41.445 --> 00:29:44.325
Oh, Okay. Let me explain this. So this

00:29:44.325 --> 00:29:48.485
thing here is mapping each of the photos

00:29:48.485 --> 00:29:54.320
into an image elements in JSX. And the

00:29:54.320 --> 00:29:56.880
syntax for this is using this map function.

00:29:56.960 --> 00:30:01.280
So dot map takes in a function, and

00:30:01.280 --> 00:30:04.480
it'll apply that function to each element of

00:30:04.480 --> 00:30:08.815
an array. So for example, we have this

00:30:08.815 --> 00:30:12.255
array of photos. And then because we're using

00:30:12.255 --> 00:30:15.295
dot map, it'll turn each of those different

00:30:15.295 --> 00:30:21.360
images into a JSX element. And that's why

00:30:21.360 --> 00:30:23.520
we can have all the images laid out

00:30:23.520 --> 00:30:26.720
together. And I think you'll get some more

00:30:26.720 --> 00:30:30.240
practice with this later. But good to know.

00:30:32.115 --> 00:30:34.915
If we wanted to reactify this, then we

00:30:34.915 --> 00:30:36.915
can replace all those image links with just

00:30:36.915 --> 00:30:41.395
props, which we'll pass down from app. So

00:30:41.715 --> 00:30:44.675
comparing to what we had before, we just

00:30:44.675 --> 00:30:48.140
replace the my links thing with props. Links,

00:30:48.460 --> 00:30:55.660
and it looks a whole lot cleaner. Next,

00:30:55.660 --> 00:30:57.980
let's look at the post. Post is, again,

00:30:58.060 --> 00:31:01.340
pretty simple. We have the name and then

00:31:01.340 --> 00:31:02.915
the content. We also also have the Like

00:31:02.915 --> 00:31:06.355
button, which maybe uses something other than props.

00:31:06.595 --> 00:31:10.675
But let's first look at those props things.

00:31:11.475 --> 00:31:14.355
Very similar to the intro, we're just going

00:31:14.355 --> 00:31:19.340
to access those things using JavaScript. Okay, let's

00:31:19.340 --> 00:31:21.420
talk about the Like button. So for the

00:31:21.420 --> 00:31:24.300
Like button, we probably aren't going to be

00:31:24.300 --> 00:31:28.220
passing down a prop to denote whether it's

00:31:28.220 --> 00:31:30.700
liked or not, because it's something very intrinsic

00:31:30.700 --> 00:31:34.045
to the component. And it's not like one

00:31:34.045 --> 00:31:35.725
of those cases that Evan mentioned before where

00:31:35.725 --> 00:31:37.565
you'd like to have it up in a

00:31:37.565 --> 00:31:40.045
higher level thing. So let's just use state

00:31:40.045 --> 00:31:45.005
to implement the Like button once again. We

00:31:45.005 --> 00:31:47.165
also want to implement the functionality of when

00:31:47.165 --> 00:31:49.450
the button is clicked, like button will change

00:31:49.450 --> 00:31:53.610
state. And that makes it a really good

00:31:53.610 --> 00:31:57.850
candidate for state. We're going to use the

00:31:57.850 --> 00:32:00.570
same syntax as before. And this is where

00:32:00.570 --> 00:32:01.850
we're going to use that useState thing that

00:32:01.850 --> 00:32:06.025
we imported. So again, we'll have const, and

00:32:06.025 --> 00:32:08.905
then we have an array that's defined as

00:32:08.905 --> 00:32:11.225
is liked. Or we have is liked and

00:32:11.225 --> 00:32:13.305
then set is liked. The first one is

00:32:13.305 --> 00:32:14.825
the state. The next one is the state

00:32:14.825 --> 00:32:17.670
setter. Then we initialize that to false using

00:32:17.670 --> 00:32:26.070
useState. And over here is actually an attribute

00:32:26.070 --> 00:32:30.955
called onClick. So whenever you're rendering a button,

00:32:30.955 --> 00:32:33.275
there's an attribute for whenever the button is

00:32:33.275 --> 00:32:36.555
clicked. And that's onClick. So onClick, you'll set

00:32:36.555 --> 00:32:38.555
equal to a function that you want to

00:32:38.555 --> 00:32:40.795
be called every time the button gets clicked.

00:32:41.115 --> 00:32:45.490
So as an example here, onClick is set

00:32:45.490 --> 00:32:48.050
equal to this callback function that just like

00:32:48.290 --> 00:32:52.050
or not callback, but a function that sets

00:32:52.050 --> 00:32:55.490
isLiked to whatever it wasn't before. So they

00:32:55.490 --> 00:33:02.515
use an exclamation mark here. And this will

00:33:02.515 --> 00:33:05.235
basically just toggle isLiked every time you click

00:33:05.235 --> 00:33:10.595
the button. And then within that, we're rendering

00:33:10.595 --> 00:33:12.275
the same thing that we had before with

00:33:12.275 --> 00:33:16.460
the comment reply. So it's the conditional statement

00:33:16.460 --> 00:33:18.460
again. If isLiked is true, then we're going

00:33:18.460 --> 00:33:20.700
to say liked. And if it's not, then

00:33:20.700 --> 00:33:26.905
we're going say liked. Don't worry if this

00:33:26.905 --> 00:33:28.505
is a little bit confusing to you right

00:33:28.505 --> 00:33:32.105
now. We're rushing through things a lot. There's

00:33:32.105 --> 00:33:33.705
a lot to cover, but you'll get some

00:33:33.705 --> 00:33:36.985
practice with this in the workshop and later

00:33:36.985 --> 00:33:45.610
today with more on React Hooks. So reiterating,

00:33:46.250 --> 00:33:49.130
the set is like function. Within the parentheses,

00:33:49.130 --> 00:33:50.890
it'll set it to whatever value is in

00:33:50.890 --> 00:33:57.255
there. So every time onClick is true, then

00:33:57.815 --> 00:33:59.735
we're going to set isLiked to be the

00:33:59.735 --> 00:34:09.000
opposite of whatever it was before. Okay. Yeah,

00:34:09.000 --> 00:34:10.920
so that was a whole lot about React.

00:34:11.640 --> 00:34:14.360
Definitely don't worry if you don't get all

00:34:14.360 --> 00:34:16.520
the things that I talked about. We have

00:34:16.520 --> 00:34:19.505
a guide for you to review. Very helpful.

00:34:19.585 --> 00:34:23.105
Always come back to it. So weblab. Isreactguide.

00:34:26.705 --> 00:34:30.385
And just to recap, React is useful because

00:34:30.385 --> 00:34:33.330
we can do abstraction and readability. We want

00:34:33.330 --> 00:34:35.250
to divide our app into just a bunch

00:34:35.250 --> 00:34:39.010
of components. One component goes in each file,

00:34:39.250 --> 00:34:42.530
and then each component will bundle together some

00:34:43.090 --> 00:34:46.850
JavaScript logic and then output some JSX. And

00:34:46.850 --> 00:34:55.585
the syntax for doing that is below. Props

00:34:55.585 --> 00:34:57.585
and state are the name of the game

00:34:57.585 --> 00:35:01.905
with React. We'll pass in props using the

00:35:01.905 --> 00:35:05.330
attribute syntax. And then we read those props

00:35:05.330 --> 00:35:10.450
by accessing as a JavaScript object. For state,

00:35:10.450 --> 00:35:14.530
we're going to declare states as the syntax

00:35:14.530 --> 00:35:18.745
that I showed you. And we can always

00:35:18.745 --> 00:35:21.225
set our state by calling the set function

00:35:22.825 --> 00:35:24.105
with the value that we want to set

00:35:24.105 --> 00:35:28.954
it to. All right. And make sure to

00:35:28.954 --> 00:35:30.794
use class name instead of class whenever you're

00:35:30.794 --> 00:35:31.354
doing styling.
