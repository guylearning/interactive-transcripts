WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 846b2182-582b-4717-a5d2-30068f16356d
Created: 2025-05-15T20:40:31.340Z
Duration: 2110.093
Channels: 1

00:00:00.320 --> 00:00:03.120
Now we'll start workshop four where we'll hook

00:00:03.120 --> 00:00:05.280
the database to your Catholic app so you'll

00:00:05.280 --> 00:00:07.520
end up storing all your user information, story

00:00:07.520 --> 00:00:12.720
information, and comment information in MongoDB. We good?

00:00:12.720 --> 00:00:47.415
Okay. Okay. So now we're going to move

00:00:47.415 --> 00:00:50.055
on to the live coding portion. So get

00:00:50.055 --> 00:00:54.295
ready for some, workshopping. So in today's workshop,

00:00:54.295 --> 00:00:56.535
we're going to hook our back end server

00:00:56.190 --> 00:00:58.990
with our Mongo database. We're gonna create models

00:00:58.990 --> 00:01:00.750
for our comments and stories, and then we're

00:01:00.750 --> 00:01:02.750
gonna modify our API endpoints to use the

00:01:02.750 --> 00:01:06.110
Mongoose models that we create. If you want

00:01:06.110 --> 00:01:08.190
sample code to follow along with, you can

00:01:08.190 --> 00:01:11.135
go to weblep.is/mongo, and it should have a

00:01:11.135 --> 00:01:14.015
lot of helpful code snippets there to to

00:01:14.015 --> 00:01:26.460
get you started. Okay. So first, we're gonna

00:01:26.460 --> 00:01:29.260
connect our app to MongoDB using Mongoose. So

00:01:29.260 --> 00:01:31.740
you guys should have already gotten your connection

00:01:31.740 --> 00:01:34.460
string in homework zero, but if you need

00:01:34.460 --> 00:01:36.780
some help or, like, with getting it right

00:01:36.780 --> 00:01:38.220
now, feel free to hop on the queue

00:01:38.220 --> 00:01:40.465
and a staff can come help you. To

00:01:40.465 --> 00:01:42.625
start, we're gonna git fetch, git reset dash

00:01:42.625 --> 00:01:44.865
dash hard, and git checkout w four starter.

00:01:55.580 --> 00:01:58.620
Okay. Cool. So if you guys were oh,

00:01:58.620 --> 00:02:00.380
sorry. It's actually homework two. But if you

00:02:00.380 --> 00:02:02.620
guys remember your SRV, which is this long

00:02:02.620 --> 00:02:06.845
fancy string that should start with MongoDB plus

00:02:06.845 --> 00:02:11.885
SRV. So you wanna get that, and then

00:02:11.885 --> 00:02:13.725
you wanna copy and paste it into server

00:02:13.725 --> 00:02:16.125
dot j s. So if you go to

00:02:16.125 --> 00:02:20.470
MongoDB, and you should have, like, a database

00:02:20.630 --> 00:02:24.470
for your project or whatever, you can click

00:02:24.470 --> 00:02:28.070
this connect new, and then you should get

00:02:28.070 --> 00:02:33.065
your connection string right here. Yeah. So I'll

00:02:33.065 --> 00:02:36.425
give you some time to find that. And

00:02:36.425 --> 00:02:38.025
then once you have that, you just wanna

00:02:38.025 --> 00:02:43.225
go to server.js and under oops. If we

00:02:43.225 --> 00:02:56.050
go to this const mongo connection URL, where

00:02:56.050 --> 00:02:59.650
it says process.env.mongo URL, you wanna copy and

00:02:59.650 --> 00:03:01.730
paste your connection string into there and replace

00:03:01.730 --> 00:03:09.515
this. So I'm gonna copy mine. Key. And

00:03:09.515 --> 00:03:16.470
let's paste that right here. Okay. Raise your

00:03:16.470 --> 00:03:18.070
hand if you need more time with this

00:03:18.070 --> 00:03:25.430
step. Okay. Cool. Everyone's good. Oh. Oh. Oh,

00:03:26.230 --> 00:03:28.310
okay. Okay. Yeah. If you're having issues, make

00:03:28.310 --> 00:03:31.185
sure you delete brackets with database underscore password

00:03:31.185 --> 00:03:36.945
and put your own password there. And if

00:03:36.945 --> 00:03:38.865
it's still not working for you, feel free

00:03:38.865 --> 00:03:41.745
to go to slide 54 and use the

00:03:42.145 --> 00:03:44.305
our connection string if yours is not set

00:03:44.305 --> 00:03:45.910
up yet. You just won't be able to

00:03:45.910 --> 00:03:48.310
see things that are posted in the database,

00:03:48.310 --> 00:03:50.470
but it should work for following along with

00:03:50.470 --> 00:03:57.670
the workshop. Yeah. Okay. So now if you

00:03:57.670 --> 00:04:00.165
do npm install and npm start, you should

00:04:00.165 --> 00:04:02.005
see a message that says server running on

00:04:02.005 --> 00:04:18.050
port 3,000 and connected to MongoDB. So Oh,

00:04:18.050 --> 00:04:26.155
wait. I have another terminal running. Oops. Yeah.

00:04:26.155 --> 00:04:27.515
There we go. So you should see this

00:04:27.515 --> 00:04:30.155
server running on port 2,000 connected to MongoDB

00:04:30.155 --> 00:04:34.635
message. Hopefully, everyone is able to see that.

00:04:35.355 --> 00:04:37.115
Okay. Cool. So now on to the actual

00:04:37.115 --> 00:04:39.595
workshop. So first thing we're gonna do is

00:04:39.595 --> 00:04:43.510
create comment and story models. Feel free to

00:04:43.510 --> 00:04:45.270
get check out w four starter if you

00:04:45.270 --> 00:04:49.190
haven't already. So if you remember the MongoDB

00:04:49.190 --> 00:04:51.510
hierarchy that Sophie was talking about earlier, we

00:04:51.510 --> 00:04:54.230
have our overarching Catbook database. And within that

00:04:54.230 --> 00:04:56.790
database, we should have two collections, the stories

00:04:56.865 --> 00:04:59.105
collection and the comments collection. And within each

00:04:59.105 --> 00:05:01.025
collection in our database, then we have our

00:05:01.025 --> 00:05:03.265
individual documents, which are like the stories and

00:05:03.265 --> 00:05:05.185
the comments that people will be posting. Each

00:05:05.185 --> 00:05:07.985
of these documents should have fields like ID,

00:05:07.985 --> 00:05:12.305
content, etcetera. So in models.js, we want to

00:05:12.465 --> 00:05:14.360
or sorry. In the models directory, we wanna

00:05:14.360 --> 00:05:17.880
open story.js. So you wanna open the story.js

00:05:17.880 --> 00:05:20.440
file. And what we're going to do is

00:05:20.440 --> 00:05:22.520
we're going to try to enforce a structure

00:05:22.520 --> 00:05:24.840
to our stories that get posted. We want

00:05:24.840 --> 00:05:27.545
each story to have a creator name, content,

00:05:27.785 --> 00:05:29.385
and we want both of these fields to

00:05:29.385 --> 00:05:31.705
be type string. So if you remember from

00:05:31.705 --> 00:05:33.545
what Sophie just talked about, the way that

00:05:33.545 --> 00:05:35.625
we can accomplish this is by using schemas

00:05:35.625 --> 00:05:38.585
and mongoose models. So if you go to

00:05:38.585 --> 00:05:41.865
the weblep.is/mongo, you can see both of these,

00:05:42.150 --> 00:05:44.790
which are helpful snippets for creating schemas and

00:05:44.790 --> 00:05:48.150
models. Remember that schemas are to help us

00:05:48.150 --> 00:05:51.110
structure our MongoDB documents, and models are going

00:05:51.110 --> 00:05:52.870
to be constructors that we define from our

00:05:52.870 --> 00:05:55.875
schema to apply it to our collection. So

00:05:55.875 --> 00:05:58.035
let's start by importing mongoose. So if you

00:05:58.035 --> 00:05:59.555
go to the to do step zero, we

00:05:59.555 --> 00:06:03.795
wanna just type this in. So const mongoose

00:06:03.955 --> 00:06:12.850
equals require. And this is just importing in

00:06:12.850 --> 00:06:18.050
our mongoose. Okay. So now let's write a

00:06:18.050 --> 00:06:20.050
model for our stories. So what we're going

00:06:20.050 --> 00:06:21.890
to do is we're going to define a

00:06:21.890 --> 00:06:37.300
new story schema for the database. And then

00:06:37.300 --> 00:06:39.060
we want to add in the two fields

00:06:39.060 --> 00:06:41.700
that we talked about earlier. So creator name,

00:06:43.300 --> 00:06:46.900
which is type string, and also content, which

00:06:46.900 --> 00:06:51.475
is also type string. Raise your hand if

00:06:51.475 --> 00:06:55.315
you need more time with this step. Okay.

00:06:55.315 --> 00:07:05.680
I'll give, like, a couple more seconds. Okay.

00:07:05.680 --> 00:07:07.840
Cool. And then the last step is exporting

00:07:07.840 --> 00:07:09.840
our model. Right? So we're gonna use module

00:07:09.840 --> 00:07:16.160
dot exports. And then we're just gonna pass

00:07:16.160 --> 00:07:33.140
in our story model. So now you guys

00:07:33.140 --> 00:07:35.060
should be all set. You just wrote a

00:07:35.060 --> 00:07:37.860
mongoose model for the story and you exported

00:07:37.860 --> 00:07:40.020
it. So now we basically want to do

00:07:40.020 --> 00:07:41.780
the exact same thing for comments. Right? Because

00:07:41.780 --> 00:07:43.220
remember we had our stories and our comments

00:07:43.220 --> 00:07:46.155
collection. So you wanna repeat everything we just

00:07:46.155 --> 00:07:48.555
did for comments. So open up comment dot

00:07:48.555 --> 00:07:50.395
j s under models, and you can see

00:07:50.395 --> 00:07:52.315
the steps are the exact same. So now

00:07:52.315 --> 00:07:53.835
try to follow the steps that we just

00:07:53.835 --> 00:07:57.995
did, importing Mongoose, creating the schema for comments,

00:07:58.170 --> 00:08:00.570
and then also exporting it using module dot

00:08:00.570 --> 00:08:02.410
exports. I'll give you guys, like, two minutes

00:08:02.410 --> 00:08:03.850
to try it out on your own. And

00:08:03.850 --> 00:08:05.050
feel free to join queue if you have

00:08:05.050 --> 00:08:08.410
any questions or need help. Yeah. As a

00:08:08.410 --> 00:08:10.570
hint, one of the differences with comment is

00:08:10.570 --> 00:08:13.105
just that we need a parent field. So

00:08:13.105 --> 00:08:14.705
this is like one additional field that you

00:08:14.705 --> 00:09:07.020
should add into your schema. Okay. So I'm

00:09:07.020 --> 00:09:09.740
gonna be writing the solution now. So feel

00:09:09.740 --> 00:09:11.020
free like, don't look at it if you

00:09:11.020 --> 00:11:03.775
don't want to see it. Okay. So the

00:11:03.775 --> 00:11:05.535
solution is on the screen now. If you

00:11:05.535 --> 00:11:06.735
wanna take a look and make sure that

00:11:06.735 --> 00:11:09.695
yours matches up with it, everything looks good.

00:11:14.900 --> 00:11:17.460
It's also here on the slides. So just

00:11:17.460 --> 00:11:18.980
make sure that everything looks good. If you

00:11:18.980 --> 00:11:20.420
have any questions, feel free to hop on

00:11:20.420 --> 00:11:24.105
the questions doc or join the queue. Okay.

00:11:24.105 --> 00:11:25.625
So now we're gonna be moving on to

00:11:25.625 --> 00:11:28.185
step one. So here, we're going to be

00:11:28.185 --> 00:11:30.425
linking the back end with our newly implemented

00:11:30.425 --> 00:11:34.585
MongoDB database. Feel free to git reset dash

00:11:34.585 --> 00:11:36.825
dash hard, git checkout w four step one

00:11:36.825 --> 00:11:40.240
to get caught up. And also, in server.js,

00:11:40.240 --> 00:11:42.560
your connection string will probably have disappeared. So

00:11:42.560 --> 00:11:44.240
you're going to need to recopy and paste

00:11:44.240 --> 00:11:47.680
it probably into where we pasted it before.

00:11:47.680 --> 00:11:49.760
So here, like, you're going to probably need

00:11:49.760 --> 00:11:56.635
to put it back. Okay. So you guys

00:11:56.635 --> 00:11:59.915
wanna open up API.js from the server directory.

00:12:01.035 --> 00:12:02.715
And what we're going to do is we're

00:12:02.715 --> 00:12:04.875
going to access the Mongoose models that we

00:12:04.875 --> 00:12:08.930
just created. So within API.JS, you want to

00:12:08.930 --> 00:12:10.370
go to the part where it says to

00:12:10.370 --> 00:12:12.930
do step one, get all the stories from

00:12:12.930 --> 00:12:15.410
the database, and send response back to the

00:12:15.410 --> 00:12:20.345
client. Okay. So what we're gonna do is

00:12:20.345 --> 00:12:22.985
we're going to try to import the story

00:12:22.985 --> 00:12:27.785
model. So here oops. Sorry. This is up

00:12:27.785 --> 00:12:29.385
here. Oops. Yeah. So I should already be

00:12:29.385 --> 00:12:30.825
there. But what we're gonna do is we're

00:12:30.825 --> 00:12:32.980
gonna import the comment model now. So you

00:12:32.980 --> 00:12:35.060
guys can follow the same format that was

00:12:35.060 --> 00:12:36.900
used to import the story model, and you

00:12:36.900 --> 00:12:38.260
just wanna do the exact same thing with

00:12:38.260 --> 00:12:39.860
the comment model that you just wrote. So

00:12:39.860 --> 00:12:41.380
I'll give you guys like one second or

00:12:41.380 --> 00:12:45.220
like a couple seconds to do that. So

00:12:45.220 --> 00:12:47.495
like right here, just wanna import the comment

00:12:47.495 --> 00:13:17.815
model. Okay. Cool. Raise your hand if you

00:13:17.815 --> 00:13:19.335
need more time with that. I think it

00:13:19.335 --> 00:13:21.495
should be pretty chill. Yeah. So you guys

00:13:21.495 --> 00:13:23.175
just wanna follow the exact same format that

00:13:23.175 --> 00:13:26.375
you use for story. Const comment equals require.

00:13:26.375 --> 00:13:28.775
And this is the require function allows us

00:13:28.775 --> 00:13:31.180
to use the models that we just exported

00:13:31.180 --> 00:13:34.940
in the previous step. Okay. So now for

00:13:34.940 --> 00:13:36.620
part two, we are going to try to

00:13:36.620 --> 00:13:40.300
get all the stories via our router.get API

00:13:40.300 --> 00:13:43.425
endpoint. This endpoint will ask the server to

00:13:43.425 --> 00:13:45.105
return all of the stories that we currently

00:13:45.105 --> 00:13:47.585
have saved in the database. Now, how can

00:13:47.585 --> 00:13:49.345
we get all the stories that we have

00:13:49.345 --> 00:13:53.185
saved? Oh, wait. I don't want show this.

00:13:53.505 --> 00:13:55.745
Try to find the relevant code in weblab.

00:13:55.745 --> 00:13:58.790
Is slash by yourselves first, and see if

00:13:58.790 --> 00:14:01.510
you can find what function we would use

00:14:01.510 --> 00:14:02.950
to return all of the stories in the

00:14:02.950 --> 00:15:33.260
database. You guys like one minute. Okay. So

00:15:33.260 --> 00:15:35.020
hopefully, you guys had enough time to try

00:15:35.020 --> 00:15:36.965
to find the relevant code yourself, but here's

00:15:36.965 --> 00:15:41.285
the solution for get stories. So basically, what

00:15:41.285 --> 00:15:43.445
this does is we're using the dot find

00:15:43.445 --> 00:15:46.085
function, and this is going to send a

00:15:46.085 --> 00:15:48.085
mongoose query to find all of the documents

00:15:48.085 --> 00:15:50.120
in our database, and the dot find function

00:15:50.120 --> 00:15:53.080
will return a promise. So we're going to

00:15:53.080 --> 00:15:55.320
use the dot then to handle the asynchronous

00:15:55.320 --> 00:15:58.120
request. And if our query is successful and

00:15:58.120 --> 00:15:59.800
we are able to find documents in our

00:15:59.800 --> 00:16:02.525
database, what's gonna happen is the stories array

00:16:02.525 --> 00:16:05.085
is now going to contain all of the

00:16:05.085 --> 00:16:07.085
matching documents that we just found in our

00:16:07.085 --> 00:16:09.005
database. And then we want to send the

00:16:09.005 --> 00:16:10.605
array of stories to our client, so we're

00:16:10.605 --> 00:16:16.720
going to do res dot send stories. Okay.

00:16:16.720 --> 00:16:20.640
So now let's try implementing post slash story.

00:16:20.640 --> 00:16:22.640
So we're gonna try creating a new story

00:16:22.640 --> 00:16:25.280
document and inputting it into our collection. So

00:16:25.280 --> 00:16:27.520
we're still in API.JS, and now we're under

00:16:27.520 --> 00:16:29.955
the router dot post endpoint. And what we're

00:16:29.955 --> 00:16:31.315
gonna do is we're going to try to

00:16:31.315 --> 00:16:32.995
create a new story document and put it

00:16:32.995 --> 00:16:37.475
into the collection using our model. So where

00:16:37.475 --> 00:16:39.395
do we get the content for posting our

00:16:39.395 --> 00:16:42.275
story? Basically, we have this content parameter that

00:16:42.275 --> 00:16:44.435
we want to access. And in order to

00:16:44.435 --> 00:16:46.610
access that, we can go to new post

00:16:46.610 --> 00:16:48.450
input dot j s x. So you can

00:16:48.450 --> 00:17:05.445
take a look at it under components. So

00:17:05.445 --> 00:17:07.445
here, you should be able to see, like,

00:17:07.445 --> 00:17:10.245
we have this const as story, and the

00:17:10.245 --> 00:17:13.150
const body has content with value. So this

00:17:13.150 --> 00:17:14.510
is the content we're going to try to

00:17:14.510 --> 00:17:18.750
be accessing in our API endpoint. So we

00:17:18.750 --> 00:17:20.990
can use the rec dot body dot content

00:17:20.990 --> 00:17:22.910
to get this content from our new post

00:17:22.910 --> 00:17:25.765
input dot JSX. Let's do a quick recap

00:17:25.765 --> 00:17:28.325
of GET versus POST request first, though. So

00:17:28.325 --> 00:17:30.725
remember that GET requests are what we use

00:17:30.805 --> 00:17:34.085
to request data from our server. And in

00:17:34.085 --> 00:17:36.005
our GET request, we should have our query

00:17:36.005 --> 00:17:39.350
parameters in the URL. And this data is

00:17:39.350 --> 00:17:42.150
also saved in the browser heading. But for

00:17:42.150 --> 00:17:44.390
POST request, this is sending data from the

00:17:44.390 --> 00:17:46.550
server back to the client. And you can

00:17:46.550 --> 00:17:49.030
see here, oops, in the body, we have

00:17:49.030 --> 00:17:50.950
the data that we are sending. And this

00:17:50.950 --> 00:17:52.790
data does not persist and is not stored

00:17:52.790 --> 00:17:56.285
on the browser head. So for get request,

00:17:56.285 --> 00:17:58.205
we want to use rec dot query because

00:17:58.205 --> 00:18:00.045
this is going to contain the query parameters

00:18:00.045 --> 00:18:01.965
of our request. So for example, if we

00:18:01.965 --> 00:18:06.045
have this URL, sample.com, and we're querying for

00:18:06.045 --> 00:18:07.805
this, our rec dot query would contain the

00:18:07.805 --> 00:18:11.310
information Sophie and the value yay. And then

00:18:11.310 --> 00:18:14.110
for post request, we want to use rec.body,

00:18:14.110 --> 00:18:16.350
and this is going to send anything that's

00:18:16.350 --> 00:18:18.990
contained inside the request body. So if we

00:18:18.990 --> 00:18:20.670
send a post, if we want to send

00:18:20.670 --> 00:18:22.755
a post to sample.com with the body of

00:18:22.755 --> 00:18:26.035
Sophie Yeh, rec dot body would contain this

00:18:26.035 --> 00:18:33.715
Sophie Yeh. So yeah. Okay. So now that

00:18:33.715 --> 00:18:35.850
we've reviewed get and post request, how would

00:18:35.850 --> 00:18:38.570
we implement the slash story endpoint if we

00:18:38.570 --> 00:18:40.570
want to create a new story and post

00:18:40.570 --> 00:18:43.850
this? Yeah. So try to find the relevant

00:18:43.850 --> 00:18:46.250
code in weblab. Is slash mongo once more,

00:18:47.525 --> 00:18:51.125
But we're gonna go over it. So, basically,

00:18:51.285 --> 00:18:52.725
what we want to do is first, we're

00:18:52.725 --> 00:19:04.620
going to create a new story object. And

00:19:04.620 --> 00:19:09.420
we're gonna have creator name. And you guys

00:19:09.420 --> 00:19:12.220
probably will need to create a variable, like

00:19:12.220 --> 00:19:13.900
my name or something, and put your own

00:19:13.900 --> 00:19:21.235
name there. And then for content, remember we

00:19:21.235 --> 00:19:23.075
just talked about how we're gonna access the

00:19:23.075 --> 00:19:24.595
content for a post request is we're gonna

00:19:24.595 --> 00:19:26.995
use rec dot body dot content. And the

00:19:26.995 --> 00:19:28.755
content is coming from the new post input

00:19:28.755 --> 00:19:38.610
dot JSX file. And then now that we've

00:19:38.610 --> 00:19:41.010
created that, we want to save our stories.

00:19:41.330 --> 00:20:05.780
So let's do new story dot save. Okay.

00:20:05.780 --> 00:20:07.220
Does anyone need a minute to get caught

00:20:07.220 --> 00:20:11.220
up with that? Okay. Give, like, a couple

00:20:11.220 --> 00:20:42.555
of seconds. Okay. So now we have just

00:20:42.555 --> 00:20:45.355
successfully created a new story document and put

00:20:45.355 --> 00:20:48.635
it into our collection. Let's try test posting

00:20:48.635 --> 00:20:50.875
a story. So in one terminal, you want

00:20:50.875 --> 00:20:53.275
to run npm install and then npm start.

00:20:53.275 --> 00:20:54.980
And then in another terminal, you want to

00:20:54.980 --> 00:20:57.140
do npm run dev, and then we can

00:20:57.140 --> 00:22:14.375
check our local host. Oh. What happened? Is

00:22:14.375 --> 00:22:26.320
it comments? Okay. So now you should be

00:22:26.320 --> 00:22:28.240
able to test post a story and see

00:22:28.240 --> 00:22:32.080
it on the feed page. Does anyone need

00:22:32.080 --> 00:22:38.805
more time with this? Okay. Cool. Okay. So

00:22:38.805 --> 00:22:40.405
now for step two, we're gonna do the

00:22:40.405 --> 00:22:42.405
thing the exact same thing we just did,

00:22:42.405 --> 00:22:44.405
except we're gonna repeat it for comments. So

00:22:44.405 --> 00:22:46.325
we're just linking our comments back end with

00:22:46.325 --> 00:22:49.125
MongoDB. So if you wanna get caught up,

00:22:49.125 --> 00:22:50.725
you can get check out w four step

00:22:50.725 --> 00:22:52.520
two, and then make sure to recopy and

00:22:52.520 --> 00:22:54.680
paste your connection string if it disappeared in

00:22:54.680 --> 00:22:59.480
server dot j s. Okay. So remember that

00:22:59.480 --> 00:23:01.720
in the get request, we included the parent

00:23:01.720 --> 00:23:03.960
stories ID prop when we made the get

00:23:03.960 --> 00:23:21.930
request from the front end. And k. Hopefully,

00:23:21.930 --> 00:23:23.930
everyone is caught up. But if you remember

00:23:23.930 --> 00:23:26.570
in our get request, we included the parent

00:23:26.570 --> 00:23:29.530
stories ID prop. So we want to access

00:23:29.530 --> 00:23:31.610
this ID prop from the back end. And

00:23:31.610 --> 00:23:34.345
so you guys can try and think for

00:23:34.345 --> 00:23:36.025
yourselves for, like, a second about how we

00:23:36.025 --> 00:23:37.625
would do this. And as a hint, we're

00:23:37.625 --> 00:23:44.825
going to use the rec again. Okay. So

00:23:44.825 --> 00:23:47.145
this time, we're going to be using rec.query.parent,

00:23:47.145 --> 00:23:49.720
right, because we are trying to access the

00:23:50.280 --> 00:23:55.880
ID prop from the parent field. Okay. So

00:23:55.880 --> 00:23:58.360
now it's your turn. So try to implement

00:23:58.360 --> 00:24:02.285
get, the get endpoint in API dot j

00:24:02.285 --> 00:24:04.605
s. So if you go to step two,

00:24:04.685 --> 00:24:07.245
you should see router dot get slash comment.

00:24:07.245 --> 00:24:08.925
And what you want to do is do

00:24:08.925 --> 00:24:10.205
the to do step two, where you want

00:24:10.205 --> 00:24:14.460
to input the parent parameter. Basically, we're trying

00:24:14.460 --> 00:24:16.620
to find the comments that match the parent

00:24:16.620 --> 00:24:18.940
parameter. So I'll give you guys some time

00:24:18.940 --> 00:24:58.555
to try that out for yourselves. Okay. Raise

00:24:58.555 --> 00:24:59.915
your hand if you'd like a little more

00:24:59.915 --> 00:25:57.760
time to try this out. Okay. Okay. So

00:25:57.760 --> 00:25:59.840
just to kinda, like, recap and clarify where

00:25:59.840 --> 00:26:01.680
we are at, what we just did is

00:26:01.680 --> 00:26:04.240
we hooked up our back end to MongoDB

00:26:04.240 --> 00:26:07.600
for the stories model. Right? We modified our

00:26:07.600 --> 00:26:09.760
router dot get and router dot post endpoints

00:26:09.760 --> 00:26:12.195
for the story to find all of the

00:26:12.195 --> 00:26:14.675
stories in our database and then send an

00:26:14.675 --> 00:26:17.875
array of stories back to the front end.

00:26:18.675 --> 00:26:20.595
And then for post, we created a new

00:26:20.595 --> 00:26:23.155
story document, input it into our collection, and

00:26:23.155 --> 00:26:25.260
then we wanted to save that within our

00:26:25.260 --> 00:26:27.900
database. We're doing the exact same thing for

00:26:27.900 --> 00:26:31.420
comments now, except this time with comments, we

00:26:31.420 --> 00:26:33.820
want to only return the documents in our

00:26:33.820 --> 00:26:37.740
database that match the parent story. So we're

00:26:37.740 --> 00:26:40.060
not gonna have an empty query parameter like

00:26:40.060 --> 00:26:42.455
we did for stories. For story.find, it was

00:26:42.455 --> 00:26:44.935
just empty. Right? For comments, we want to

00:26:44.935 --> 00:26:46.935
put something into our query parameters, so we're

00:26:46.935 --> 00:26:49.415
only returning the comments that match their parent's

00:26:49.415 --> 00:26:51.975
story. So what we wanna do is we're

00:26:51.975 --> 00:26:55.200
just gonna put parent. And we're gonna use

00:26:55.200 --> 00:26:58.800
rec dot query dot parent. Because if you

00:26:58.800 --> 00:27:03.360
remember, this is for get requests. Right? So

00:27:03.360 --> 00:27:05.440
now it's only going to find the comments

00:27:05.440 --> 00:27:07.695
in our database that match this rec dot

00:27:07.695 --> 00:27:15.135
query dot parent parameter. Give everyone a minute

00:27:15.135 --> 00:27:27.330
to copy that down. Okay. Now it's your

00:27:27.330 --> 00:27:29.890
turn. So you're going to oh, wait. Sorry.

00:27:29.890 --> 00:27:33.010
This is yeah. But here's the solution also

00:27:33.010 --> 00:27:45.835
if you need it. Okay. So now we're

00:27:45.835 --> 00:27:47.675
going to try and do the exact same

00:27:47.675 --> 00:27:49.450
thing we did for comments that we did

00:27:49.450 --> 00:27:51.450
for stories, where we want to edit the

00:27:51.450 --> 00:27:53.370
router dot post and point as well for

00:27:53.370 --> 00:27:56.410
comments. Basically, we're going to create a new

00:27:56.410 --> 00:27:58.170
comment document and put it into the collection

00:27:58.170 --> 00:28:00.810
just like we did before. So you can

00:28:00.810 --> 00:28:03.450
use the story, what we just wrote for

00:28:03.450 --> 00:28:06.205
story to as a reference for what we're

00:28:06.205 --> 00:28:08.845
going to try to do with comment. So

00:28:08.845 --> 00:28:11.245
remember that we're getting the content from new

00:28:11.245 --> 00:28:15.405
put new post input .j s x. And

00:28:15.405 --> 00:28:17.165
now we just wanna save a new comment

00:28:17.165 --> 00:28:19.350
into our database, but we want it to

00:28:19.350 --> 00:28:22.150
contain the parent and the content from the

00:28:22.150 --> 00:28:24.870
request. So you're going to need to modify

00:28:24.870 --> 00:28:27.110
the story endpoint a little bit, or modify

00:28:27.110 --> 00:28:28.470
what we did in the story endpoint a

00:28:28.470 --> 00:28:33.405
little bit. But check out weblab.is/mongo if you

00:28:33.405 --> 00:28:42.845
need help. And I'll be putting the solution

00:28:42.845 --> 00:28:45.245
on the screen, but feel free to not

00:28:45.245 --> 00:28:46.525
look at it and try it for yourself

00:28:46.525 --> 00:29:53.730
first. Okay. So hopefully, guys, we're able to

00:29:53.730 --> 00:29:57.615
try creating a new comment document. So we

00:29:57.615 --> 00:29:59.535
just followed the exact same format that we

00:29:59.535 --> 00:30:03.615
did for the new story new story document,

00:30:03.615 --> 00:30:05.855
except this time, we have an extra field.

00:30:05.855 --> 00:30:08.175
Right? We have the parent field where we're

00:30:08.175 --> 00:30:10.255
gonna do rec dot body dot parent. Because

00:30:10.255 --> 00:30:11.695
remember, this is a post request. We wanna

00:30:11.695 --> 00:30:14.520
use rec dot body, and we're accessing the

00:30:14.680 --> 00:30:16.680
information, which is the ID that was passed

00:30:16.680 --> 00:30:19.160
as a prop to the parent parameter. And

00:30:19.160 --> 00:30:20.440
the rest is the same. So you have

00:30:20.440 --> 00:30:23.320
content rec dot body dot content. And so

00:30:23.320 --> 00:30:25.560
this is creating a new comment document, but

00:30:25.560 --> 00:30:27.435
now we want to insert that into our

00:30:27.435 --> 00:30:29.275
collection. So we're gonna do new comment dot

00:30:29.275 --> 00:30:40.540
save. And then dot then, right, because remember

00:30:40.540 --> 00:30:50.060
the save will also return a promise. And

00:30:50.060 --> 00:30:54.300
then res dot send will send our comments

00:30:54.300 --> 00:31:06.455
array to our collection. Cool. So now we

00:31:06.455 --> 00:31:09.335
have just successfully created a new comment document

00:31:09.335 --> 00:31:12.220
and saved it to our comments collection. So

00:31:12.220 --> 00:31:15.820
here's the solution. Feel free to copy that

00:31:15.820 --> 00:31:41.370
down to make sure you're caught up. If

00:31:41.370 --> 00:31:42.970
you could put on your finger oh, I

00:31:42.970 --> 00:31:51.495
think there's a question. Yes. Oh, sorry. This

00:31:51.495 --> 00:31:53.095
this is common. That's my bad. Yeah. It

00:31:53.095 --> 00:31:56.055
should be common. I'm sorry. Yes. It is

00:31:56.055 --> 00:32:03.095
common. Good catch. Thank you. Yeah. Could people

00:32:03.095 --> 00:32:04.775
show on their fingers, like, how many more

00:32:04.775 --> 00:32:09.870
minutes they think they need? Two? Okay. Two

00:32:10.350 --> 00:32:20.315
minutes. Oh, okay. Cool. Then let's So now

00:32:20.315 --> 00:32:22.155
we're going to try test posting a comment.

00:32:22.155 --> 00:32:23.835
So you just wanna do the same thing

00:32:23.835 --> 00:32:26.155
we did before, right, and go to your

00:32:26.635 --> 00:32:28.395
local host. And now you should be able

00:32:28.395 --> 00:32:31.115
to post a comment, and it should you

00:32:31.115 --> 00:32:33.460
should see the comment as well. So I'll

00:32:33.460 --> 00:32:35.140
give people some time to play around with

00:32:35.140 --> 00:32:38.980
it. Yeah. And just make sure that everything

00:32:38.980 --> 00:33:03.940
is working good. Okay. Hopefully, you guys got

00:33:03.940 --> 00:33:07.220
to try out test posting comments. But now,

00:33:07.220 --> 00:33:09.300
we are basically done. So you just wanna

00:33:09.300 --> 00:33:11.460
git reset dash dash hard, git checkout w

00:33:11.460 --> 00:33:13.540
four complete for any of the code snippets

00:33:13.540 --> 00:33:16.365
that you might have missed. And what we

00:33:16.365 --> 00:33:18.285
can do is we can actually navigate to

00:33:18.285 --> 00:33:22.685
our MongoDB. And basically, inside of your database

00:33:22.685 --> 00:33:24.685
that you created, you should be able to

00:33:24.685 --> 00:33:28.670
see the comments and the stories. So if

00:33:28.670 --> 00:33:30.990
we go to collections, and then we look

00:33:30.990 --> 00:33:33.550
at the comments collection, notice these are all

00:33:33.550 --> 00:33:35.550
of the comments that I just test posted.

00:33:35.790 --> 00:33:37.790
Right? So it has the content, it has

00:33:37.790 --> 00:33:41.230
the parent parameter with the type string, which

00:33:41.230 --> 00:33:45.895
represents the parent ID. And then if we

00:33:45.895 --> 00:33:47.975
go to the stories collection, we can see

00:33:47.975 --> 00:33:49.495
the story that I just posted. It has

00:33:49.495 --> 00:33:51.495
a creator name, and it has content. So

00:33:51.495 --> 00:33:52.775
you guys should be able to navigate to

00:33:52.775 --> 00:33:55.175
your own MongoDB and go to the cluster

00:33:55.175 --> 00:33:57.200
for the for the database that you created

00:33:57.200 --> 00:33:58.640
and be able to see all these collections

00:33:58.640 --> 00:34:00.400
of stories and comments that you just test

00:34:00.400 --> 00:34:02.640
posted. So it's pretty cool, and this is

00:34:02.640 --> 00:34:04.720
a good way to, like, debug in your

00:34:04.720 --> 00:34:06.800
own application because you can make sure that

00:34:06.800 --> 00:34:09.120
the information is being sent to the database

00:34:09.120 --> 00:34:10.945
and being stored there accordingly. So if you

00:34:10.945 --> 00:34:14.545
don't see your like, the documents populating the

00:34:14.545 --> 00:34:16.865
collection, that means that something is wrong with

00:34:16.865 --> 00:34:20.785
sending the information to your database. Okay. So

00:34:20.785 --> 00:34:23.105
just to recap what we accomplished today, we

00:34:23.105 --> 00:34:25.560
learned how to understand database structure, schemas, and

00:34:25.560 --> 00:34:28.360
models, and we're also able to hook our

00:34:28.360 --> 00:34:32.120
MongoDB instances to our app. We interacted with

00:34:32.120 --> 00:34:34.440
our database using our API endpoints, and then

00:34:34.440 --> 00:34:37.240
we're able to use those endpoints to also

00:34:37.240 --> 00:34:39.640
display the information from our database on our

00:34:39.640 --> 00:34:43.825
front end. That's it. Okay. So if you

00:34:43.825 --> 00:34:46.465
want more readings or documentation, feel free to

00:34:46.465 --> 00:34:48.625
check out these links on the slides for

00:34:48.625 --> 00:34:52.225
today's lecture, and fill out weblab.is/ feedback to

00:34:52.225 --> 00:34:54.145
give me and Sophie feedback. We would very

00:34:54.145 --> 00:34:57.870
much appreciate. Yeah. We'll take one to two

00:34:57.870 --> 00:35:00.350
minutes to do that. And then once you're

00:35:00.350 --> 00:35:02.430
done filling out the feedback form, feel free

00:35:02.430 --> 00:35:04.830
to come down to the stage because we're

00:35:04.830 --> 00:35:06.830
gonna do a limbo challenge for a bio

00:35:06.830 --> 00:35:07.470
break today.
