// assets/js/lesson_player.js
var player;
var allParagraphsData = [];
var autoScrollTranscriptEnabled = true;

var currentActiveTimelineItem = null;
var currentActiveParagraphText = null;
var currentActiveSentence = null;

var mainContentAreaEl, transcriptContentEl, timelineContainerEl;
var paragraphObserver, videoTimeUpdaterInterval;

// YouTube IFrame API loader
var tag = document.createElement('script');
tag.src = "https://www.youtube.com/iframe_api";
var firstScriptTag = document.getElementsByTagName('script')[0];
if (firstScriptTag) {
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
} else {
    document.head.appendChild(tag);
}

function onYouTubeIframeAPIReady() {
    if (typeof window.YT_VIDEO_ID === 'undefined') {
        console.error("YT_VIDEO_ID not found on window object.");
        const playerDiv = document.getElementById('youtube-player-iframe');
        if(playerDiv) playerDiv.innerHTML = "<p style='color:red; padding:20px; text-align:center;'>Error: Video ID missing.</p>";
        return;
    }
    player = new YT.Player('youtube-player-iframe', {
        videoId: window.YT_VIDEO_ID,
        playerVars: { 'playsinline': 1, 'rel': 0, 'modestbranding': 1, 'origin': window.location.origin },
        events: { 'onReady': onPlayerReady, 'onStateChange': onPlayerStateChange }
    });
}

function onPlayerReady(event) {
    mainContentAreaEl = document.getElementById('mainContentArea'); // Main scrollable area
    transcriptContentEl = document.getElementById('transcript-content-container');
    timelineContainerEl = document.getElementById('timeline-container'); 
    
    const transcriptDataElem = document.getElementById('allTranscriptData');
    if (transcriptDataElem && transcriptDataElem.textContent) {
        try { allParagraphsData = JSON.parse(transcriptDataElem.textContent); }
        catch (e) { console.error("Parse allTranscriptData failed:", e); if(transcriptContentEl) transcriptContentEl.innerHTML = "<p class='no-transcript-message'>Error loading transcript.</p>"; return; }
    }
    if (allParagraphsData.length === 0 && transcriptContentEl && transcriptContentEl.querySelector('.no-transcript-message')) {/*Msg generated by Python*/}

    setupClickHandlers();
    setupScrollAndVideoSync();

    const autoScrollCheckbox = document.getElementById('autoScrollTranscriptCheckbox');
    if (autoScrollCheckbox) {
        autoScrollTranscriptEnabled = autoScrollCheckbox.checked;
        autoScrollCheckbox.addEventListener('change', function() { autoScrollTranscriptEnabled = this.checked; });
    }

    const minimalVideoToggle = document.getElementById('minimalVideoToggle');
    if (minimalVideoToggle) {
        if (localStorage.getItem('videoMinimalMode') === 'true') {
            document.body.classList.add('video-minimal-mode');
            minimalVideoToggle.checked = true;
        }
        minimalVideoToggle.addEventListener('change', function() {
            if (this.checked) {
                document.body.classList.add('video-minimal-mode');
                localStorage.setItem('videoMinimalMode', 'true');
            } else {
                document.body.classList.remove('video-minimal-mode');
                localStorage.setItem('videoMinimalMode', 'false');
            }
        });
    }
}

function setupClickHandlers() {
    document.querySelectorAll('.timeline-item').forEach(item => {
        item.addEventListener('click', () => {
            const startTime = parseFloat(item.dataset.startTime);
            const targetTranscriptId = item.dataset.targetTranscriptId;
            const targetTranscriptElement = document.getElementById(targetTranscriptId);
            
            if (targetTranscriptElement && mainContentAreaEl) {
                let scrollTargetY = targetTranscriptElement.offsetTop - mainContentAreaEl.offsetTop - (mainContentAreaEl.clientHeight * 0.1); // Aim for top 10%
                mainContentAreaEl.scrollTo({ top: Math.max(0, scrollTargetY), behavior: "smooth" });
            }
            if (player && player.seekTo) { player.seekTo(startTime, true); if (player.getPlayerState() !== 1) player.playVideo(); }
        });
    });
    document.querySelectorAll('.transcript-sentence').forEach(sentEl => {
        sentEl.addEventListener('click', () => {
            const startTime = parseFloat(sentEl.dataset.startTime);
            if (player && player.seekTo) { player.seekTo(startTime, true); if (player.getPlayerState() !== 1) player.playVideo(); }
        });
    });
}

function setupScrollAndVideoSync() {
    // Observer for when user scrolls transcript manually (video paused)
    if (mainContentAreaEl && typeof IntersectionObserver !== 'undefined') {
        const observerOptions = {
            root: mainContentAreaEl, 
            rootMargin: "-20% 0px -70% 0px", // Try to detect element near the top of the viewport
            threshold: 0.01 
        };
        paragraphObserver = new IntersectionObserver((entries) => {
            if (player && player.getPlayerState() === YT.PlayerState.PLAYING && autoScrollTranscriptEnabled) return; // Don't fight with video-driven scroll

            let topmostEntry = null;
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    if (!topmostEntry || entry.boundingClientRect.top < topmostEntry.boundingClientRect.top) {
                        topmostEntry = entry;
                    }
                }
            });
            if (topmostEntry) {
                const paragraphIdx = topmostEntry.target.dataset.paragraphIdx;
                updateActiveStates(parseInt(paragraphIdx), null, false); // scrollMainContent = false
            }
        }, observerOptions);
        document.querySelectorAll('.transcript-paragraph-text').forEach(p => paragraphObserver.observe(p));
    }
    startVideoTimeUpdater(); // Start it initially
}
        
function onPlayerStateChange(event) { 
    if (event.data === YT.PlayerState.PLAYING) startVideoTimeUpdater(); 
    else stopVideoTimeUpdater(); 
}
function startVideoTimeUpdater() { if (videoTimeUpdaterInterval) clearInterval(videoTimeUpdaterInterval); videoTimeUpdaterInterval = setInterval(updateHighlightsAndScrollsBasedOnVideoTime, 200); } // Slightly longer interval
function stopVideoTimeUpdater() { clearInterval(videoTimeUpdaterInterval); }

function updateActiveStates(activeParagraphIndex, activeSentenceId, scrollMainContentIfNeeded) {
    // Update Timeline Item
    const targetTimelineItem = document.querySelector(`.timeline-item[data-paragraph-idx='${activeParagraphIndex}']`);
    if (currentActiveTimelineItem !== targetTimelineItem) {
        if (currentActiveTimelineItem) currentActiveTimelineItem.classList.remove('active');
        if (targetTimelineItem) targetTimelineItem.classList.add('active');
        currentActiveTimelineItem = targetTimelineItem;
    }

    // Update Paragraph Text
    const targetParagraphText = document.querySelector(`.transcript-paragraph-text[data-paragraph-idx='${activeParagraphIndex}']`);
    if (currentActiveParagraphText !== targetParagraphText) {
        if (currentActiveParagraphText) currentActiveParagraphText.classList.remove('highlighted-paragraph');
        if (targetParagraphText) {
            targetParagraphText.classList.add('highlighted-paragraph');
            if (scrollMainContentIfNeeded && autoScrollTranscriptEnabled && mainContentAreaEl) {
                 let scrollTargetY = targetParagraphText.offsetTop - mainContentAreaEl.offsetTop - (mainContentAreaEl.clientHeight * 0.1);
                 mainContentAreaEl.scrollTo({ top: Math.max(0, scrollTargetY), behavior: "smooth" });
            }
        }
        currentActiveParagraphText = targetParagraphText;
    }

    // Update Sentence
    const sentenceEl = activeSentenceId ? document.getElementById(activeSentenceId) : null;
    if (currentActiveSentence !== sentenceEl) {
        if (currentActiveSentence) currentActiveSentence.classList.remove('highlighted-sentence');
        if (sentenceEl) {
            sentenceEl.classList.add('highlighted-sentence');
            if (scrollMainContentIfNeeded && autoScrollTranscriptEnabled && mainContentAreaEl && targetParagraphText && targetParagraphText.classList.contains('highlighted-paragraph')) {
                const sR = sentenceEl.getBoundingClientRect(), cR_main = mainContentAreaEl.getBoundingClientRect();
                // Check if sentence is fully visible within the main content area
                if(sR.top < cR_main.top + 20 || sR.bottom > cR_main.bottom - 20 ) {
                    let sentScrollOffset = sentenceEl.offsetTop - mainContentAreaEl.offsetTop - (mainContentAreaEl.clientHeight / 2) + (sentenceEl.clientHeight / 2) ;
                    mainContentAreaEl.scrollTo({ top: Math.max(0, sentScrollOffset), behavior: "smooth" });
                }
            }
        }
        currentActiveSentence = sentenceEl;
    }
}


function updateHighlightsAndScrollsBasedOnVideoTime() {
    if (!player || typeof player.getCurrentTime !== 'function' || allParagraphsData.length === 0) return;
    const currentTime = player.getCurrentTime();
    let activeParagraphData = null, activeSentenceData = null;

    for (const para of allParagraphsData) { if (currentTime >= para.start && currentTime < para.end) { activeParagraphData = para; break; } }
    if (!activeParagraphData) { for (let i = allParagraphsData.length - 1; i >= 0; i--) { if (currentTime >= allParagraphsData[i].start) { activeParagraphData = allParagraphsData[i]; break; } } }
    
    if (activeParagraphData) {
        if (currentActiveParagraphText && currentActiveParagraphText.id !== `text-${activeParagraphData.id}`) {
            // Only scroll if the active PARAGRAPH changes due to video time
            updateActiveStates(activeParagraphData.paragraph_idx, null, autoScrollTranscriptEnabled);
        } else if (!currentActiveParagraphText) {
            updateActiveStates(activeParagraphData.paragraph_idx, null, autoScrollTranscriptEnabled);
        } else {
            // Paragraph is the same, just update sentence if needed, no main scroll
            updateActiveStates(activeParagraphData.paragraph_idx, null, false);
        }


        for (const sent of activeParagraphData.sentences) { if (currentTime >= sent.start && currentTime < sent.end) { activeSentenceData = sent; break; } }
        if (!activeSentenceData) { for (let i = activeParagraphData.sentences.length - 1; i >= 0; i--) { if (currentTime >= activeParagraphData.sentences[i].start) { activeSentenceData = activeParagraphData.sentences[i]; break; } } }
        
        updateActiveStates(activeParagraphData.paragraph_idx, activeSentenceData ? activeSentenceData.id : null, false); // scrollMainContent is false for sentence update here

    } else { // No active paragraph (e.g., video hasn't started or is past all transcripted content)
        if (currentActiveTimelineItem) currentActiveTimelineItem.classList.remove('active');
        if (currentActiveParagraphText) currentActiveParagraphText.classList.remove('highlighted-paragraph');
        if (currentActiveSentence) currentActiveSentence.classList.remove('highlighted-sentence');
        currentActiveTimelineItem = null; currentActiveParagraphText = null; currentActiveSentence = null;
    }
}
// Note: scrollToViewIfNeeded is not needed as a separate general helper if incorporated into updateActiveStates
