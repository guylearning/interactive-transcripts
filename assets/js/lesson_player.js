// assets/js/lesson_player.js
var player;
var allParagraphsData = []; // This will be populated from the embedded JSON
var autoScrollTranscriptEnabled = true;

var currentActiveTimelineItem = null;
var currentActiveParagraphText = null;
var currentActiveSentence = null;

var transcriptContentEl, timelineContainerEl;
var paragraphObserver, videoTimeUpdaterInterval;

// YouTube IFrame API loader
var tag = document.createElement('script'); 
tag.src = "https://www.youtube.com/iframe_api";
var firstScriptTag = document.getElementsByTagName('script')[0];
if (firstScriptTag) { 
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag); 
} else { 
    document.head.appendChild(tag); 
}

function onYouTubeIframeAPIReady() {
    if (typeof window.YT_VIDEO_ID === 'undefined') {
        console.error("YouTube Video ID (window.YT_VIDEO_ID) is not defined.");
        // Display error message to the user on the page
        const videoContainer = document.getElementById('youtube-player-iframe');
        if (videoContainer) {
            videoContainer.innerHTML = "<p style='color:red; text-align:center; padding-top:20px;'>Error: Video ID not provided. Player cannot load.</p>";
        }
        return;
    }
    player = new YT.Player('youtube-player-iframe', {
        videoId: window.YT_VIDEO_ID, // Use the global variable
        playerVars: { 
            'playsinline': 1, 
            'rel': 0, 
            'modestbranding': 1,
            'origin': window.location.origin // Important for some embed scenarios
        },
        events: { 
            'onReady': onPlayerReady, 
            'onStateChange': onPlayerStateChange 
        }
    });
}

function onPlayerReady(event) {
    console.log("YouTube Player is ready.");
    transcriptContentEl = document.getElementById('transcript-content-container');
    timelineContainerEl = document.getElementById('timeline-container');
    
    const transcriptDataElem = document.getElementById('allTranscriptData');
    if (transcriptDataElem && transcriptDataElem.textContent) {
        try { 
            allParagraphsData = JSON.parse(transcriptDataElem.textContent); 
        } catch (e) { 
            console.error("Failed to parse allTranscriptData:", e); 
            if(transcriptContentEl) transcriptContentEl.innerHTML = "<p class='no-transcript-message'>Error loading transcript data.</p>"; 
            return; 
        }
    }
    
    if (allParagraphsData.length === 0 && transcriptContentEl) {
        const existingMsg = transcriptContentEl.querySelector('.no-transcript-message');
        if (existingMsg) {
             // Message already generated by Python if array was empty initially
        } else {
            transcriptContentEl.innerHTML = "<p class='no-transcript-message'>No transcript data found.</p>";
        }
    }

    setupClickHandlers();
    setupScrollSyncObserver(); // For syncing timeline when transcript is scrolled while video paused
    
    const autoScrollCheckbox = document.getElementById('autoScrollTranscriptCheckbox');
    if (autoScrollCheckbox) {
        autoScrollTranscriptEnabled = autoScrollCheckbox.checked; // Initial state
        autoScrollCheckbox.addEventListener('change', function() { 
            autoScrollTranscriptEnabled = this.checked; 
        });
    }
}

function setupClickHandlers() {
    document.querySelectorAll('.timeline-item').forEach(item => {
        item.addEventListener('click', () => {
            const startTime = parseFloat(item.dataset.startTime);
            const targetId = item.dataset.scrollTarget;
            const targetElement = document.querySelector(targetId);
            
            if (targetElement && transcriptContentEl) {
                // Scroll transcript first, then seek, to avoid conflicting scroll/highlight updates
                targetElement.scrollIntoView({behavior:"smooth",block:"start"});
            }
            
            if (player && typeof player.seekTo === 'function') { 
                player.seekTo(startTime, true); 
                if (player.getPlayerState() !== YT.PlayerState.PLAYING) { // YT.PlayerState.PLAYING is 1
                    player.playVideo(); 
                }
            }
        });
    });

    document.querySelectorAll('.transcript-sentence').forEach(sentEl => {
        sentEl.addEventListener('click', () => {
            const startTime = parseFloat(sentEl.dataset.startTime);
            if (player && typeof player.seekTo === 'function') { 
                player.seekTo(startTime, true); 
                if (player.getPlayerState() !== YT.PlayerState.PLAYING) {
                    player.playVideo(); 
                }
            }
        });
    });
}

function setupScrollSyncObserver() {
    if (!transcriptContentEl || typeof IntersectionObserver === 'undefined') return;
    // Observes which paragraph is roughly in the middle of the transcript container's viewport
    const options = { 
        root: transcriptContentEl, 
        rootMargin: "-45% 0px -45% 0px", // Activates when element is in the middle 10% of the container viewport
        threshold: 0.01 // Trigger if even a small part is visible within this margin
    }; 
    paragraphObserver = new IntersectionObserver((entries) => {
        // Only update timeline based on scroll if video is NOT playing
        if (player && player.getPlayerState() === YT.PlayerState.PLAYING) return; 
        
        let latestIntersectingEntry = null;
        entries.forEach(entry => { 
            if(entry.isIntersecting) { 
                // Find the topmost visible entry within the rootMargin
                if(!latestIntersectingEntry || entry.boundingClientRect.top < latestIntersectingEntry.boundingClientRect.top) {
                    latestIntersectingEntry = entry;
                }
            } 
        });
        if(latestIntersectingEntry) { 
            const paragraphIdx = latestIntersectingEntry.target.dataset.paragraphIdx;
            highlightTimelineItemByParaIdx(paragraphIdx, false); // scrollTimelineIfNeeded = false
        }
    }, options);
    document.querySelectorAll('.transcript-paragraph-text').forEach(p => paragraphObserver.observe(p));
}
        
function onPlayerStateChange(event) { 
    if (event.data === YT.PlayerState.PLAYING) startVideoTimeUpdater(); 
    else stopVideoTimeUpdater(); 
}

function startVideoTimeUpdater() { 
    if (videoTimeUpdaterInterval) clearInterval(videoTimeUpdaterInterval); 
    videoTimeUpdaterInterval = setInterval(updateHighlightsAndScrolls, 150); 
}
function stopVideoTimeUpdater() { 
    clearInterval(videoTimeUpdaterInterval); 
}

function highlightTimelineItemByParaIdx(paragraphIdx, scrollTimelineIfNeeded) {
    const targetTimelineItem = document.querySelector(`.timeline-item[data-paragraph-idx='${paragraphIdx}']`);
    if (currentActiveTimelineItem !== targetTimelineItem) {
        if (currentActiveTimelineItem) currentActiveTimelineItem.classList.remove('active');
        if (targetTimelineItem) { 
            targetTimelineItem.classList.add('active'); 
            if (scrollTimelineIfNeeded && timelineContainerEl) scrollToViewIfNeeded(targetTimelineItem, timelineContainerEl, 'center'); 
        }
        currentActiveTimelineItem = targetTimelineItem;
    }
}

function updateHighlightsAndScrolls() {
    if (!player || typeof player.getCurrentTime !== 'function' || allParagraphsData.length === 0) return;
    const currentTime = player.getCurrentTime();
    let activeParagraph = null, activeSentence = null;

    // Find active paragraph based on video time
    for (const para of allParagraphsData) { 
        if (currentTime >= para.start && currentTime < para.end) { activeParagraph = para; break; } 
    }
    if (!activeParagraph) { // If between paragraphs or after the last one
        for (let i = allParagraphsData.length - 1; i >= 0; i--) { 
            if (currentTime >= allParagraphsData[i].start) { activeParagraph = allParagraphsData[i]; break; } 
        } 
    }
    
    if (activeParagraph) {
        highlightTimelineItemByParaIdx(activeParagraph.paragraph_idx, autoScrollTranscriptEnabled); // Link autoScrollTranscriptEnabled to timeline scroll

        const paragraphTextEl = document.getElementById(`text-${activeParagraph.id}`);
        if (currentActiveParagraphText !== paragraphTextEl) {
            if (currentActiveParagraphText) currentActiveParagraphText.classList.remove('highlighted-paragraph');
            if (paragraphTextEl) { 
                paragraphTextEl.classList.add('highlighted-paragraph'); 
                if (autoScrollTranscriptEnabled && transcriptContentEl) scrollToViewIfNeeded(paragraphTextEl, transcriptContentEl, 'start', 20); 
            }
            currentActiveParagraphText = paragraphTextEl;
        }

        if (paragraphTextEl) { // Find active sentence within the active paragraph
            for (const sent of activeParagraph.sentences) { 
                if (currentTime >= sent.start && currentTime < sent.end) { activeSentence = sent; break; } 
            }
            if (!activeSentence) { // If between sentences or after the last one in this paragraph
                 for (let i = activeParagraph.sentences.length - 1; i >= 0; i--) { 
                    if (currentTime >= activeParagraph.sentences[i].start) { activeSentence = activeParagraph.sentences[i]; break; } 
                }
            }
            
            const sentenceEl = activeSentence ? document.getElementById(activeSentence.id) : null;
            if (currentActiveSentence !== sentenceEl) {
                if (currentActiveSentence) currentActiveSentence.classList.remove('highlighted-sentence');
                if (sentenceEl) { 
                    sentenceEl.classList.add('highlighted-sentence'); 
                    if (autoScrollTranscriptEnabled && transcriptContentEl && paragraphTextEl.classList.contains('highlighted-paragraph')) { 
                        const sR = sentenceEl.getBoundingClientRect(), cR = transcriptContentEl.getBoundingClientRect(); 
                        if(sR.top < cR.top || sR.bottom > cR.bottom) scrollToViewIfNeeded(sentenceEl, transcriptContentEl, 'center'); 
                    } 
                }
                currentActiveSentence = sentenceEl;
            }
        }
    } else { // No active paragraph (e.g., video hasn't started or is past all transcripted content)
        if (currentActiveTimelineItem) currentActiveTimelineItem.classList.remove('active');
        if (currentActiveParagraphText) currentActiveParagraphText.classList.remove('highlighted-paragraph');
        if (currentActiveSentence) currentActiveSentence.classList.remove('highlighted-sentence');
        currentActiveTimelineItem = null; currentActiveParagraphText = null; currentActiveSentence = null;
    }
}

function scrollToViewIfNeeded(element, container, blockPosition = 'nearest', offset = 0) {
    if (!element || !container) return;
    const elemRect = element.getBoundingClientRect();
    const containerRect = container.getBoundingClientRect();
    const isOutOfView = elemRect.top < containerRect.top + offset || elemRect.bottom > containerRect.bottom - offset;
    if (isOutOfView) element.scrollIntoView({ behavior: 'smooth', block: blockPosition });
}
