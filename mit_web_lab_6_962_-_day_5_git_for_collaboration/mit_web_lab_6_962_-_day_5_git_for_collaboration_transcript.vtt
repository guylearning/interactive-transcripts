WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 89107769-6abb-492f-a3ef-925ce1ce6060
Created: 2025-05-15T20:43:43.955Z
Duration: 1475.2653
Channels: 1

00:00:00.320 --> 00:00:05.040
No. Why does it not work? There we

00:00:05.040 --> 00:00:08.400
go. Okay. So the reason why we're taking

00:00:08.400 --> 00:00:11.040
a break from our usual web development, React,

00:00:11.040 --> 00:00:14.315
etcetera, content is because you guys might be

00:00:14.315 --> 00:00:16.555
starting your project soon. The skeleton is released.

00:00:16.555 --> 00:00:18.715
There's nothing stopping you guys from continuing to

00:00:18.715 --> 00:00:20.395
work, although there are a few things related

00:00:20.395 --> 00:00:21.835
to Auth in the skeleton that we haven't

00:00:21.835 --> 00:00:24.155
covered yet. We'll cover that on Monday. But

00:00:24.155 --> 00:00:25.675
just in case you guys are starting to

00:00:25.675 --> 00:00:28.910
code, we want to give you a brief

00:00:28.910 --> 00:00:31.230
rundown on how to use git when you're

00:00:31.230 --> 00:00:33.150
collaborating with your team on your project, because

00:00:33.150 --> 00:00:35.150
this is going to be very important. I'm

00:00:35.150 --> 00:00:36.990
going to speed through this stuff just a

00:00:36.990 --> 00:00:38.990
little bit. We're not gonna go through many

00:00:38.990 --> 00:00:41.915
examples, but the slides are here. We also

00:00:41.915 --> 00:00:43.995
wrote really nice speaker notes in the slides

00:00:43.995 --> 00:00:46.795
so that later on, when you're working on

00:00:46.795 --> 00:00:48.635
your projects, you can go through the slides

00:00:48.635 --> 00:00:50.475
and just use them as a reference for

00:00:50.475 --> 00:00:53.195
how to do things as you're collaborating with

00:00:53.195 --> 00:00:55.540
your team. Because git can get kinda messy

00:00:55.540 --> 00:00:57.220
sometimes, so we wanna show you all the

00:00:57.220 --> 00:01:01.060
best practices for when you're doing Git. So

00:01:01.060 --> 00:01:02.980
what we're going to go over today is

00:01:02.980 --> 00:01:04.580
we'll re go over some of the stuff

00:01:04.580 --> 00:01:06.580
we talked about at the very beginning of

00:01:06.580 --> 00:01:09.535
the class about how to make commits and

00:01:09.535 --> 00:01:11.535
how to branch. And then we'll talk more

00:01:11.535 --> 00:01:14.015
about merging and merge conflicts, you will probably

00:01:14.015 --> 00:01:16.495
encounter a lot as you're working. And then

00:01:16.495 --> 00:01:19.135
finally, we'll dive more into the details of

00:01:19.135 --> 00:01:23.340
how remote Git works. So let's recall how

00:01:23.340 --> 00:01:27.820
we make commits in Git. So as we

00:01:27.820 --> 00:01:30.300
recall, a commit is basically just like a

00:01:30.300 --> 00:01:32.380
set of code changes that we package up

00:01:32.380 --> 00:01:34.620
and put a label on that's all probably

00:01:34.620 --> 00:01:36.815
relating to some kind of category, some kind

00:01:36.815 --> 00:01:40.495
of big fix to our code. And we

00:01:40.495 --> 00:01:43.295
can think about git as representing this whole

00:01:43.455 --> 00:01:46.495
history of commits that represents sort of like

00:01:46.495 --> 00:01:48.415
our version history. And then we have this

00:01:48.415 --> 00:01:51.780
thing called the head pointer basically represents where

00:01:51.780 --> 00:01:55.380
in where our current working directory that is,

00:01:55.380 --> 00:01:58.100
like, our Versus Code window is representing. So

00:01:58.100 --> 00:01:59.700
if our head pointer is at the top

00:01:59.700 --> 00:02:01.940
most commit, that means that whatever we're looking

00:02:01.940 --> 00:02:05.385
at in our Versus Code is the most

00:02:05.385 --> 00:02:08.345
recent commit, this styling comments blog with CSS,

00:02:08.345 --> 00:02:12.105
the most recent version. So how do we

00:02:12.105 --> 00:02:15.065
add a new commit? Let's say we want

00:02:15.065 --> 00:02:17.305
to add a commit to add the post

00:02:17.305 --> 00:02:21.140
comments functionality. Then we're going to make all

00:02:21.140 --> 00:02:23.940
of our code changes in our various files,

00:02:24.420 --> 00:02:27.460
and then if we're thinking about commitment, we're

00:02:27.460 --> 00:02:28.980
going to git add, and then the file

00:02:28.980 --> 00:02:31.140
path for the files and the changes, we

00:02:31.140 --> 00:02:33.715
wanna add to our staging area. We do

00:02:33.715 --> 00:02:35.795
git add with our files, those changes get

00:02:35.795 --> 00:02:39.555
added to the staging area, and then add

00:02:39.555 --> 00:02:42.035
whatever other files we wanna add. And then

00:02:42.035 --> 00:02:44.275
once we're ready to commit, we'll do git

00:02:44.275 --> 00:02:47.070
commit with a certain commit message. Those get

00:02:47.070 --> 00:02:49.310
boxed up and added to our commit history.

00:02:49.550 --> 00:02:52.750
So that's a brief recap of how commits

00:02:52.750 --> 00:03:22.460
work. Yeah? Gosh, dang it. Alright. Whatever. I

00:03:22.460 --> 00:03:25.020
guess I can't walk around. That's sad. Alright.

00:03:25.820 --> 00:03:32.735
I will make sure that on Zoom I'll

00:03:32.735 --> 00:03:42.015
just go like that. Okay. So we just

00:03:42.015 --> 00:03:46.280
committed and then now recall that we also

00:03:46.280 --> 00:03:49.880
were talking about git commit as this object

00:03:49.880 --> 00:03:52.360
graph representation where each commit is represented by

00:03:52.360 --> 00:03:54.920
a circle, also known as, like, representing a

00:03:54.920 --> 00:03:57.975
version of our code. And each commit has

00:03:57.975 --> 00:03:59.975
an ID, which is some big long string

00:03:59.975 --> 00:04:03.495
of characters, and then a message, which is

00:04:03.495 --> 00:04:06.615
what the commit is about. So now we're

00:04:06.615 --> 00:04:08.695
gonna briefly review branching that we talked about

00:04:08.695 --> 00:04:11.990
on Monday. So the basic scenario that we

00:04:11.990 --> 00:04:14.310
were talking about with why we need branching

00:04:14.310 --> 00:04:16.870
is, let's say Tony is working on implementing

00:04:16.870 --> 00:04:18.790
a new feature for his app, and then

00:04:18.790 --> 00:04:20.310
Andrew says, oh, can you help me fix

00:04:20.310 --> 00:04:22.310
this bug on the original homepage? And he's

00:04:22.310 --> 00:04:23.590
like, oh, okay. Then he has to move

00:04:23.590 --> 00:04:25.725
and start working on that. And then I

00:04:25.725 --> 00:04:27.405
come along and I'm like, Tony, we need

00:04:27.405 --> 00:04:29.005
this feature tomorrow and you have to do

00:04:29.005 --> 00:04:30.445
it right now. And then he has to

00:04:30.445 --> 00:04:32.685
change what he's working on. So he needs

00:04:32.685 --> 00:04:34.205
to work on all of these different things

00:04:34.205 --> 00:04:36.605
at once. And so if we didn't have

00:04:37.530 --> 00:04:39.770
branching, let's say task a, b, and c

00:04:39.770 --> 00:04:41.610
are the things he has to do, he's

00:04:41.610 --> 00:04:44.410
making his code changes, making his commits for

00:04:44.410 --> 00:04:46.970
task a, then Andrew comes along, he has

00:04:46.970 --> 00:04:49.370
to make some more commits for this task,

00:04:49.610 --> 00:04:53.175
and then more and more, And then I

00:04:53.175 --> 00:04:54.375
come along and he has to start working

00:04:54.375 --> 00:04:57.975
on this and then he keeps adding commits,

00:04:57.975 --> 00:05:01.575
working on all these different tasks and it's

00:05:01.575 --> 00:05:03.575
kind of a little bit of a mess.

00:05:03.575 --> 00:05:08.510
But then here's the problem. I come along

00:05:08.510 --> 00:05:10.910
and I'm like, hey, there's this bug on

00:05:10.910 --> 00:05:13.070
WebLab Tinder on task c. Where did it

00:05:13.070 --> 00:05:15.230
come from? And he has to look through

00:05:15.230 --> 00:05:17.470
his commit history to figure out when in

00:05:17.470 --> 00:05:20.910
the versions this bug got introduced. The only

00:05:20.910 --> 00:05:24.325
problem is, in real life, these tasks are

00:05:24.325 --> 00:05:26.485
not color coded. All of the commits look

00:05:26.485 --> 00:05:28.805
exactly the same. And so he's looking and

00:05:28.805 --> 00:05:33.285
he's looking and he's really sad. So what

00:05:33.285 --> 00:05:35.925
we need is a way to isolate working

00:05:35.925 --> 00:05:39.400
on one task versus another versus another. But

00:05:39.400 --> 00:05:41.320
then once you finish a task and have

00:05:41.320 --> 00:05:42.680
a version of the code that you like,

00:05:42.680 --> 00:05:44.760
being able to merge those things back together.

00:05:44.760 --> 00:05:46.760
So that's why we need branching and merging.

00:05:47.960 --> 00:05:50.520
So now I'm gonna show you an example

00:05:50.520 --> 00:05:53.175
of a merge. And there's a couple things

00:05:53.175 --> 00:05:56.375
that can happen when you merge. One is

00:05:56.375 --> 00:05:59.015
that you merge really smoothly and it works

00:05:59.015 --> 00:06:02.695
great. So I'll show you a quick example.

00:06:03.175 --> 00:06:06.455
Let's say this is my git demo folder

00:06:06.970 --> 00:06:09.530
and I am going to I have this

00:06:09.530 --> 00:06:10.970
thing that says Abby is wearing a party

00:06:10.970 --> 00:06:13.050
hat and I'm going to create a new

00:06:13.050 --> 00:06:15.930
branch. I'll do git checkout dash b. You'll

00:06:15.930 --> 00:06:17.290
be using this command a lot in your

00:06:17.290 --> 00:06:23.745
projects. New hat or something. And so now

00:06:23.745 --> 00:06:25.425
I'm on the branch, new hat, and you

00:06:25.425 --> 00:06:27.345
can see that because it says it here.

00:06:27.505 --> 00:06:35.330
So now I'm gonna make some changes and

00:06:35.330 --> 00:06:38.770
save them. Git status to see yep, I

00:06:38.770 --> 00:06:41.170
modified this. I'll do git add dash a,

00:06:41.170 --> 00:06:43.250
that adds everything, all of the changes I've

00:06:43.250 --> 00:06:51.075
made. And git commit dash m birthday, whatever

00:06:51.075 --> 00:06:54.675
I wanna call it. And now I'm done

00:06:54.675 --> 00:06:56.755
making my changes in my new hop branch,

00:06:56.835 --> 00:06:58.675
and I want to merge these changes into

00:06:58.675 --> 00:07:00.835
my main branch. So I'm going to do

00:07:00.835 --> 00:07:04.240
checkout back to main, And notice that now

00:07:04.240 --> 00:07:06.240
that my head pointer is at main, I

00:07:06.240 --> 00:07:07.680
no longer see the changes that I had

00:07:07.680 --> 00:07:10.080
made in my branch. But now I'm going

00:07:10.080 --> 00:07:12.560
to do git merge, and then what did

00:07:12.560 --> 00:07:15.760
I call this branch? New hat. Yay. That's

00:07:15.760 --> 00:07:18.135
amazing. It just merged the branches that I

00:07:18.135 --> 00:07:20.375
made in new hat, the commits, into my

00:07:20.375 --> 00:07:23.415
main branch. Now I see the change here

00:07:23.735 --> 00:07:27.335
and it says it merged successfully. Great. This

00:07:27.335 --> 00:07:30.550
is a smooth merge. But what happens when

00:07:30.630 --> 00:07:33.990
the merge isn't quite so smooth? I'm going

00:07:33.990 --> 00:07:37.030
to do git checkout a new branch. Let's

00:07:37.030 --> 00:07:41.765
call it bucket hat. And then on my

00:07:41.765 --> 00:07:43.285
new brands, I'm gonna make some changes that

00:07:43.285 --> 00:07:44.805
actually conflict with the changes that I have

00:07:44.805 --> 00:07:46.485
in main. So I'm gonna say Abby's wearing

00:07:46.485 --> 00:07:54.800
a bucket hat instead, like this. So now

00:07:54.800 --> 00:07:56.880
I'm going to check out back to Main

00:07:57.600 --> 00:08:00.240
and try and oh, wait, wait, sorry. I

00:08:00.240 --> 00:08:05.120
need to check out back to bucket hat

00:08:05.680 --> 00:08:10.505
and make sure I have committed something. Okay.

00:08:10.505 --> 00:08:15.465
So git status, git add my change, git

00:08:15.465 --> 00:08:24.340
commit. Okay. So now I've committed this change

00:08:24.340 --> 00:08:27.220
on Buckethat, and we can see it. And

00:08:27.220 --> 00:08:28.820
then I'm going to go back to main

00:08:28.820 --> 00:08:30.820
and try and merge the changes from Buckethat

00:08:30.820 --> 00:08:32.820
into main. You'll notice that main still says

00:08:32.820 --> 00:08:35.465
Abby is wearing a party hat. So I'm

00:08:35.465 --> 00:08:38.745
going to git merge bucket hat, gonna merge

00:08:38.745 --> 00:08:42.105
the changes from bucket hat into main, and

00:08:42.265 --> 00:08:43.785
oh, why did that work? That was not

00:08:43.785 --> 00:08:46.105
supposed to work. Oh, I think I accidentally

00:08:46.105 --> 00:08:49.470
edited the thing on main. Okay. Well, either

00:08:49.470 --> 00:08:51.150
way, for the sake of time, I'm not

00:08:51.150 --> 00:08:53.550
going to do another example for the merge

00:08:53.550 --> 00:08:56.670
conflict, but basically what happens is if I

00:08:56.670 --> 00:08:59.950
have a something conflicting when I merge it

00:08:59.950 --> 00:09:02.035
in, then I'm going to get this error

00:09:02.035 --> 00:09:04.835
message that says, oh, no, merge conflict. Fix

00:09:04.835 --> 00:09:06.995
the changes and then commit the result. And

00:09:06.995 --> 00:09:08.995
so I need to go into my editor,

00:09:09.075 --> 00:09:11.715
manually choose what I wanna change and what

00:09:11.555 --> 00:09:14.835
wanna keep, whether it's the version from main

00:09:14.835 --> 00:09:16.435
branch or the version from my new branch,

00:09:16.830 --> 00:09:19.630
and then close out the editor and then

00:09:20.030 --> 00:09:22.830
merge those things together manually. So that's what

00:09:22.830 --> 00:09:27.950
happens when there is a merge conflict. Okay.

00:09:30.455 --> 00:09:32.135
Now I'm going to go into talking a

00:09:32.135 --> 00:09:34.455
little bit more about how we use remote

00:09:34.455 --> 00:09:36.535
because this is going to be very important

00:09:36.535 --> 00:09:39.895
for your projects. Earlier, we talked about how

00:09:40.215 --> 00:09:42.535
we have a local copy of the code

00:09:42.535 --> 00:09:45.160
that I'm working on, and we have a

00:09:45.160 --> 00:09:47.880
copy of the code that's on the remote

00:09:47.880 --> 00:09:49.960
server, in this case, GitHub. This is where

00:09:49.960 --> 00:09:52.360
our code is hosted. And if Tony wants

00:09:52.360 --> 00:09:53.800
to work with me on this code, he's

00:09:53.800 --> 00:09:56.360
going to have to use git clone. So

00:09:56.360 --> 00:09:58.200
he clones, and now he has a local

00:09:58.200 --> 00:10:00.795
copy the code of the whole repo on

00:10:00.795 --> 00:10:04.875
his computer. Now Tony's going to make his

00:10:04.875 --> 00:10:08.875
changes, git add, git commit, etcetera, so that

00:10:08.955 --> 00:10:11.675
he's editing the code. Then he uses git

00:10:11.675 --> 00:10:13.915
push to push the commit that he made

00:10:13.915 --> 00:10:18.520
here onto remote. And then if I want

00:10:18.520 --> 00:10:20.040
to see what kinds of changes he made,

00:10:20.040 --> 00:10:21.640
I'm gonna do git pull, and it will

00:10:21.640 --> 00:10:24.040
take any new commits that are on remote

00:10:24.040 --> 00:10:25.800
that I don't have and bring them over

00:10:25.800 --> 00:10:29.505
to my side of things. So the basic

00:10:29.505 --> 00:10:31.665
workflow, if you're just doing a very simple

00:10:31.665 --> 00:10:34.865
remote workflow, working on one singular branch, is

00:10:34.865 --> 00:10:37.665
anytime you start working pull, always, always, always,

00:10:37.665 --> 00:10:39.585
always pull. And then you're gonna work on

00:10:39.585 --> 00:10:41.185
stuff, you're gonna add, you're gonna make your

00:10:41.185 --> 00:10:43.240
commits, and then you need to pull again

00:10:43.240 --> 00:10:46.840
to make sure that nothing changed on the

00:10:47.080 --> 00:10:49.480
remote server in the meantime while you're working.

00:10:49.960 --> 00:10:52.200
And then once you've successfully merged any changes

00:10:52.200 --> 00:10:54.200
in, then you can push everything back to

00:10:54.200 --> 00:10:56.200
the remote server, and now everything will be

00:10:56.200 --> 00:10:58.695
up to date and clean. So that's one

00:10:58.695 --> 00:11:00.695
way, the most simple way to work with

00:11:00.695 --> 00:11:03.975
remote. But the more sophisticated way to work

00:11:03.975 --> 00:11:05.735
with remote, and this is how I would

00:11:05.735 --> 00:11:08.295
recommend doing for your projects and how you'll

00:11:08.295 --> 00:11:11.175
definitely be doing in any industry setting, is

00:11:11.175 --> 00:11:15.590
using branches. So let's say that Tony is

00:11:15.590 --> 00:11:17.750
working here and his copy of the code

00:11:17.750 --> 00:11:19.830
of main is up to date with remote,

00:11:20.150 --> 00:11:21.830
and he's going to make a local branch.

00:11:21.830 --> 00:11:24.790
He's gonna call it WebLab Tinder, and he's

00:11:24.790 --> 00:11:26.615
making a branch, but it only exists on

00:11:26.615 --> 00:11:28.535
his local side. It doesn't exist on remote

00:11:28.535 --> 00:11:31.655
yet. And so he makes a commit. And

00:11:31.655 --> 00:11:33.735
then he's going to do git push. I'll

00:11:33.735 --> 00:11:36.455
try that. Oh, shoot. He got cock blocked.

00:11:36.615 --> 00:11:40.215
What happened? It says, the current branch has

00:11:40.215 --> 00:11:42.570
no upstream branch. Push the current branch, it's

00:11:42.570 --> 00:11:44.490
not the remote as upstream. Use git push

00:11:44.490 --> 00:11:47.050
set upstream origin new branch. Okay. What the

00:11:47.050 --> 00:11:50.170
heck does that mean? What this means is

00:11:50.170 --> 00:11:54.735
this concept of upstream basically means that every

00:11:54.735 --> 00:11:57.775
branch, when you git clone, basically has this

00:11:57.775 --> 00:12:00.255
little link that git keeps track of that

00:12:00.255 --> 00:12:02.655
says, oh, this branch that I'm working on

00:12:02.655 --> 00:12:05.935
on local corresponds to this branch on remote.

00:12:06.270 --> 00:12:08.190
And there's this link between the two so

00:12:08.190 --> 00:12:10.270
that when you do git push, git knows,

00:12:10.270 --> 00:12:12.190
oh, I'm gonna move this to this particular

00:12:12.190 --> 00:12:16.510
part of remote. But since Tony just created

00:12:16.510 --> 00:12:18.830
this new branch, WebLab Tinder, it doesn't have

00:12:18.830 --> 00:12:22.145
one of these little links to it, to

00:12:22.145 --> 00:12:24.145
something on remote. So what he's going to

00:12:24.145 --> 00:12:26.145
do is he'll do git push set upstream

00:12:26.145 --> 00:12:29.025
origin, which just means remote, and then whatever

00:12:29.025 --> 00:12:30.465
he wants to call his new branch on

00:12:30.465 --> 00:12:32.385
remote. So let's say he wants to call

00:12:32.385 --> 00:12:34.225
it Tinder. It can be the same name,

00:12:34.225 --> 00:12:36.220
it can be different, doesn't matter. But now

00:12:36.220 --> 00:12:37.900
that he called git push with this set

00:12:37.900 --> 00:12:40.860
upstream flag, now git knows, okay, I'm going

00:12:40.860 --> 00:12:42.860
to set up a link between this web

00:12:42.860 --> 00:12:45.580
web Tinder branch that I have locally and

00:12:45.580 --> 00:12:48.380
the Tinder branch that I'm now creating on

00:12:48.380 --> 00:12:54.355
the remote server. So now he's making his

00:12:54.355 --> 00:12:58.035
commits, he's doing his stuff, more stuff, and

00:12:58.035 --> 00:13:00.275
then now he can do git push. And

00:13:00.275 --> 00:13:03.075
since this connection exists, git will know, okay,

00:13:03.075 --> 00:13:04.995
I'm gonna take these commits and move them

00:13:04.995 --> 00:13:09.850
to the Tinder branch on remote. And now

00:13:09.850 --> 00:13:12.650
once Tony's like, okay, WebLog Tinder is ready,

00:13:12.650 --> 00:13:14.570
we're all set to go, he wants to

00:13:14.570 --> 00:13:17.130
merge it back into main. So how do

00:13:17.130 --> 00:13:20.465
we do that? Well, he's going to check

00:13:20.465 --> 00:13:22.545
out to main to make sure that he

00:13:22.545 --> 00:13:24.625
is currently looking at the main branch. Because

00:13:24.625 --> 00:13:27.105
remember, if you wanna merge a branch into

00:13:27.105 --> 00:13:28.945
main, you need to be on main and

00:13:28.945 --> 00:13:33.150
then merge the other branch in. And so

00:13:33.150 --> 00:13:34.830
he's going to type in the command git

00:13:34.830 --> 00:13:37.710
merge weblab tinder. He fixes any merge conflicts

00:13:37.710 --> 00:13:39.870
that arise, does whatever he needs to do,

00:13:39.870 --> 00:13:41.870
and now there's this new merge commit that

00:13:41.870 --> 00:13:45.390
he has locally that merges whatever he's merges

00:13:45.390 --> 00:13:46.910
all of the commits he made with weblab

00:13:46.910 --> 00:13:50.735
tinder into the old version of Nate. Putting

00:13:50.735 --> 00:13:53.695
them together, great. And now he wants to

00:13:53.695 --> 00:13:55.455
push this to remote because remote has to

00:13:55.455 --> 00:14:00.170
get merged too, GitHub, etcetera. He's like, I'm

00:14:00.170 --> 00:14:02.330
so excited to publish WebLab Tinder. It's almost

00:14:02.330 --> 00:14:03.770
done. Now I can be done with this

00:14:03.770 --> 00:14:07.690
weird project. And so he does git push.

00:14:07.930 --> 00:14:10.570
And oh, no. He got cog blocked again.

00:14:10.570 --> 00:14:14.195
What happened? Here it says updates were rejected

00:14:14.195 --> 00:14:16.115
because the remote contains work that you do

00:14:16.115 --> 00:14:18.195
not have locally. This is usually caused by

00:14:18.195 --> 00:14:20.595
another repository pushing to the same ref. You

00:14:20.595 --> 00:14:22.355
may want to first integrate the remote changes,

00:14:22.355 --> 00:14:25.650
e d git pull, before pushing a git.

00:14:26.290 --> 00:14:29.730
Okay. What does this mean? Well, it says

00:14:29.730 --> 00:14:32.130
the remote contains work that he doesn't have

00:14:32.130 --> 00:14:34.930
locally. That probably means that there were commits

00:14:34.930 --> 00:14:37.730
on remote, on GitHub, that he doesn't have

00:14:37.730 --> 00:14:42.245
in his local copy. So he's like, what

00:14:42.245 --> 00:14:44.725
what what just happened? Why did I get

00:14:44.725 --> 00:14:48.085
Cockblocked? So he does git fetch and that

00:14:48.085 --> 00:14:50.645
basically looks at remote, checks what's going on,

00:14:50.645 --> 00:14:52.485
updates what he has locally to match it,

00:14:52.800 --> 00:14:55.840
and he realizes, oh, there's a new command

00:14:56.240 --> 00:14:59.520
sorry, a new commit on remote that Abby

00:14:59.520 --> 00:15:02.480
had made and pushed onto remote main while

00:15:02.480 --> 00:15:03.840
he was working on his web dot Tinder

00:15:03.840 --> 00:15:08.905
that he didn't realize was there. So now

00:15:08.905 --> 00:15:12.025
he has to take care of taking this

00:15:12.025 --> 00:15:14.505
commit that he that that was in remote

00:15:14.505 --> 00:15:16.745
here and somehow merging that into his own

00:15:16.745 --> 00:15:20.265
diagram. So what he's going to do is

00:15:20.265 --> 00:15:23.225
he's going to be on his local main,

00:15:23.310 --> 00:15:24.990
so his computer, and he's going to do

00:15:24.990 --> 00:15:27.550
git pull. That's gonna take the commit that

00:15:27.550 --> 00:15:30.190
he doesn't have yet locally and merge it

00:15:30.190 --> 00:15:33.390
into the main branch of his local repo.

00:15:34.830 --> 00:15:36.110
And then he might need to fix some

00:15:36.110 --> 00:15:39.485
merge conflicts, do some stuff, whatever. And then

00:15:39.485 --> 00:15:42.205
once that's successfully merged, now that the bottom

00:15:42.205 --> 00:15:45.245
of his object graph looks the same as

00:15:45.245 --> 00:15:47.965
the bottom of the remote object graph, now

00:15:47.965 --> 00:15:51.245
he's finally ready to make the merge of

00:15:51.245 --> 00:15:55.050
WebLab Tinder public on the GitHub remote server.

00:15:56.570 --> 00:15:58.570
So he does git push, and it finally

00:15:58.570 --> 00:16:05.210
works. He's happy. Okay. And then also good

00:16:05.210 --> 00:16:07.770
practice is once you've successfully merged all your

00:16:07.770 --> 00:16:11.435
changes in, just delete that local branch. So

00:16:13.435 --> 00:16:17.195
once you merge this in, GitHub will automatically

00:16:17.195 --> 00:16:19.435
delete this branch on remote for you. But

00:16:19.435 --> 00:16:21.520
locally, you might still have this web Tinder

00:16:21.520 --> 00:16:23.440
branch, and it's a good practice to just

00:16:23.440 --> 00:16:25.760
delete it once you're done merging that feature

00:16:25.760 --> 00:16:27.200
that you were working on on that branch

00:16:27.200 --> 00:16:32.640
into the main branch. Okay. This slide, I

00:16:32.640 --> 00:16:34.640
won't go into in super detail. You don't

00:16:34.640 --> 00:16:36.160
need to read it all right now, but

00:16:36.160 --> 00:16:37.565
this is gonna be good reference for you

00:16:37.565 --> 00:16:40.045
when you're going through your project that basically,

00:16:40.205 --> 00:16:42.205
if you wanna add a new feature, one

00:16:42.205 --> 00:16:44.845
of the best workflows is to create a

00:16:44.845 --> 00:16:47.965
local branch, create a new local branch, do

00:16:47.965 --> 00:16:49.805
some work, whatever you need to, and then

00:16:49.805 --> 00:16:52.525
create a remote branch that corresponds to our

00:16:52.110 --> 00:16:54.430
local branch, setting up that link. Then, you

00:16:54.430 --> 00:16:56.750
know, continue doing it or making whatever changes

00:16:56.750 --> 00:16:59.070
you need to. Then when you're ready to

00:16:59.070 --> 00:17:00.750
merge your branch, you're going to need to

00:17:00.910 --> 00:17:03.070
git pull, make sure you always, always, always

00:17:03.070 --> 00:17:05.835
pull, make that merge commit, and then we

00:17:05.835 --> 00:17:08.955
push the merge commit from local to remote.

00:17:11.115 --> 00:17:13.835
Okay. Just a side addendum is that what

00:17:13.835 --> 00:17:17.870
we just did is we had this merge

00:17:17.870 --> 00:17:20.030
commit. So Tony had his branch, he made

00:17:20.030 --> 00:17:21.710
a merge commit here, and then he pushed

00:17:21.710 --> 00:17:25.630
that merge commit to remote main. This will

00:17:25.630 --> 00:17:27.630
work fine for our projects, but in any

00:17:27.630 --> 00:17:30.030
industry setting, when you're actually doing software engineering,

00:17:30.030 --> 00:17:32.270
you would not be doing this. Because typically

00:17:34.635 --> 00:17:37.915
sorry. Typically, when we're in an industry setting,

00:17:37.915 --> 00:17:40.315
we as a regular entry level software engineer

00:17:40.315 --> 00:17:43.275
or intern or whatever, don't have access to

00:17:43.275 --> 00:17:45.780
push anything, even a merge commit, to remote

00:17:45.780 --> 00:17:47.780
main. Because everyone's working on remote main, all

00:17:47.780 --> 00:17:49.540
of the developers. If we mess something up

00:17:49.540 --> 00:17:52.580
on there, it's kinda screwed. So what we

00:17:52.580 --> 00:17:56.180
would typically do in an industry setting is

00:17:56.180 --> 00:17:58.180
instead of merging and then pushing the merge

00:17:58.180 --> 00:18:01.205
commit, make sure that the remote branch has

00:18:01.205 --> 00:18:04.085
whatever commits that we want it to have,

00:18:04.485 --> 00:18:08.245
and then we do git pull origin main

00:18:08.245 --> 00:18:12.640
to make sure that any new changes from

00:18:12.640 --> 00:18:15.760
main on remote are pulled into our branch.

00:18:15.760 --> 00:18:18.960
This is to avoid any unnecessary merge conflicts

00:18:18.960 --> 00:18:22.480
and things. And then make sure that our

00:18:22.480 --> 00:18:26.295
branch matches whatever changes were made to RemoteMain,

00:18:26.295 --> 00:18:27.975
and then we do something called a pull

00:18:27.975 --> 00:18:32.535
request. So this is going online on, like,

00:18:32.535 --> 00:18:36.135
GitHub or whatever software that your company uses,

00:18:36.455 --> 00:18:39.495
and then it's basically a request to your

00:18:39.090 --> 00:18:41.650
manager or whoever's in charge, whoever has admin

00:18:41.650 --> 00:18:46.290
permissions on the repo, to merge this branch

00:18:46.290 --> 00:18:48.130
of changes that I made, in this case,

00:18:48.130 --> 00:18:52.685
WebBot Tinder, into RemoteMain. So it's just an

00:18:52.685 --> 00:18:55.325
online interface where the manager or other software

00:18:55.325 --> 00:18:57.565
developers can review your code, check it off,

00:18:57.565 --> 00:19:00.925
okay, that looks good, and then GitHub will

00:19:00.925 --> 00:19:02.765
automatically merge it for you. So that's how

00:19:02.765 --> 00:19:04.205
you would do things in an industry setting.

00:19:05.800 --> 00:19:07.480
And then we would go back to our

00:19:07.480 --> 00:19:09.800
local, git pull, and then we have everything

00:19:09.960 --> 00:19:13.240
that is on remote. And then, of course,

00:19:13.240 --> 00:19:16.440
we want to delete our branches. Okay. This

00:19:16.440 --> 00:19:18.280
is a reference for the workflow that we

00:19:18.280 --> 00:19:19.560
would do if we were in an industry

00:19:19.560 --> 00:19:22.085
setting. And now we're just going to briefly

00:19:22.085 --> 00:19:23.445
do a little addendum on a tool that

00:19:23.445 --> 00:19:26.325
you will use probably many, many, many times

00:19:26.325 --> 00:19:30.165
throughout your projects, and that is Gitstash. It's

00:19:30.165 --> 00:19:32.245
also useful for the workshops. So let's say

00:19:32.245 --> 00:19:35.125
that Tony is working on his code and

00:19:35.440 --> 00:19:38.640
this is in, like, dotted lines because he

00:19:38.640 --> 00:19:40.480
hasn't committed this yet. He's just making some

00:19:40.480 --> 00:19:42.880
code, some changes in his Versus code. He

00:19:42.880 --> 00:19:46.160
hasn't staged or committed anything. He's just got

00:19:46.160 --> 00:19:49.845
his changes in his Versus code. But let's

00:19:49.845 --> 00:19:52.405
say he wants to git checkout main. Let's

00:19:52.405 --> 00:19:53.765
say he wants to go back and see,

00:19:53.765 --> 00:19:55.125
oh, what was how do we do that

00:19:55.125 --> 00:19:56.485
in the main branch again? What did I

00:19:56.485 --> 00:19:58.565
change there? Something like that. He wants to

00:19:58.565 --> 00:20:02.420
just check it. And then, oh, he got

00:20:02.420 --> 00:20:06.100
cock blocked again. What happened? So it says,

00:20:06.100 --> 00:20:07.780
your local changes to the following files will

00:20:07.780 --> 00:20:10.180
be overwritten by checkout, and then whatever this

00:20:10.180 --> 00:20:12.580
file is. Please commit your changes or stash

00:20:12.580 --> 00:20:14.805
them, oh, what does that mean, before you

00:20:14.805 --> 00:20:20.725
switch branches. So basically what git realizes is

00:20:20.725 --> 00:20:25.285
that if he checked out to main, then

00:20:25.285 --> 00:20:28.520
that moves the head pointer to main. What

00:20:28.520 --> 00:20:30.600
does that mean? Well, head pointer basically just

00:20:30.600 --> 00:20:33.800
says, where in my git object graph is

00:20:33.800 --> 00:20:36.440
my current v s code, like, state of

00:20:36.440 --> 00:20:39.400
the files representing? So if he checked out

00:20:39.400 --> 00:20:41.400
to main, that would change all of the

00:20:41.400 --> 00:20:43.720
files in his v s code to match

00:20:43.725 --> 00:20:47.245
whatever this last commit on main is, which

00:20:47.245 --> 00:20:49.005
means that all of the changes that he

00:20:49.005 --> 00:20:51.245
made and didn't commit would just be wiped

00:20:51.245 --> 00:20:53.965
out forever. Git knows that you probably don't

00:20:53.965 --> 00:20:55.725
wanna wipe out changes if you were working

00:20:55.725 --> 00:20:57.485
on stuff, and so that's why it gave

00:20:57.485 --> 00:21:01.780
him that error message. So what he can

00:21:01.780 --> 00:21:04.500
do instead is git stash, and that takes

00:21:04.500 --> 00:21:06.740
all of these changes that he used to

00:21:06.740 --> 00:21:09.140
have that he didn't commit or anything, that

00:21:09.140 --> 00:21:11.780
he had just in his editor, and it's

00:21:11.780 --> 00:21:13.060
almost like it sticks it off in a

00:21:13.060 --> 00:21:15.345
box to the side. And it's just like,

00:21:15.345 --> 00:21:16.945
okay, I'm gonna hold on to it. And

00:21:16.945 --> 00:21:19.105
now head represents whatever the last committed version

00:21:19.105 --> 00:21:22.145
was. And now he can git checkout main,

00:21:22.145 --> 00:21:24.705
he can check out whatever other branches he

00:21:24.705 --> 00:21:26.545
wants, he can change up whatever's going on

00:21:26.545 --> 00:21:28.145
in his Versus code, look at this, look

00:21:28.145 --> 00:21:29.930
at that, anything he wants to do. He

00:21:29.930 --> 00:21:33.850
can even pull from from remote if he

00:21:33.850 --> 00:21:35.530
realizes there was stuff in remote that he

00:21:35.530 --> 00:21:38.650
needed that he didn't have. And then once

00:21:38.650 --> 00:21:40.570
he's ready to bring those changes back and

00:21:40.570 --> 00:21:42.170
keep working on it, he does git stash

00:21:42.170 --> 00:21:45.235
pop and that will take the changes that

00:21:45.235 --> 00:21:47.475
he was making before out of the little

00:21:47.475 --> 00:21:51.395
box and reimplement them straight into his Versus

00:21:51.395 --> 00:21:53.795
Code editor. So he can just pick up

00:21:53.795 --> 00:21:56.460
right where he was working before. So git

00:21:56.460 --> 00:21:58.860
stash, then doing whatever you want, and then

00:21:58.860 --> 00:22:01.260
git stash pop allows you to hold on

00:22:01.260 --> 00:22:03.820
to changes that you're working on but haven't

00:22:03.820 --> 00:22:10.645
committed or anything yet. What about the orange

00:22:10.645 --> 00:22:23.220
circle? Between the second yellow circle and the

00:22:23.220 --> 00:22:28.180
orange circle. So it's basically like, tell me

00:22:28.180 --> 00:22:31.060
if this answers your question. So basically, what

00:22:31.060 --> 00:22:35.395
happens is if he pulls so he had

00:22:35.395 --> 00:22:39.075
his head here, then he stashed all of

00:22:39.075 --> 00:22:41.475
his current working changes, and now he's pulling

00:22:41.475 --> 00:22:44.115
from origin main. So basically, this just takes

00:22:44.115 --> 00:22:46.755
whatever changes, whatever updates were made, and applies

00:22:46.755 --> 00:22:48.755
them to the version of the code that

00:22:48.755 --> 00:22:51.980
he has currently. That might cause some merge

00:22:51.980 --> 00:22:55.740
conflicts depending on if this is different than

00:22:55.740 --> 00:22:59.020
this, but he can just resolve those merge

00:22:59.020 --> 00:23:01.580
conflicts, figure it out, and then git stash

00:23:01.580 --> 00:23:03.180
pop will just take those changes that he

00:23:03.180 --> 00:23:05.625
had made before and apply them to this

00:23:05.625 --> 00:23:10.265
version of the code. Yeah. Got it. Okay.

00:23:10.425 --> 00:23:20.170
Workflow is good. Yes. Question? We wouldn't call

00:23:20.170 --> 00:23:22.010
it merge conflicts per se because it's not

00:23:22.010 --> 00:23:25.530
merging, but it's a good question. So if

00:23:25.530 --> 00:23:28.090
you pop off of the stash and that

00:23:28.090 --> 00:23:30.170
makes some changes that are different from what

00:23:30.170 --> 00:23:32.425
was in the orange circle, then it would

00:23:32.425 --> 00:23:34.185
overwrite the changes that were in the orange

00:23:34.185 --> 00:23:35.945
circle because that's as if we had the

00:23:35.945 --> 00:23:37.945
orange circle and then we just went in

00:23:37.945 --> 00:23:42.905
and edited things. Cool. So basic workflow, git

00:23:42.905 --> 00:23:44.985
Stash, do whatever you want, git Stash pop.

00:23:46.420 --> 00:23:48.660
Okay. I am, for the sake of time,

00:23:48.660 --> 00:23:54.020
not going to go over the recap. But

00:23:54.020 --> 00:23:57.060
a couple recommendations. There's this website called Learn

00:23:57.060 --> 00:23:58.500
Git Branching, which is like a kind of

00:23:58.500 --> 00:24:01.700
gamified Git practice website that is pretty nice.

00:24:02.175 --> 00:24:04.255
And we also have there's a Git cheat

00:24:04.255 --> 00:24:05.455
sheet that you can look at if you

00:24:05.455 --> 00:24:08.015
want to reference commands. Also, just in general,

00:24:08.015 --> 00:24:10.335
I literally just stack overflow. I have to

00:24:10.335 --> 00:24:12.175
look up the commands for anything anytime I

00:24:12.175 --> 00:24:13.535
do it, but you just like, how to

00:24:13.535 --> 00:24:15.455
do this on Git? And then it'll just

00:24:15.455 --> 00:24:19.670
tell you. Okay. Last bit of feedback for

00:24:19.670 --> 00:24:21.270
today. If you could take one minute to

00:24:21.270 --> 00:24:23.190
fill this out and then we'll move into

00:24:23.190 --> 00:24:24.070
final announcements.
