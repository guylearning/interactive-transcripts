WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: ac0205ea-e1b6-48eb-8783-a7d598311abc
Created: 2025-05-15T20:33:54.719Z
Duration: 6544.0654
Channels: 1

00:00:08.160 --> 00:00:09.440
Alright. Can you guys hear me in the

00:00:09.440 --> 00:00:16.545
back? Thumbs up? Yeah? Okay. All right. So

00:00:16.785 --> 00:00:19.425
now we're gonna go into actually implementing our

00:00:19.425 --> 00:00:24.865
back end. So our goal for today is

00:00:24.865 --> 00:00:28.065
have a working feed and profile. So currently,

00:00:28.400 --> 00:00:31.520
if we pull up our book let me

00:00:31.520 --> 00:00:40.880
do that right now. You guys don't have

00:00:40.880 --> 00:00:43.065
to follow along with this. But currently, if

00:00:43.065 --> 00:00:45.145
we post something on our cat book or

00:00:45.145 --> 00:00:51.065
we comment something, whenever we refresh, everything just

00:00:51.065 --> 00:00:53.385
disappears, and that's not really good if you

00:00:53.385 --> 00:00:57.145
want to make a social media app. So

00:00:58.380 --> 00:01:09.580
the problem is oh, let's see. By the

00:01:09.580 --> 00:01:10.940
end of today, posts will be able to

00:01:10.940 --> 00:01:17.515
refresh and our comments will also persist. Currently,

00:01:17.915 --> 00:01:20.235
all our stories and comments are stored in

00:01:20.235 --> 00:01:23.355
our React state, so like Cordelia said yesterday,

00:01:23.435 --> 00:01:25.275
it's kind of bad that we store our

00:01:25.275 --> 00:01:29.880
stories and comments in a variable in our

00:01:30.280 --> 00:01:34.360
front end. It's just really bad practice since,

00:01:34.440 --> 00:01:36.600
as you guys saw, whenever we refresh, we

00:01:36.600 --> 00:01:40.875
just get the same stories rendered. So by

00:01:40.875 --> 00:01:42.635
the end of today, we want all our

00:01:42.635 --> 00:01:44.715
stories and comments to be stored on the

00:01:44.715 --> 00:01:49.275
back end. So how does the front end

00:01:49.275 --> 00:01:51.355
get the stories and comments? If we have

00:01:51.355 --> 00:01:53.760
the back end, we just send requests to

00:01:53.760 --> 00:01:56.640
the server asking, please give me the stories,

00:01:56.640 --> 00:01:59.280
and then our server just sends them back

00:01:59.280 --> 00:02:05.200
to us. So let's see this example in

00:02:05.200 --> 00:02:08.285
action. If you guys can open up weblab.

00:02:09.165 --> 00:02:22.090
Isexample on your computer. Do inspect, and then

00:02:22.090 --> 00:02:31.530
go to network, and then refresh. You, again,

00:02:31.530 --> 00:02:33.130
can see all the requests that we send

00:02:33.130 --> 00:02:35.515
to our server, so this is our example

00:02:35.515 --> 00:02:39.995
server. And you can go to, I don't

00:02:39.995 --> 00:02:45.115
know, stories and see the response, the headers,

00:02:45.595 --> 00:02:48.155
the request method. We got our status code,

00:02:48.155 --> 00:02:52.110
200 okay. And so if you pull up

00:02:52.110 --> 00:02:54.750
all of the requests, you see that there

00:02:54.750 --> 00:02:58.030
are different types of requests, and one of

00:02:58.030 --> 00:03:00.990
them is fetch. And fetch basically says that

00:03:00.990 --> 00:03:05.405
we're sending HTTP request through JavaScript. And so

00:03:05.405 --> 00:03:08.605
you guys remember how I mentioned yesterday how

00:03:08.605 --> 00:03:09.885
you can send there are multiple ways to

00:03:09.885 --> 00:03:12.205
send HTTP requests, one of them being the

00:03:12.205 --> 00:03:15.165
browser, another being JavaScript, and another being from

00:03:15.165 --> 00:03:17.965
your terminal using cURL. This is using the

00:03:17.965 --> 00:03:19.965
JavaScript method, and we'll be using it a

00:03:19.965 --> 00:03:23.800
lot whenever we're developing get and post requests

00:03:23.800 --> 00:03:39.045
from our front end. Yeah, we need a

00:03:39.045 --> 00:03:41.045
way to send our request to our server,

00:03:41.205 --> 00:03:42.965
and so we're going be sending HTTP requests

00:03:42.965 --> 00:03:48.565
using JavaScript. And so in utilities. Js, you

00:03:48.565 --> 00:03:51.190
can see that we made some helper functions

00:03:51.190 --> 00:03:54.310
for you guys, get and post, and essentially

00:03:54.310 --> 00:03:56.950
what we're doing here is we're abstracting out

00:03:56.950 --> 00:04:00.150
the fetch function that is in JavaScript to

00:04:00.150 --> 00:04:03.350
send requests. So for get, you can see

00:04:03.350 --> 00:04:06.635
that we have our endpoint and then our

00:04:06.635 --> 00:04:11.035
parameters for get request, and then for fetch

00:04:11.035 --> 00:04:14.715
request using post, we specify the method, the

00:04:14.715 --> 00:04:18.235
headers and body. So this resembles the HTTP

00:04:18.235 --> 00:04:22.310
request structure yesterday, and it will be important

00:04:22.310 --> 00:04:25.670
to remember this, the structure of HTTP request,

00:04:25.750 --> 00:04:30.150
whenever we are sending and receiving information through

00:04:30.150 --> 00:04:31.990
our server. And we'll talk about that later

00:04:31.990 --> 00:04:38.565
whenever we implement our endpoints. So let's get

00:04:38.565 --> 00:04:41.285
started, guys. Go to your terminal in Versus

00:04:41.285 --> 00:04:44.965
Code and run these commands. I'll give you

00:04:44.965 --> 00:04:59.200
guys a couple of seconds. Okay. It's like

00:05:00.880 --> 00:05:05.495
code's going be on the okay. I'll just

00:05:05.495 --> 00:05:15.520
share this then. Oh, yeah, you're right. Okay.

00:05:17.040 --> 00:05:24.240
Git reset hard, git fetch, git checkout, three

00:05:24.240 --> 00:05:32.835
step one. Alright. So in this workshop, we're

00:05:32.835 --> 00:05:34.995
going to be using npm start and npm

00:05:34.995 --> 00:05:36.835
run dev, and as I mentioned in the

00:05:36.835 --> 00:05:39.955
previous lecture, we run servers on ports on

00:05:39.955 --> 00:05:42.995
our computers. So whenever we run npm start,

00:05:42.995 --> 00:05:45.155
we're going to be running the server folder

00:05:45.155 --> 00:05:49.420
in our project on port 3,000, and those

00:05:49.420 --> 00:05:51.180
will be handling requests that we send from

00:05:51.180 --> 00:05:53.660
our front end. And then our npm run

00:05:53.660 --> 00:05:57.980
dev server, which will be accessible at 500173,

00:05:58.785 --> 00:06:01.505
will essentially just be sending us the React

00:06:01.505 --> 00:06:03.505
files that we can render on our browser,

00:06:03.665 --> 00:06:06.065
which we'll use to actually send requests to

00:06:06.065 --> 00:06:11.585
our back end. Currently, we have one test

00:06:11.585 --> 00:06:15.050
end endpoint that we implemented right now, it

00:06:15.050 --> 00:06:21.610
was like the example API endpoint. So here's

00:06:21.610 --> 00:06:23.610
the agenda for today. We're going to be

00:06:23.610 --> 00:06:26.515
sending a get request to our server, and

00:06:26.515 --> 00:06:28.275
our server is going to have an endpoint

00:06:28.275 --> 00:06:30.835
for that get request, and we're going to

00:06:30.835 --> 00:06:34.115
be requesting stories. Then we're going to be

00:06:34.355 --> 00:06:37.155
sending a post request to our server, and

00:06:37.155 --> 00:06:39.555
we'll handle that logic on the server side

00:06:39.555 --> 00:06:43.830
with a post API endpoint. And then we

00:06:43.830 --> 00:06:46.310
do the same thing for comments, and then

00:06:46.310 --> 00:06:50.790
towards the end, we'll be implementing root middleware

00:06:50.790 --> 00:06:54.710
so that we can have very neat code

00:06:54.710 --> 00:07:02.225
and we can organize our API endpoints. All

00:07:02.225 --> 00:07:05.985
right. So step one will be moving stories

00:07:06.145 --> 00:07:08.225
data to the back end, and then requesting

00:07:08.225 --> 00:07:11.790
them, and then creating an endpoint. So currently,

00:07:11.790 --> 00:07:13.950
we have our stories hard coded in feed

00:07:13.950 --> 00:07:17.070
dot jsx, so if you guys can pull

00:07:17.070 --> 00:07:19.710
up feed dot jsx and find the stories,

00:07:20.430 --> 00:07:29.035
and then we'll move on. But we don't

00:07:29.035 --> 00:07:31.435
want this data to be the end. We

00:07:31.435 --> 00:07:32.395
don't want this data to be in the

00:07:32.395 --> 00:07:33.275
front end, we want it to be in

00:07:33.275 --> 00:07:38.730
the back end. And so currently, any modifications

00:07:38.730 --> 00:07:40.170
to stories on the front end will just

00:07:40.170 --> 00:07:42.410
be local, so whenever we refresh, we'll just

00:07:42.410 --> 00:07:44.890
end up with the same three stories. So

00:07:44.890 --> 00:07:46.650
we're going to move all this data to

00:07:46.650 --> 00:07:50.090
the back end, and this will be your

00:07:51.050 --> 00:07:54.405
turn to get familiar with where everything is,

00:07:54.405 --> 00:07:58.885
and just to move the data from feed

00:07:58.885 --> 00:08:01.925
to server. So I'll give you guys a

00:08:01.925 --> 00:08:03.445
couple of minutes to do that, and if

00:08:03.445 --> 00:08:05.445
you guys have any questions, please feel free

00:08:05.445 --> 00:09:54.565
to ask. Alright guys, can I get a

00:09:54.565 --> 00:09:56.965
thumbs up if you guys are able to

00:09:56.965 --> 00:09:59.365
move move all that data to a server,

00:09:59.685 --> 00:10:05.240
server dot js? It's up. How many of

00:10:05.240 --> 00:10:06.840
you guys need any more time, so hold

00:10:06.840 --> 00:10:08.200
up. Hold up how many fingers you guys

00:10:08.200 --> 00:10:11.240
need how many minutes you guys need of

00:10:11.240 --> 00:10:23.275
time to finish this? Two. All right. I'll

00:10:23.275 --> 00:10:24.555
do it with you guys, and then you

00:10:24.555 --> 00:10:30.490
guys can, just do the same. So we

00:10:30.490 --> 00:10:38.170
go to components, then we go to modules,

00:10:38.730 --> 00:10:41.770
and, oh, actually pages, and then we go

00:10:41.770 --> 00:10:45.215
to feed dot JSX. We simply copy and

00:10:45.215 --> 00:10:52.255
paste the stories, copy them. Oh shoot. My

00:10:52.255 --> 00:11:06.770
Versus code is bugging. So we copy that,

00:11:06.770 --> 00:11:08.850
and then we go to server dot js,

00:11:08.850 --> 00:11:11.330
so this is where our server code's gonna

00:11:11.330 --> 00:11:13.145
be, and we just copy and paste it

00:11:13.145 --> 00:11:17.865
right above step one. I like changing names

00:11:17.865 --> 00:11:25.870
to stories. Are we good with that? Alright,

00:11:25.870 --> 00:11:28.910
cool. Now that the stories are in the

00:11:28.910 --> 00:11:30.430
back end, we need the front end to

00:11:30.430 --> 00:11:36.350
actually request them. We'll be sending you a

00:11:36.350 --> 00:11:38.510
request for stories, and then server will send

00:11:38.510 --> 00:11:43.445
back stories. So just so you guys are

00:11:43.685 --> 00:11:47.605
able to get familiar with HTTP requests and

00:11:48.165 --> 00:11:50.645
the structure and what information we're sending to

00:11:50.645 --> 00:11:55.800
the server, imagine that or actually, go on

00:11:55.800 --> 00:12:07.800
weblab. Isexample again, and then go to inspect,

00:12:07.880 --> 00:12:10.885
and then network, and look at the structure

00:12:10.885 --> 00:12:15.045
of our stories request, and try to fill

00:12:15.045 --> 00:12:23.160
out all the missing information, sorry, All the

00:12:23.160 --> 00:12:33.400
missing information, all the missing information here. And

00:12:33.400 --> 00:12:35.160
if you guys need any help, please get

00:12:35.160 --> 00:12:38.645
on the queue. But yeah, let's go on

00:12:38.645 --> 00:12:40.805
the network tab, and then go to the

00:12:40.805 --> 00:12:43.125
stories request, and see what kind of information

00:12:43.125 --> 00:13:23.780
we're sending. So I forgot to mention that

00:13:23.780 --> 00:13:26.500
you might want to refresh the page whenever

00:13:26.500 --> 00:13:28.740
you're on the network tab, just so that

00:13:28.740 --> 00:14:43.570
all the HTTP requests can be shown. Alright,

00:14:43.570 --> 00:14:45.650
how much time do you guys think you

00:14:45.650 --> 00:14:47.650
guys need? You guys pull up your finger,

00:14:47.650 --> 00:15:10.130
put up your fingers. Any minutes? Alright. I'll

00:15:10.130 --> 00:15:11.490
give you guys one more minute for this.

00:16:31.670 --> 00:16:34.550
All right, so, I'll do it with you

00:16:34.550 --> 00:16:42.470
guys. So if we go to weblab.is/example, we

00:16:42.470 --> 00:16:46.325
can go to inspect, and go to network,

00:16:49.685 --> 00:16:57.860
and then we can refresh. And we see

00:16:57.860 --> 00:17:00.420
all these HTTP requests that this website sends,

00:17:00.980 --> 00:17:04.660
and then we go to stories, we look

00:17:04.660 --> 00:17:08.420
at all the information, we see that's a

00:17:08.420 --> 00:17:11.595
get request and the server for the example

00:17:11.595 --> 00:17:16.475
server is catbook on render.com, and the endpoint

00:17:16.475 --> 00:17:21.355
that it's using is apistories. So for our

00:17:21.355 --> 00:17:24.030
own catbook, we'd want to use the endpoint

00:17:24.030 --> 00:17:26.510
API slash stories, or create an endpoint API

00:17:26.510 --> 00:17:28.910
slash stories, and the base URL would just

00:17:28.910 --> 00:17:34.190
be localhost 3,000. Then if we go to

00:17:34.430 --> 00:17:38.485
response, you can see all the stories that

00:17:38.485 --> 00:17:45.445
people posted. Daniel, hi. Namastezer, hello. And then,

00:17:46.165 --> 00:17:49.680
is that all? And here it says three

00:17:49.680 --> 00:17:53.520
zero four, like on the first render of

00:17:53.520 --> 00:17:55.920
these stories, it actually be a 200, but

00:17:55.920 --> 00:17:58.880
since our computer just like stores it on

00:17:59.200 --> 00:18:01.440
in the cache, then it's just a three

00:18:01.840 --> 00:18:11.815
zero four. So the answer would look something

00:18:11.815 --> 00:18:21.130
like this. So Now we're going want to

00:18:21.130 --> 00:18:23.850
actually request our stories from the front end.

00:18:24.730 --> 00:18:28.810
Should I do a break for lunch? I

00:18:28.810 --> 00:18:35.355
don't want do this in four minutes. Alright,

00:18:35.355 --> 00:18:56.990
guys. Break time, Zoom people. Alright. So we're

00:18:56.990 --> 00:19:00.030
gonna get started now. So just a little

00:19:00.030 --> 00:19:03.545
review, to remember what we were doing. We

00:19:03.545 --> 00:19:05.705
moved our stories to the back end, and

00:19:05.705 --> 00:19:07.785
now we want to send get requests to

00:19:07.785 --> 00:19:10.185
the server to actually retrieve that data. And

00:19:10.185 --> 00:19:11.865
so we have a little diagram right here

00:19:11.865 --> 00:19:14.105
in the corner, just to show whether we're

00:19:14.105 --> 00:19:15.465
in the front end or the back end.

00:19:16.110 --> 00:19:17.630
Front end, we're going be making get and

00:19:17.630 --> 00:19:19.150
post requests, and then the back end is

00:19:19.150 --> 00:19:21.470
going be making the endpoints that run the

00:19:21.470 --> 00:19:27.230
functionality for those specific requests. Right now, we're

00:19:27.230 --> 00:19:28.430
on the front end and we're going be

00:19:28.430 --> 00:19:33.195
sending a get request for the stories. We're

00:19:33.195 --> 00:19:35.275
going to be using the built in function

00:19:35.275 --> 00:19:38.155
in utilities. Js, which is the get function,

00:19:38.955 --> 00:19:40.875
and we want to call this function on

00:19:40.875 --> 00:19:47.500
the apistories endpoint. And I want you guys

00:19:47.500 --> 00:19:50.620
to think for a second, what parameters, if

00:19:50.620 --> 00:19:52.380
any, do we want to pass into this

00:19:52.380 --> 00:19:55.420
function for the specific endpoint? Is there any

00:19:55.420 --> 00:19:57.580
kind of information that will help us refine

00:19:57.580 --> 00:20:01.395
what stories we'll be requesting, or will we

00:20:01.395 --> 00:20:04.355
just be sending a request to the endpoint

00:20:04.515 --> 00:20:09.235
with no parameters? Remember that get returns a

00:20:09.235 --> 00:20:12.675
promise, so you want to use dot then

00:20:12.675 --> 00:20:17.790
so that we can actually run some logic

00:20:17.790 --> 00:20:19.390
on the data that we retrieve from the

00:20:19.390 --> 00:20:21.870
server. We also want to organize these stories

00:20:21.870 --> 00:20:23.870
from earliest to latest, and you may want

00:20:23.870 --> 00:20:28.670
to use the reverse method for arrays. I'll

00:20:28.670 --> 00:20:29.950
give you guys a second to think about

00:20:29.950 --> 00:20:45.525
how we would probably you guys a second

00:20:45.525 --> 00:20:32.965
about we structure this get request in the

00:20:32.965 --> 00:20:34.965
front end, so we would probably be in

00:20:36.565 --> 00:20:44.620
e dot JSX. This should be gone. I'll

00:20:44.620 --> 00:20:45.660
give you guys a minute to think about

00:20:45.660 --> 00:20:47.500
how we could probably structure this request, and

00:20:47.500 --> 00:20:49.900
then since you guys have never actually sent

00:20:49.900 --> 00:20:52.140
a GET request, I'll do it, and you

00:20:52.140 --> 00:21:31.865
guys can just follow along. Alright, so I'll

00:21:31.865 --> 00:21:35.545
start implementing it. So, in our front end,

00:21:35.545 --> 00:21:37.065
we're in the front end, we're in feed

00:21:37.065 --> 00:21:38.985
dot jsx, we want to send a request

00:21:38.985 --> 00:21:43.590
to the endpoint apistories, so we get our

00:21:43.590 --> 00:21:46.870
get function, then we specify our endpoint, we're

00:21:46.870 --> 00:21:51.910
going to be using apistories, and this is

00:21:51.910 --> 00:21:54.070
going to return we don't know how long

00:21:54.070 --> 00:21:55.750
this request is going take, so it returns

00:21:55.750 --> 00:21:58.925
a promise, and so we use dot then,

00:21:59.325 --> 00:22:01.565
and dot then takes in a callback function,

00:22:05.405 --> 00:22:08.045
and our callback function as input will retrieve

00:22:08.045 --> 00:22:13.750
the stories, so our story objects we passed

00:22:13.750 --> 00:22:16.710
into dot then, the dot then callback function.

00:22:17.830 --> 00:22:19.670
And so what kind of logic do we

00:22:19.670 --> 00:22:22.630
want to run after we retrieve this data

00:22:22.630 --> 00:22:27.145
from our server? Well, we just want to

00:22:27.145 --> 00:22:32.985
set these stories as the current stories on

00:22:32.985 --> 00:22:39.065
our website, so we use set stories, story

00:22:39.065 --> 00:22:43.840
objects. Remember how we mentioned how we want

00:22:43.840 --> 00:22:46.640
these stories to be rendered from earliest to

00:22:46.640 --> 00:22:49.760
latest? So we'd want to use a dot

00:22:49.760 --> 00:22:54.445
reverse method, so we initialize a variable called

00:22:54.445 --> 00:22:58.605
reversed stories, and this is going be equal

00:22:58.605 --> 00:23:09.050
to story objects dot reverse. And then, we

00:23:09.050 --> 00:23:13.050
simply pass those reverse stories into setStories. Is

00:23:13.050 --> 00:23:19.210
that all? And we can look at the

00:23:19.210 --> 00:23:23.325
solution, so that you guys can parse it

00:23:23.325 --> 00:23:28.365
and if you guys have any questions, please

00:23:28.365 --> 00:23:31.405
feel free to ask or get on the

00:23:31.405 --> 00:23:32.765
queue so that somebody else can help you.

00:23:38.660 --> 00:23:45.460
Sorry? Yeah, so the thing about this is

00:23:45.460 --> 00:23:47.300
that we can actually name it whatever endpoint

00:23:47.300 --> 00:23:50.415
we want, since we're going to implement this

00:23:50.415 --> 00:23:53.295
endpoint in our backend next. So right now,

00:23:53.295 --> 00:23:54.975
we're just going to call it api. Stories

00:23:54.975 --> 00:23:57.215
and pretend we're going to be receiving these

00:23:57.215 --> 00:24:00.655
stories from the backend, but after this, we're

00:24:00.655 --> 00:24:02.335
actually going to create the endpoint that sends

00:24:02.335 --> 00:24:17.425
those stories back. One question, some questions for

00:24:17.425 --> 00:24:20.465
you guys is, what HTTP request is being

00:24:20.465 --> 00:24:23.905
sent here, and why do we use dot

00:24:23.905 --> 00:24:26.065
then? And I'll go over those right now.

00:24:26.145 --> 00:24:28.065
So just turn and talk to your neighbor.

00:24:30.065 --> 00:24:31.500
Yeah, Give you guys like a minute for

00:24:31.500 --> 00:24:38.700
that. Hey guys, take one minute. If you're

00:24:38.700 --> 00:24:40.620
not sitting near anyone who you can talk

00:24:40.620 --> 00:24:43.100
to, go find someone, at least one person.

00:24:43.100 --> 00:24:44.460
You can be in groups of like two,

00:24:44.460 --> 00:24:47.075
three, or more if you want, and introduce

00:24:47.075 --> 00:24:49.075
yourself and sit next to them. Because I

00:24:49.075 --> 00:24:50.915
think with some of this like more tough

00:24:50.915 --> 00:24:52.915
conceptual stuff, it's actually really helpful to talk

00:24:52.915 --> 00:24:55.555
it out with someone. So one minute to

00:24:55.555 --> 00:24:57.235
find someone if you don't have anyone. Go.

00:25:06.020 --> 00:25:07.780
So I hear it's starting to get a

00:25:07.780 --> 00:25:10.740
little bit quiet. So the HTTP request that

00:25:10.740 --> 00:25:13.620
is being sent here is a get request,

00:25:13.620 --> 00:25:15.595
you can see, because we have the get

00:25:15.595 --> 00:25:18.555
function, and then why do we use dot

00:25:18.555 --> 00:25:21.355
then? Well, like any request to a server,

00:25:21.435 --> 00:25:23.435
it may take an unspecified amount of time,

00:25:23.675 --> 00:25:27.210
and we don't want to wait for that

00:25:27.210 --> 00:25:29.610
request to be fulfilled. We want to be

00:25:29.610 --> 00:25:30.890
able to render the rest of our website

00:25:30.890 --> 00:25:33.530
and not worry about whether that data is

00:25:34.650 --> 00:25:37.450
retrieved or not. And so we create a

00:25:37.450 --> 00:25:41.450
promise, and dot then handles that promise, or

00:25:41.450 --> 00:25:45.505
the contents of that after it's resolved. After

00:25:45.505 --> 00:25:47.745
it's resolved, after we retrieve our stories, we

00:25:47.745 --> 00:25:49.345
reverse them and then we set them as

00:25:49.345 --> 00:25:56.630
the stories on our website. So now, we're

00:25:56.630 --> 00:25:58.470
actually going to send back those stories from

00:25:58.470 --> 00:26:00.710
the back end. So we're in the back

00:26:00.710 --> 00:26:07.750
end. Yeah. So if you guys remember the

00:26:07.750 --> 00:26:11.190
request and response objects from the previous lecture,

00:26:11.270 --> 00:26:14.355
we're going to be using those objects to

00:26:14.355 --> 00:26:17.715
send and receive data from the back end.

00:26:18.035 --> 00:26:20.515
And so a little bit about rec and

00:26:20.515 --> 00:26:23.955
res. So rec stores the incoming request, and

00:26:23.955 --> 00:26:25.555
we use the rec object to access the

00:26:25.555 --> 00:26:28.380
information in the HTTP request the server received.

00:26:28.620 --> 00:26:31.740
As I showed you guys earlier, inside the

00:26:31.740 --> 00:26:35.260
HTTP request there's the target URL parameters, header

00:26:35.260 --> 00:26:36.780
of the body and then the type of

00:26:36.780 --> 00:26:41.915
request that it is. For the queries, for

00:26:41.915 --> 00:26:43.595
all of our query parameters, we're going be

00:26:43.595 --> 00:26:45.515
storing them in rec dot query, or we'll

00:26:45.515 --> 00:26:46.875
be able to access them in rec dot

00:26:46.875 --> 00:26:50.395
query. This is for a get request, this

00:26:50.395 --> 00:26:52.235
is where we'll be storing our parameters. Then

00:26:52.235 --> 00:26:54.900
for post request, we'll be storing all the

00:26:54.900 --> 00:26:56.260
information we want to post to our back

00:26:56.260 --> 00:27:01.140
end inside of req. Body. Then for response,

00:27:02.180 --> 00:27:04.100
res is your server's response and we use

00:27:04.100 --> 00:27:05.780
a res object to send a response from

00:27:05.780 --> 00:27:07.745
the server back to the front end. And

00:27:07.745 --> 00:27:10.065
so the information that we're sending back is

00:27:10.065 --> 00:27:11.665
going to be the status code and then

00:27:11.665 --> 00:27:15.025
whatever information our front end requested. And so

00:27:15.025 --> 00:27:17.745
we'd have a res dot status function and

00:27:17.745 --> 00:27:19.105
then we just put in whatever status code

00:27:19.105 --> 00:27:21.460
we want to send back and then res

00:27:21.460 --> 00:27:23.860
dot send will send back the data that

00:27:24.180 --> 00:27:31.940
our front end requested. Okay. And so now

00:27:31.940 --> 00:27:34.260
we want to create the endpoint API slash

00:27:34.260 --> 00:27:37.115
stories. What does this route need to do?

00:27:37.115 --> 00:27:38.875
We just need to send back all the

00:27:38.875 --> 00:27:42.075
stories to the front end. How can we

00:27:42.075 --> 00:27:44.235
access all the stories? Well, if you guys

00:27:44.235 --> 00:27:48.155
remember, we move back all the stories information

00:27:48.155 --> 00:27:50.350
from our front end to our back end

00:27:50.350 --> 00:27:52.110
and just stored it in a variable called

00:27:52.110 --> 00:28:00.750
stories. And so I'll code that out right

00:28:00.750 --> 00:28:04.475
now. So we go to the server folder,

00:28:04.475 --> 00:28:07.595
server dot js, and then we want to

00:28:07.595 --> 00:28:11.355
implement our get endpoint. So we have our

00:28:11.355 --> 00:28:15.595
server abstracted out as the app variable, this

00:28:15.595 --> 00:28:18.640
is our express server. We do app dot

00:28:18.640 --> 00:28:21.040
get and this sets our endpoint, and the

00:28:21.040 --> 00:28:23.520
endpoint that we want to use is apistories.

00:28:25.840 --> 00:28:28.080
And this app dot get function also takes

00:28:28.080 --> 00:28:34.265
in a callback function, and this callback function

00:28:34.265 --> 00:28:39.225
takes in a rec and a response. And

00:28:39.225 --> 00:28:41.225
so, we simply want to send back the

00:28:41.225 --> 00:28:44.025
stories to our front end. And so what

00:28:44.025 --> 00:28:47.330
we do is res dot send all of

00:28:47.330 --> 00:28:54.770
our stories. And that's pretty much it. I'll

00:28:54.770 --> 00:28:57.890
keep this up here for a minute. If

00:28:57.890 --> 00:28:59.170
you guys can turn and talk to your

00:28:59.170 --> 00:29:02.045
neighbor and talk about like what this code

00:29:02.045 --> 00:29:04.605
is doing, that would be great, and then

00:29:04.605 --> 00:29:06.045
if you guys have any questions, I'll be

00:29:06.045 --> 00:29:36.505
here. Sorry. Can you say that? You didn't?

00:30:50.290 --> 00:30:52.850
Alright, can I get a thumbs up if

00:30:52.850 --> 00:30:58.015
we're all good? Good, we're good? Okay, cool.

00:30:58.175 --> 00:30:59.935
I saw that most of you guys tried

00:30:59.935 --> 00:31:02.175
to test this out already, and you guys

00:31:02.175 --> 00:31:04.415
got an internal server error or something like

00:31:04.415 --> 00:31:07.375
that, and that's because we're not actually running

00:31:07.375 --> 00:31:10.190
our back end yet. I mentioned earlier that

00:31:10.350 --> 00:31:12.670
in order to get our front end React

00:31:12.670 --> 00:31:17.550
files, we run npm run dev, and we

00:31:17.550 --> 00:31:19.390
need to do a similar command in order

00:31:19.390 --> 00:31:22.575
to run our back end. Open up two

00:31:22.575 --> 00:31:24.895
terminals and run npm start in one, and

00:31:24.895 --> 00:31:27.375
then npm run dev in the other. And

00:31:27.375 --> 00:31:29.055
then check out localhost five thousand one 70

00:31:29.055 --> 00:31:37.800
three. Run NPM install, and I think maybe

00:31:37.800 --> 00:32:00.260
that will help. That will fix it. And

00:32:00.260 --> 00:32:01.780
if you guys have your website out, like

00:32:01.780 --> 00:32:05.860
you can Oh. Oh, we can post stuff

00:32:05.860 --> 00:32:08.420
and our comments can be posted as well.

00:32:17.785 --> 00:32:22.425
Yeah, whatever. But if we refresh, all these

00:32:22.425 --> 00:32:26.905
posts still disappear and that's because whenever we

00:32:26.905 --> 00:32:35.280
post information, we're updating it on our local

00:32:35.280 --> 00:32:38.720
state, but we actually sending it to our

00:32:38.720 --> 00:32:41.520
backend. That's why we need to create a

00:32:41.520 --> 00:32:43.440
post request and then a post endpoint for

00:32:43.440 --> 00:32:45.755
our backend, so that we can send that

00:32:45.755 --> 00:32:48.075
post to our backend and our backend just

00:32:48.715 --> 00:32:51.435
appends it to the list that stores our

00:32:51.435 --> 00:32:53.835
stories. And so that's what we're gonna do

00:32:53.835 --> 00:32:58.475
next. Before that, does anybody have any questions?

00:33:02.020 --> 00:33:08.900
Alright. So if you guys can run these

00:33:08.900 --> 00:33:44.555
commands, that would be good. Okay, so now

00:33:44.555 --> 00:33:46.635
that we're on the same page, we're gonna

00:33:46.635 --> 00:33:50.075
implement our post endpoint and our post request

00:33:50.075 --> 00:33:57.390
on the front. For post requests, we want

00:33:57.390 --> 00:33:59.950
to store whatever content we're sending to our

00:33:59.950 --> 00:34:02.990
back end in rec dot body. And we

00:34:02.990 --> 00:34:06.030
can actually specify specific attributes for certain information

00:34:06.030 --> 00:34:09.230
that we're sending to the back end, similar

00:34:09.230 --> 00:34:14.695
to how we send down props and those

00:34:14.695 --> 00:34:17.575
props can be used as attributes, whenever we

00:34:17.575 --> 00:34:22.375
send information using get and post, we can

00:34:22.375 --> 00:34:25.815
specify certain key value pairs so that we

00:34:25.815 --> 00:34:36.750
have organized data. We're gonna implement the get

00:34:36.750 --> 00:34:39.870
and post, I mean rather, the get request

00:34:39.870 --> 00:34:42.030
or the post request and the post endpoint

00:34:42.030 --> 00:34:48.695
in the opposite order. Our get request, we

00:34:48.695 --> 00:34:50.455
sent a get request and then we implemented

00:34:50.615 --> 00:34:52.455
or rather, we implemented the get request and

00:34:52.455 --> 00:34:54.855
then we implemented the get endpoint. Now we're

00:34:54.855 --> 00:34:56.215
going to do the opposite. We're going to

00:34:56.215 --> 00:34:58.740
make the post endpoint and then create the

00:34:58.740 --> 00:35:01.620
post request from our front end. And so

00:35:01.780 --> 00:35:04.100
you can do whichever order you guys prefer,

00:35:04.260 --> 00:35:07.220
whichever is more intuitive to you, but we'll

00:35:07.220 --> 00:35:09.060
just show you that the order doesn't matter.

00:35:09.060 --> 00:35:11.380
As long as you have both the post

00:35:11.700 --> 00:35:13.855
request and the post endpoint, you'll be good.

00:35:17.135 --> 00:35:20.895
So an example would be like, hello, here's

00:35:20.895 --> 00:35:25.615
a new story, meow, and then our back

00:35:25.615 --> 00:35:28.495
end receives that post and adds it to

00:35:28.495 --> 00:35:36.090
our stories variable, and then usually, like, we

00:35:36.090 --> 00:35:38.490
return the post that we made, just so

00:35:38.490 --> 00:35:41.930
that our front end knows that the post

00:35:41.930 --> 00:35:48.145
was successfully added. So if you guys can

00:35:48.385 --> 00:35:50.545
so this is why we tested out weblab.

00:35:50.545 --> 00:35:54.305
Isexample yesterday. Can you guys go to weblab.

00:35:54.305 --> 00:35:57.985
Isexample and then open up the network tab,

00:35:57.985 --> 00:36:01.160
and then try posting something on that website,

00:36:01.320 --> 00:36:06.760
and find, your specific HTTP request in the

00:36:06.760 --> 00:37:34.550
networks tab. Oh, yeah. Yeah, turn and talk

00:37:34.550 --> 00:37:35.910
to the person next to you so you

00:37:35.910 --> 00:37:40.455
guys can reach an agreement on what they

00:37:40.455 --> 00:38:42.805
should be building with. Alright. Cool. And so

00:38:42.805 --> 00:38:46.325
I'll do it with you guys. So open

00:38:46.325 --> 00:38:53.570
inspect, open up network, and, I'll post something.

00:38:53.730 --> 00:39:02.005
Hello web lab. And I get my, here's

00:39:02.005 --> 00:39:05.765
the HTTP request that I sent to the

00:39:05.765 --> 00:39:09.925
example server. So it's a post request, status

00:39:09.925 --> 00:39:15.630
200, so successfully handled. And then you can

00:39:15.630 --> 00:39:17.950
see that my response, they just send me

00:39:17.950 --> 00:39:20.990
back the post that I created. Hello, web

00:39:20.990 --> 00:39:26.350
lab. Yeah, and so if you look at

00:39:26.350 --> 00:39:30.775
the answer, you see that's post request and

00:39:30.775 --> 00:39:33.255
our back end server is going be 3000

00:39:33.255 --> 00:39:35.335
and we're going to be using the endpoint

00:39:35.335 --> 00:39:38.135
apistory, which is the same endpoint that they

00:39:38.135 --> 00:39:41.430
used on the example server. We're gonna be

00:39:41.430 --> 00:39:45.350
sending posts through the request body, and then

00:39:45.670 --> 00:39:47.430
our back end's gonna send us a status

00:39:47.430 --> 00:39:50.070
code and then that same post back to

00:39:50.070 --> 00:40:03.445
us. Alright. And so, whenever we are dealing

00:40:03.445 --> 00:40:08.405
with requests and responses, the way that we

00:40:08.405 --> 00:40:11.520
access information for a post request would be

00:40:11.520 --> 00:40:14.800
in rec dot body, and as I mentioned

00:40:14.800 --> 00:40:16.800
earlier, we can add our own attributes to

00:40:16.800 --> 00:40:20.640
rec dot body, just by passing in a

00:40:20.640 --> 00:40:23.280
key value pair as input to our parameters.

00:40:24.125 --> 00:40:27.885
So here I define a variable, which is

00:40:27.885 --> 00:40:29.485
just a key value pair, which is content

00:40:29.485 --> 00:40:32.285
and web development class and competition. And then

00:40:32.285 --> 00:40:34.525
we pass this in through post, which takes

00:40:34.525 --> 00:40:38.420
in an endpoint and then parameters, and then

00:40:38.420 --> 00:40:40.420
we run some callback function. It doesn't really

00:40:40.420 --> 00:40:45.540
matter right here. And then, in our backend,

00:40:45.620 --> 00:40:47.860
this should be app, don't worry about router.

00:40:48.900 --> 00:40:51.620
We have our endpoint slash web lab and

00:40:53.195 --> 00:40:56.235
it should be API, and we take in

00:40:56.235 --> 00:40:59.595
a rec and a response, and we simply

00:40:59.595 --> 00:41:01.755
print web development class in a competition by

00:41:01.755 --> 00:41:10.230
accessing the valuerec.body.content. So now, we're gonna be

00:41:10.230 --> 00:41:14.390
in the backend, implementing our post endpoint. So

00:41:16.470 --> 00:41:19.510
I'll be doing that with you guys right

00:41:19.510 --> 00:41:22.525
now. So we are in the back end,

00:41:22.525 --> 00:41:29.085
so we're gonna be in server.js. And so

00:41:29.325 --> 00:41:32.445
we have our server app, and endpoint that

00:41:32.445 --> 00:41:34.685
we want to make is a post endpoint,

00:41:35.480 --> 00:41:38.040
and we're going to name this endpoint apistory,

00:41:38.040 --> 00:41:42.040
since we're posting a story. And the callback

00:41:42.040 --> 00:41:48.520
function will take in a rec and a

00:41:48.520 --> 00:41:52.675
res, And so what information do we want

00:41:52.675 --> 00:41:56.915
to get from our rec? Let's suppose that

00:41:57.315 --> 00:42:02.755
we pass in, really we can do whatever

00:42:02.755 --> 00:42:05.600
we want here. So let's say our story

00:42:05.600 --> 00:42:08.400
is gonna be equal to request body, since

00:42:08.400 --> 00:42:10.800
it's a post request, and let's just say

00:42:10.800 --> 00:42:12.640
it's the attribute that we make is the

00:42:12.640 --> 00:42:17.600
story. So since we're posting this, we're gonna

00:42:17.600 --> 00:42:19.280
want to add this to our data structure,

00:42:19.280 --> 00:42:22.315
which is our array of stories. And so

00:42:22.315 --> 00:42:25.515
we simply get stories and we push our

00:42:25.515 --> 00:42:33.410
story onto our stories array. And at the

00:42:33.410 --> 00:42:35.890
end, we want to send back this story

00:42:35.890 --> 00:42:38.850
to our friend to tell them, okay, we

00:42:38.850 --> 00:42:41.410
successfully added your story to our database of

00:42:41.410 --> 00:42:46.610
stories. We do res dot send story, new

00:42:46.610 --> 00:43:01.960
story. Okay. So now, I'll let you I'll

00:43:01.960 --> 00:43:03.160
put it up on the screen so that

00:43:03.160 --> 00:43:05.080
you guys can parse it for a second,

00:43:05.080 --> 00:43:08.200
and like the previous slides, please turn around

00:43:08.200 --> 00:43:10.840
and talk to a partner, and talk about

00:43:10.840 --> 00:43:20.165
what this code is doing. Sorry? Oh, I

00:43:20.165 --> 00:46:05.905
see. So it sounds like you guys got

00:46:05.905 --> 00:46:12.065
it. Most of you guys' questions, they're really

00:46:12.065 --> 00:46:16.465
design questions. It's a little bit weird to

00:46:15.830 --> 00:46:18.230
implement the endpoint first and then send the

00:46:18.230 --> 00:46:20.470
post request or send the get request first

00:46:20.470 --> 00:46:25.190
and then implement the endpoint. So hopefully, after

00:46:25.190 --> 00:46:26.790
all of this, you guys will understand, oh,

00:46:27.935 --> 00:46:31.455
whether we send information through rec.body.content or rec.

00:46:31.455 --> 00:46:33.775
Body, it's really up to you and what

00:46:33.775 --> 00:46:36.335
you guys want to send through the parameters

00:46:36.335 --> 00:46:39.855
in a get or post request. It's really

00:46:39.855 --> 00:46:44.980
all up to you guys. And so now

00:46:44.980 --> 00:46:47.140
we're actually going to send a post request

00:46:47.380 --> 00:46:54.740
to our back end. And so we want

00:46:54.740 --> 00:46:56.260
to send a post request to the endpoint

00:46:56.260 --> 00:46:59.825
that we made, and our endpoint is apistory,

00:47:00.145 --> 00:47:02.145
and so we're currently in the front end.

00:47:04.465 --> 00:47:07.585
What do we send as a parameter? Well,

00:47:08.065 --> 00:47:10.945
if we don't send anything else, how is

00:47:10.945 --> 00:47:12.970
our back end going to know what post

00:47:12.970 --> 00:47:15.690
we want to post? We're going to be

00:47:15.690 --> 00:47:22.090
sending a post through our parameters. Let's go

00:47:22.090 --> 00:47:30.755
to feed dot JSX, and we're gonna be

00:47:30.755 --> 00:47:33.395
posting our new story inside of the callback

00:47:33.395 --> 00:47:36.915
function add new story. And so just for

00:47:36.915 --> 00:47:39.715
some context, to know what add new story

00:47:39.715 --> 00:47:43.460
is doing, let's see where it's being passed

00:47:43.460 --> 00:47:49.780
into. Down here in our return statement for

00:47:49.780 --> 00:47:52.340
feed, we see that we're returning a div

00:47:52.340 --> 00:47:54.500
with a new story object, and then all

00:47:54.500 --> 00:47:56.100
of our story objects that we want to

00:47:56.100 --> 00:48:01.695
render. So this new story object is just

00:48:02.495 --> 00:48:05.935
let's see. It's just like the post, this

00:48:05.935 --> 00:48:09.375
post new story object with the submit button.

00:48:10.280 --> 00:48:12.120
And so we're passing in our add new

00:48:12.120 --> 00:48:17.160
story function into that comment, I mean, sorry,

00:48:17.160 --> 00:48:20.920
that component, and so if you want to

00:48:20.920 --> 00:48:23.405
see where it's actually being called, we can

00:48:23.405 --> 00:48:29.165
open up new story input, new post input

00:48:29.965 --> 00:48:34.685
dot JSX, and you can see whenever we

00:48:34.685 --> 00:48:39.930
post a new story, or rather, we make

00:48:39.930 --> 00:48:42.490
another callback function called add story and inside

00:48:42.490 --> 00:48:44.970
of that function we call add new story.

00:48:46.250 --> 00:48:49.850
And so we pass this function down as

00:48:50.490 --> 00:48:54.685
a function handler for on submit. So it's

00:48:54.685 --> 00:48:56.765
a callback function add story. Whenever we click

00:48:56.765 --> 00:48:59.805
submit, we call that function, with our input

00:48:59.805 --> 00:49:02.525
being whatever text we have in our text

00:49:02.525 --> 00:49:06.220
box. And so we make our story, got

00:49:06.220 --> 00:49:09.260
a story right here, and then we pass

00:49:09.260 --> 00:49:11.180
it into add new story. So as you

00:49:11.180 --> 00:49:13.420
do some context, we're passing in a story

00:49:13.420 --> 00:49:17.900
object into add new story, and so let's

00:49:17.900 --> 00:49:20.540
implement our post request to the back end.

00:49:21.995 --> 00:49:27.515
So we know that we're going be posting,

00:49:27.835 --> 00:49:32.475
sending a post request to the endpoint apistory.

00:49:33.355 --> 00:49:40.410
And the callback function that sorry, this is

00:49:40.410 --> 00:49:42.330
the friend, so we're going to be the

00:49:42.330 --> 00:49:44.970
post function is going be returning a promise,

00:49:45.210 --> 00:49:48.170
and so we're going to want to actually

00:49:48.170 --> 00:49:53.255
handle the promise using dot then, and remember

00:49:53.255 --> 00:49:55.655
how we send back the post back to

00:49:55.655 --> 00:49:57.495
our front end, so just to confirm that

00:49:57.495 --> 00:50:00.455
it was actually added, and so we can

00:50:00.455 --> 00:50:08.880
have our new story object. And we're going

00:50:08.880 --> 00:50:15.120
to just add this to our state, and

00:50:15.120 --> 00:50:22.605
so instead of value, we're doing new story

00:50:23.165 --> 00:50:31.850
object. And so that's pretty much it, and

00:50:31.850 --> 00:50:33.690
I'll leave the solution up here, just so

00:50:33.690 --> 00:50:36.250
you guys can turn to a neighbor and

00:50:36.250 --> 00:50:41.850
talk about what it's actually doing. Oh, wait,

00:50:41.850 --> 00:50:45.130
oh yeah. No, no, no, no. I think,

00:50:48.885 --> 00:50:54.805
Oh yeah. And so our story is just

00:50:54.805 --> 00:50:56.325
going be value, and so we pass in

00:50:56.325 --> 00:54:20.740
value as our parameter. Thank you. It seems

00:54:20.740 --> 00:54:22.340
like you guys are pretty much done with

00:54:22.340 --> 00:54:24.020
this. Just like one thing I wanted to

00:54:24.020 --> 00:54:28.340
quickly mention is that if we do NPM

00:54:28.340 --> 00:54:32.125
run start, or rather, we're gonna test it

00:54:32.125 --> 00:54:36.925
now, and so, if you guys weren't able

00:54:36.925 --> 00:54:39.725
to finish it, go to go run these

00:54:39.725 --> 00:54:43.085
commands, and then we'll be able to, run

00:54:43.085 --> 00:54:58.935
our back end and our front end. And

00:54:58.935 --> 00:55:00.935
we can see that once we post something,

00:55:00.935 --> 00:55:05.015
post a story, if we refresh, that story

00:55:05.015 --> 00:55:10.135
persists, and that's really good. And, one thing

00:55:10.135 --> 00:55:12.295
I wanted to quickly mention is that, like,

00:55:13.580 --> 00:55:16.860
this is rendering our stories, and whenever we

00:55:16.860 --> 00:55:19.580
request this website, we're just requesting the stories,

00:55:19.580 --> 00:55:21.580
and then we put them into components and

00:55:21.580 --> 00:55:24.060
then render them. But if we just put

00:55:24.060 --> 00:55:27.685
in the URL, or rather the endpoint that

00:55:27.685 --> 00:55:32.885
we created, like, for getting stories, like apistories,

00:55:37.045 --> 00:55:39.765
3,000 because it's the back end, we'll just

00:55:39.765 --> 00:55:41.605
get all of our story objects that we

00:55:41.605 --> 00:55:45.280
created. And so that's pretty neat, except they

00:55:45.280 --> 00:55:50.320
won't be, like, rendered correctly. Okay. And I'll

00:55:50.320 --> 00:55:53.520
hand it off to, Hong to finish the

00:55:53.520 --> 00:56:11.095
rest of the workshop. Thank you, guys. Alright.

00:56:11.495 --> 00:56:14.220
Real quick, I'm just going to review everything

00:56:14.220 --> 00:56:15.660
that we just did in steps one and

00:56:15.660 --> 00:56:17.580
two, because it was kind of a lot,

00:56:17.980 --> 00:56:19.980
and just show you how the flow goes

00:56:19.980 --> 00:56:23.340
from beginning to end in the code and

00:56:23.340 --> 00:56:28.775
in our HTTP requests. So if we pull

00:56:28.775 --> 00:56:30.535
up our code, first we're gonna talk about

00:56:30.535 --> 00:56:33.095
get stories, which we implemented in step one.

00:56:33.575 --> 00:56:37.495
And we make the get request inside the

00:56:37.495 --> 00:56:39.895
use effect of our feed. That's inside the

00:56:39.895 --> 00:56:43.180
use effect because we want to know, we

00:56:43.180 --> 00:56:45.820
wanna do this as soon as our website

00:56:45.820 --> 00:56:54.220
loads. And then in server.js oh gosh. Lucas,

00:56:54.220 --> 00:56:57.435
why does your computer not drag? Can I

00:56:57.435 --> 00:57:03.595
can I That's kind of a problem? Yeah.

00:57:04.715 --> 00:57:12.640
Okay. Can we split oh my god. Okay.

00:57:12.640 --> 00:57:14.240
Fine. I'll just I'll just change tabs. That's

00:57:14.240 --> 00:57:18.240
awkward, but it's fine. Oh, this one? Oh,

00:57:19.120 --> 00:57:23.815
thank goodness. Okay. Sorry. We're moving along. So

00:57:23.815 --> 00:57:29.735
here, you notice that we have okay. Here

00:57:29.735 --> 00:57:30.855
in the front end is when we make

00:57:30.855 --> 00:57:33.095
the get request, and then here in the

00:57:33.095 --> 00:57:35.415
back end is where we define what the

00:57:35.415 --> 00:57:38.750
get request does. And so here, what we're

00:57:38.750 --> 00:57:40.350
doing is we start off by making a

00:57:40.350 --> 00:57:43.230
get request to slash api slash stories. No

00:57:43.230 --> 00:57:45.070
parameters. And if you look at the slide

00:57:45.070 --> 00:57:49.150
here, the content of the http request is

00:57:49.150 --> 00:57:51.375
right there. And then you can see that

00:57:51.375 --> 00:57:53.695
if you open up, if you run npm

00:57:53.695 --> 00:57:56.255
start, npm run dev, you open up Catbook,

00:57:56.335 --> 00:57:58.335
and then you inspect element and go to

00:57:58.335 --> 00:58:00.655
the network tab. As we saw earlier, you

00:58:00.655 --> 00:58:02.415
can see what the requests actually are. You'll

00:58:02.415 --> 00:58:04.950
be able to see the request being sent,

00:58:04.950 --> 00:58:08.150
like, the top of the slide. And then

00:58:08.150 --> 00:58:10.710
in our server file, we decide how we're

00:58:10.710 --> 00:58:12.710
going to handle that request. So in the

00:58:12.710 --> 00:58:16.230
server, we say, okay, anytime the app gets

00:58:16.310 --> 00:58:19.055
a request to api slash stories, we're going

00:58:19.055 --> 00:58:21.775
to send back the stories. And then the

00:58:21.775 --> 00:58:23.935
response gets sent that looks like the response

00:58:23.935 --> 00:58:28.175
on the bottom of this slide. And then,

00:58:28.495 --> 00:58:30.895
once we receive that on the front end,

00:58:31.320 --> 00:58:33.160
we're gonna take what we received from the

00:58:33.160 --> 00:58:35.000
back end, the story objects, which you can

00:58:35.000 --> 00:58:39.960
see there, and then we take it and

00:58:39.960 --> 00:58:43.815
set the React state equal to it, And

00:58:43.815 --> 00:58:45.815
that renders the front end based on oh

00:58:45.815 --> 00:58:48.695
my goodness, I hate Macs. Based on what

00:58:48.695 --> 00:58:51.975
we received from the back end. So that

00:58:51.975 --> 00:58:56.370
was get stories. That was step one. Step

00:58:56.370 --> 00:58:58.930
two, we implemented the functionality to post a

00:58:58.930 --> 00:59:01.730
new story. And so this was also in

00:59:01.730 --> 00:59:06.210
feed. And then this is the corresponding back

00:59:06.210 --> 00:59:10.115
end code. So here in feed, send a

00:59:10.115 --> 00:59:13.715
story using value. Now what is value? Well,

00:59:13.795 --> 00:59:16.515
this add new story function gets called every

00:59:16.515 --> 00:59:19.955
single time that we, hit the submit button,

00:59:19.955 --> 00:59:21.315
like we type something in and hit the

00:59:21.315 --> 00:59:24.310
submit button to post a new story. You'll

00:59:24.310 --> 00:59:27.270
see that value, this function gets called using

00:59:27.750 --> 00:59:31.590
inside the new post input component. And so

00:59:31.590 --> 00:59:34.150
we create a new JavaScript object with the

00:59:34.150 --> 00:59:36.805
content, which is what we typed in. Now,

00:59:36.805 --> 00:59:38.885
the creator name is just anonymous user, and

00:59:38.885 --> 00:59:41.525
then some ID. And so this is going

00:59:41.525 --> 00:59:45.045
to be what value the parameter here is

00:59:45.045 --> 00:59:46.805
equal to. It's just a JavaScript object that

00:59:46.805 --> 00:59:49.605
represents our new story, and we send that

00:59:49.605 --> 00:59:53.060
off in the to the post api story

00:59:53.300 --> 00:59:55.380
endpoint, as you can see at the top

00:59:55.380 --> 00:59:57.460
of the slide. That's a request being sent.

00:59:58.580 --> 01:00:01.700
And then we wrote on the server what

01:00:01.700 --> 01:00:04.020
we wanna do when we receive a request

01:00:04.020 --> 01:00:06.100
to the slash api oh my goodness. Slash

01:00:06.100 --> 01:00:09.475
api story endpoint here. So when we receive

01:00:09.475 --> 01:00:14.915
this kind of request, we add the the

01:00:14.915 --> 01:00:16.675
story that we just received to the end

01:00:16.675 --> 01:00:18.515
of our stories array, so we just store

01:00:18.515 --> 01:00:20.515
it in our database, or not database, but,

01:00:20.515 --> 01:00:22.915
like, in our server, and then we send

01:00:22.915 --> 01:00:25.570
that new story back. And so you can

01:00:25.570 --> 01:00:27.410
see the response here on the bottom of

01:00:27.410 --> 01:00:30.130
the slide. It just responds with the story,

01:00:30.130 --> 01:00:31.650
the exact same story that got sent to

01:00:31.650 --> 01:00:34.290
the front end as, like, a confirmation. Here

01:00:34.450 --> 01:00:36.290
here's, here's the story that you just added.

01:00:37.675 --> 01:00:39.275
And then on the front end, once we

01:00:39.275 --> 01:00:43.355
receive this response, we take that response and

01:00:43.355 --> 01:00:46.315
we add it to our array, our list

01:00:46.315 --> 01:00:47.755
of stories that we're holding on the front

01:00:47.755 --> 01:00:49.435
end so that we can actually display it.

01:00:50.650 --> 01:00:52.410
So that was just a summary of what

01:00:52.410 --> 01:00:54.490
we did in steps one and two. And

01:00:54.490 --> 01:00:56.010
now we're going to repeat that and do

01:00:56.010 --> 01:00:58.410
basically the same thing for comments. But before

01:00:58.410 --> 01:01:01.130
we do that, everyone, stand up. I'm not

01:01:01.130 --> 01:01:02.570
gonna do anything crazy this time. We're just

01:01:02.570 --> 01:01:12.945
gonna stretch. Alright, you can do a little

01:01:12.945 --> 01:01:19.910
reach up. Twist to one side. Twist to

01:01:19.910 --> 01:01:23.190
the other side. Back to center, lean to

01:01:23.190 --> 01:01:30.150
one side. Lean to the other side. Okay.

01:01:30.150 --> 01:01:31.990
Everyone can sit back down. Now I'll pass

01:01:31.990 --> 01:02:04.195
it off to Hong. Hello. Can you guys

01:02:04.195 --> 01:02:09.715
hear me fine in the back? Okay, cool.

01:02:12.275 --> 01:02:18.420
Yeah. So we're going to probably speed it

01:02:18.420 --> 01:02:23.300
up a bit when we, because just for

01:02:23.300 --> 01:02:26.260
the sake of time. But, how do I

01:02:26.820 --> 01:02:30.335
Yeah, there we go. Our next step is

01:02:30.335 --> 01:02:34.575
to do the slash API comments, get endpoint

01:02:34.575 --> 01:02:37.215
and, make the get request from the front

01:02:37.215 --> 01:02:40.255
end for the comments. So before we do

01:02:40.255 --> 01:02:42.335
that, make sure you're caught up by following

01:02:42.335 --> 01:02:44.950
the steps up in the top right corner.

01:02:46.630 --> 01:03:34.085
I'll do that here. All right. So currently

01:03:34.085 --> 01:03:35.765
we have our comments hard coded in card.

01:03:35.765 --> 01:03:40.485
Jsx, as you can see right here in

01:03:40.485 --> 01:03:46.390
our code, in card. Jsx. And right now,

01:03:47.190 --> 01:03:51.670
because we have our comments hard coded, if

01:03:51.670 --> 01:03:55.910
we try to post a story and refresh,

01:03:55.910 --> 01:03:57.830
it'll save there, but the comments don't save

01:03:57.830 --> 01:03:59.275
yet. So we also want to move this

01:03:59.275 --> 01:04:00.635
to our back end so we can do

01:04:00.635 --> 01:04:07.835
the same thing. Yeah. So let's move the

01:04:07.835 --> 01:04:11.035
data to our server. We've already done this

01:04:11.035 --> 01:04:25.160
once. So I'll just do it again. Yeah.

01:04:25.160 --> 01:04:50.350
Go for it. I think filtering through comments

01:04:50.350 --> 01:04:52.910
is actually a pretty fast thing, especially once

01:04:52.910 --> 01:04:54.590
we transition to a database, which we'll be

01:04:54.590 --> 01:04:56.990
able to do that operation really quickly, like

01:04:56.990 --> 01:04:59.285
the filtering thing where you filter for comments

01:04:59.285 --> 01:05:02.325
under a specific story basically. So right now

01:05:02.325 --> 01:05:04.805
we'll code our server so that it just

01:05:04.805 --> 01:05:06.725
has a list of all the comments. And

01:05:06.725 --> 01:05:08.165
then whenever you want the comments under a

01:05:08.165 --> 01:05:11.525
specific one, just filter for them. But databases

01:05:11.525 --> 01:05:13.365
actually are really fast at doing this basically.

01:05:13.830 --> 01:05:16.150
So once you move to a database, the

01:05:16.150 --> 01:05:29.385
efficiency is less of a concern. Cool. So

01:05:29.385 --> 01:05:34.665
I just copy pasted from card. Jsx into

01:05:34.665 --> 01:05:44.190
server. Js. And yeah. Now that the comments

01:05:44.190 --> 01:05:45.390
are in the back end, we need the

01:05:45.390 --> 01:05:46.990
front end to request them. So we need

01:05:46.990 --> 01:05:49.550
to set up something pretty similar from or

01:05:49.550 --> 01:05:52.190
similar to what we just did for stories.

01:05:54.270 --> 01:06:05.025
Except there's one catch which is that we

01:06:05.025 --> 01:06:07.905
want to filter only the comments that are

01:06:07.905 --> 01:06:09.345
under a specific story, which is what I

01:06:09.345 --> 01:06:12.930
just talked about. So here you can see

01:06:12.930 --> 01:06:16.610
that earlier we were taking the comments and

01:06:18.450 --> 01:06:20.690
then we were filtering it for the comments

01:06:20.690 --> 01:06:24.675
such that the comment parent matched the props.

01:06:24.675 --> 01:06:26.835
Id, which is basically the story ID that

01:06:26.835 --> 01:06:29.715
we passed out. So we want to do

01:06:29.715 --> 01:06:31.635
the same thing on the server side, which

01:06:31.635 --> 01:06:33.635
means that the client needs to ask the

01:06:33.635 --> 01:06:36.355
server which story it wants the comments for

01:06:36.355 --> 01:06:38.275
basically. And to do that we're going to

01:06:38.275 --> 01:06:45.280
need to use rec. Query. So there's kind

01:06:45.280 --> 01:06:49.280
of three parts to a GET request that

01:06:49.280 --> 01:06:53.745
we've gone over basically. But for a query,

01:06:53.745 --> 01:06:55.345
just want to show what that looks like

01:06:55.585 --> 01:06:59.265
when you pass in a query into a

01:06:59.265 --> 01:07:04.145
GET basically. So let's say we used GETAPIWebLab

01:07:04.145 --> 01:07:05.745
as our endpoint and then we pass in

01:07:05.745 --> 01:07:09.530
this query with some content. First, the query

01:07:09.530 --> 01:07:15.050
gets transformed into our URL as part of

01:07:15.050 --> 01:07:16.890
the URL. So it'll be part of our

01:07:16.890 --> 01:07:21.130
URL where it sets content as the parameter

01:07:21.130 --> 01:07:23.405
that we passed in. And then it'll hit

01:07:23.405 --> 01:07:29.085
our backend. So this URL will basically hit

01:07:29.085 --> 01:07:31.085
the endpoint in our backend that is labeled

01:07:31.085 --> 01:07:36.080
slash API slash web lab. And on the

01:07:36.080 --> 01:07:38.240
back end, when we want to retrieve our

01:07:38.640 --> 01:07:42.960
query content, we can just print out or

01:07:42.960 --> 01:07:45.680
if we console. Logquery dot content here, it'll

01:07:45.680 --> 01:07:50.875
retrieve the content parameter from the URL that

01:07:50.875 --> 01:07:55.195
we passed in basically. If console. Log here

01:07:55.195 --> 01:07:58.075
we would get web development class accommodation which

01:07:58.075 --> 01:08:03.760
is what we passed in. So first step,

01:08:03.760 --> 01:08:05.920
we're going to start by doing the slash

01:08:05.920 --> 01:08:17.415
API slash comments endpoint. So here, just as

01:08:17.415 --> 01:08:20.855
a review, we are basically asking for the

01:08:20.855 --> 01:08:25.095
comments under a specific story and then we

01:08:25.095 --> 01:08:29.590
get back the response from Express or from

01:08:29.590 --> 01:08:31.590
our back end saying, here's the comments under

01:08:31.590 --> 01:08:33.430
that post. And for now we're going to

01:08:33.430 --> 01:08:38.630
be focusing on the response. Before that, we're

01:08:38.630 --> 01:08:45.325
going to do one more exercise in weblab.

01:08:45.325 --> 01:08:49.325
Isexample. So let's use the Network tab and

01:08:50.205 --> 01:08:54.320
open weblab. Isexample and then fill in the

01:08:54.320 --> 01:08:57.040
request method, the URL, status code, the response

01:08:57.040 --> 01:09:00.399
body. So one more time. And this time,

01:09:00.400 --> 01:09:02.240
I think what you should focus on is

01:09:02.240 --> 01:09:04.320
what's going on in the URL and how

01:09:04.320 --> 01:10:56.325
the query gets transformed into the URL. Can

01:10:56.325 --> 01:10:59.125
I get fingers for how many minutes you

01:10:59.125 --> 01:11:09.205
need left? One minute. Okay. Cool. Yeah. We're

01:11:08.660 --> 01:11:11.540
just going to move on. Basically what happens

01:11:14.740 --> 01:11:18.900
so again, you'll probably see a different URL

01:11:18.900 --> 01:11:23.460
when you saw this in Catbook example. But

01:11:23.035 --> 01:11:26.155
we're using 3000 as our server, that's going

01:11:26.155 --> 01:11:28.155
to be our base URL. We're using the

01:11:28.155 --> 01:11:33.275
slash apicomments endpoint. And then the important part

01:11:33.275 --> 01:11:35.355
here is that there's a parent and we

01:11:35.355 --> 01:11:37.515
feed in the ID of the parent, basically,

01:11:39.460 --> 01:11:42.580
which is then met with the response from

01:11:42.580 --> 01:11:45.940
the server with a status code 200 and

01:11:45.940 --> 01:11:50.660
then the response body which is the list

01:11:50.660 --> 01:11:53.785
of the comments that we have. So we

01:11:53.785 --> 01:12:01.785
have two comments here and yeah. Cool? Okay.

01:12:01.785 --> 01:12:06.700
So let's create our GET request for this

01:12:06.700 --> 01:12:13.100
story. We're going to be in server. Js.

01:12:13.100 --> 01:12:20.460
What? How do we sorry. We're doing our

01:12:20.460 --> 01:12:24.445
GET request first which means that we'll be

01:12:24.445 --> 01:12:26.125
in card.JSX. So we're on our front end

01:12:26.125 --> 01:12:28.125
right now. Currently we're coding our front end

01:12:28.125 --> 01:12:30.445
React code which is getting comments for that

01:12:30.445 --> 01:12:41.860
story. So we're gonna be in card.JSX And

01:12:41.940 --> 01:12:43.380
you'll see here we have a to do

01:12:43.380 --> 01:12:44.740
for step three, fetch the comments from the

01:12:44.740 --> 01:12:49.780
server. In order to do that, we'll model

01:12:49.780 --> 01:12:51.540
our code pretty similarly to what we did

01:12:51.540 --> 01:12:57.885
in feed, which pings apistories. Here we'll ping.

01:12:57.885 --> 01:13:01.085
Here we'll do a GET request from apicomments.

01:13:02.845 --> 01:13:04.765
And we're going to need it to pass

01:13:04.765 --> 01:13:08.620
in a parameter which is our parent, as

01:13:08.620 --> 01:13:13.740
we just saw. And what is the parent

01:13:13.740 --> 01:13:16.780
ID that we have? Well, we actually already

01:13:16.780 --> 01:13:18.780
have our old code here which uses props

01:13:18.780 --> 01:13:21.905
to ID to get the story ID that

01:13:21.905 --> 01:13:24.065
we pass in or the story ID that

01:13:24.065 --> 01:13:26.305
we check for to see if the parent

01:13:26.305 --> 01:13:31.105
matches basically. So let's use this props dot

01:13:31.105 --> 01:13:35.265
ID to represent our parent ID. And then

01:13:36.860 --> 01:13:38.780
that's it for the GET request. Now we

01:13:38.780 --> 01:13:39.900
need to figure out what we do once

01:13:39.900 --> 01:13:42.220
we get the response back from the server.

01:13:42.460 --> 01:13:45.260
So to do that we use .then. And

01:13:49.365 --> 01:13:50.805
For the response, we need to write a

01:13:50.805 --> 01:13:53.205
callback function to figure out what logic we

01:13:53.205 --> 01:13:56.245
do. So that will look like when we

01:13:56.245 --> 01:14:09.200
get a comments response, when we get a

01:14:09.200 --> 01:14:12.800
comments response, we take that comments response and,

01:14:13.680 --> 01:14:29.935
we set comments as and then we can

01:14:29.935 --> 01:14:48.395
delete this line. Cool. Great. Yeah, so that's

01:14:48.395 --> 01:14:52.875
the solution up there. I'll give you like

01:14:52.875 --> 01:14:55.755
thirty seconds to like read through that and

01:14:55.755 --> 01:14:58.795
make sure that makes sense and catch up.

01:15:00.920 --> 01:15:02.360
Let me know if you have any questions.

01:15:24.575 --> 01:15:31.780
Now that we have our API request written

01:15:32.180 --> 01:15:33.940
on the front end, we need to actually

01:15:33.940 --> 01:15:37.700
implement that on the back end. So that's

01:15:37.700 --> 01:15:40.660
the okay here you go portion of this

01:15:40.660 --> 01:15:45.345
step where we are writing whatever is going

01:15:45.345 --> 01:15:47.185
on in our backend, which is in server.

01:15:47.185 --> 01:15:51.585
Js. So currently, we have the list of

01:15:51.585 --> 01:15:53.825
comments already moved to our backend and now

01:15:53.825 --> 01:15:56.705
we just need to implement the logic that

01:15:56.705 --> 01:16:02.190
occurs when we ping this endpoint. Cool. So

01:16:02.190 --> 01:16:05.150
we've included the parent stories like underscore ID

01:16:05.150 --> 01:16:08.030
prop as the parent parameter when we made

01:16:08.030 --> 01:16:11.985
the GET request from the front end. So

01:16:11.985 --> 01:16:13.825
how can we access this parent ID from

01:16:13.825 --> 01:16:17.105
the back end? Well, because it's included as

01:16:17.105 --> 01:16:20.545
the parent, we can just get the parent

01:16:20.545 --> 01:16:24.305
parameter of something. And that something is going

01:16:24.305 --> 01:16:31.900
to be rec dot query because, like, if

01:16:31.900 --> 01:16:35.500
you remember, for GET requests, we're gonna be

01:16:35.500 --> 01:16:37.660
using get rec dot query to get the

01:16:37.660 --> 01:16:39.260
parameters that we pass in from the front

01:16:39.260 --> 01:16:45.795
end basically. Cool. After that, we need to

01:16:45.795 --> 01:16:47.635
filter out only the comments that are the

01:16:47.635 --> 01:16:51.795
children of that specific story, I. E. Where

01:16:51.795 --> 01:16:54.115
the parent matches the parent that we actually

01:16:54.115 --> 01:16:57.150
pass in. Finally, we want to send those

01:16:57.150 --> 01:17:00.110
comments back to the front end. Yeah. So

01:17:00.270 --> 01:17:05.870
what that's going to look like is defining

01:17:05.870 --> 01:17:10.055
a GET request, app dot get, and the

01:17:10.055 --> 01:17:12.055
endpoint is going to be slash API slash

01:17:12.055 --> 01:17:20.775
comments. And then our input is going to

01:17:20.775 --> 01:17:24.360
be a rec res. And then what we

01:17:24.360 --> 01:17:31.800
want to do is find our parent. So

01:17:34.280 --> 01:17:40.035
const parent equals rec dot query dot parent.

01:17:46.275 --> 01:17:48.035
Rec dot query represents the query that we

01:17:48.035 --> 01:17:49.715
got and then we take the parent parameter.

01:17:49.795 --> 01:17:52.010
So this should be whatever parent that we

01:17:52.010 --> 01:17:53.930
passed in from the front end. Now we

01:17:53.930 --> 01:17:55.210
want to filter out the comments that are

01:17:55.210 --> 01:17:57.370
children of that story. To do that, we

01:17:57.370 --> 01:18:00.090
can look at what is happening in never

01:18:00.090 --> 01:18:04.485
mind, I deleted the line. Okay. Well, we

01:18:04.485 --> 01:18:06.485
can do what was previously in card dot

01:18:06.485 --> 01:18:10.805
JSX, which is the dot filter on our

01:18:10.805 --> 01:18:13.365
comments list. So we can take our comments

01:18:14.085 --> 01:18:24.280
and filter them out using the dot filter

01:18:24.760 --> 01:18:30.920
method, and we feed in a callback function,

01:18:31.800 --> 01:18:39.655
which takes in a comment. And for each

01:18:39.655 --> 01:18:46.660
comment, we check whether or not that comment's

01:18:46.660 --> 01:18:50.500
parent is equal to the parent that we

01:18:50.500 --> 01:18:55.380
have passed in. Cool. Okay. Finally, now that

01:18:55.380 --> 01:18:56.820
we have our filtered comments, we want to

01:18:56.820 --> 01:18:58.499
send those comments back to the front end.

01:18:58.660 --> 01:19:02.895
So that is just we can do that

01:19:02.895 --> 01:19:10.415
just using res dot send filter comments. And

01:19:10.415 --> 01:19:13.695
hopefully, if we go to our front end

01:19:13.695 --> 01:19:16.220
now, we can see our comments. Okay. Yeah.

01:19:16.220 --> 01:19:19.900
Cool. Everything's working. We can maybe post a

01:19:19.900 --> 01:19:47.580
comment. So here's code here's the solution code

01:19:47.580 --> 01:19:50.060
up here which you'll notice looks a little

01:19:50.060 --> 01:19:54.700
shorter than the code that is here. They're

01:19:54.700 --> 01:19:59.180
actually equivalent. I just wrote it in more

01:19:59.180 --> 01:20:02.895
lines over here but all we needed to

01:20:02.895 --> 01:20:06.015
do was filter out and then we used

01:20:06.015 --> 01:20:10.975
a shorthand notation for a function to just

01:20:10.975 --> 01:20:17.170
map each comment to true whether true if

01:20:17.170 --> 01:20:18.610
the parent matched up and then false if

01:20:18.610 --> 01:20:21.890
the parent didn't match up. So we can

01:20:21.890 --> 01:20:24.050
kind of shorthand the callback function that we

01:20:24.050 --> 01:20:26.130
wrote here basically. And then everything kind of

01:20:26.130 --> 01:20:43.225
fits into a single line. If you put

01:20:43.225 --> 01:20:46.550
the two like parts side by side, this

01:20:46.550 --> 01:20:54.310
is what we have. So we're making the

01:20:54.310 --> 01:20:58.390
GET request from the client side. We're processing

01:20:58.390 --> 01:21:00.150
the GET request on the server side, which

01:21:00.150 --> 01:21:03.655
filters the comments. And then after that we

01:21:03.655 --> 01:21:05.975
do the dot then, which is taking whatever

01:21:05.975 --> 01:21:07.815
response we got from the server and then

01:21:07.815 --> 01:21:12.455
setting our comments to that comment response. Cool.

01:21:12.455 --> 01:21:22.220
Any questions? Okay. I'll be moving on. We

01:21:22.220 --> 01:21:23.740
actually just tested it out. So yeah, it

01:21:23.740 --> 01:21:29.825
does work in our browser. Now if we

01:21:29.825 --> 01:21:32.785
refresh right now, the Meow comment that I

01:21:32.785 --> 01:21:36.305
made is gone. So our next step is

01:21:36.305 --> 01:21:38.465
to make sure that those comments are persisted

01:21:38.465 --> 01:21:41.345
on the server by actually posting our comments

01:21:41.345 --> 01:21:46.240
to the server. So back on the same

01:21:46.240 --> 01:22:13.140
page, let's follow these commands. Okay, so we

01:22:13.140 --> 01:22:21.460
see to dos for step four. And we'll

01:22:21.460 --> 01:22:26.180
be doing those which are implementing the post

01:22:26.180 --> 01:22:28.885
endpoint and then also making the post request

01:22:28.885 --> 01:22:33.685
from the front end for that endpoint. Yeah,

01:22:33.685 --> 01:22:39.285
so as an example, maybe we make the

01:22:39.740 --> 01:22:42.700
comment, please post this new comment under the

01:22:42.700 --> 01:22:46.380
story that we give. And then the response

01:22:46.380 --> 01:22:51.980
is, okay, sure, you've done it. And we'll

01:22:51.980 --> 01:22:54.535
also send the response back with the comment

01:22:54.535 --> 01:22:57.655
just to confirm that everything matches up on

01:22:57.655 --> 01:23:04.935
the server and the client. I think we

01:23:04.935 --> 01:23:12.260
will skip this part honestly? Yeah. Okay. We'll

01:23:12.260 --> 01:23:14.580
skip this part because it's like basically the

01:23:14.580 --> 01:23:18.260
same as posting a comment which we've already

01:23:18.260 --> 01:23:20.980
done except we're posting a story. So the

01:23:20.980 --> 01:23:23.725
only difference is that the request URL is

01:23:23.725 --> 01:23:26.365
gonna be slash api slash comment instead and

01:23:26.365 --> 01:23:28.045
the request body is going to contain a

01:23:28.045 --> 01:23:30.605
comment. Other than that, it's gonna look basically

01:23:30.605 --> 01:23:36.200
the same as slash api slash story. So

01:23:36.920 --> 01:23:43.000
hopefully this step is actually pretty simple. In

01:23:43.000 --> 01:23:44.520
order to post our comments to the back

01:23:44.520 --> 01:23:45.800
end, we're going to need a post endpoint

01:23:45.800 --> 01:23:47.000
on the back end and a post request

01:23:47.000 --> 01:23:51.765
on the front end. If you remember, for

01:23:51.925 --> 01:23:53.605
post requests, we are going to use rec.

01:23:53.605 --> 01:23:58.565
Body to whatever content that we send on

01:23:58.565 --> 01:24:06.000
the back end. Yeah. So the main difference

01:24:06.000 --> 01:24:09.840
here is that when we do our back

01:24:09.840 --> 01:24:11.840
end code, we're going to be using rec

01:24:11.840 --> 01:24:14.080
dot body to retrieve whatever content that we

01:24:14.080 --> 01:24:17.015
sent through. So if our body that we

01:24:17.015 --> 01:24:20.535
sent through post had one content parameter, then

01:24:20.535 --> 01:24:22.295
we can retrieve that using rec. Body dot

01:24:22.295 --> 01:24:27.495
content. Yeah. So the first thing, the first

01:24:27.495 --> 01:24:28.855
part of this that we're gonna do is

01:24:28.855 --> 01:24:34.310
posting comments, which is the post request to

01:24:34.310 --> 01:24:41.590
the back end. So what information do we

01:24:41.590 --> 01:24:43.030
want to send through rec. Body? Want to

01:24:43.030 --> 01:24:44.470
send the comment that we plan on posting.

01:24:45.725 --> 01:24:49.885
Comment data that we want to post is

01:24:49.885 --> 01:24:53.165
passed in through the add new comment in

01:24:53.165 --> 01:24:57.085
car.JSX. So let's dig a little deeper into

01:24:57.085 --> 01:25:01.270
here. Let's add new comment function that we

01:25:01.270 --> 01:25:04.390
have here. It's being called or first of

01:25:04.390 --> 01:25:10.195
all, it's being passed into comments block which

01:25:10.195 --> 01:25:13.075
then passes it as a prop into new

01:25:13.075 --> 01:25:21.395
comment. And new comment calls add new comment

01:25:21.395 --> 01:25:25.370
with this JSON object here, which represents a

01:25:25.370 --> 01:25:27.770
comment. It has a content, a creator name,

01:25:27.770 --> 01:25:32.650
an ID, and a parent. So our new

01:25:32.650 --> 01:25:34.730
comment component is going to be calling add

01:25:34.730 --> 01:25:38.435
new comment with an object that represents a

01:25:38.435 --> 01:25:42.515
comment. So whatever is being passed in to

01:25:42.755 --> 01:25:45.315
add new comment here is we can basically

01:25:45.315 --> 01:25:48.195
think of it as a comment already. So

01:25:48.195 --> 01:25:49.555
we don't have to do anything with it.

01:25:49.555 --> 01:25:52.030
All we need to do is post it

01:25:52.030 --> 01:25:56.190
to the server. So in order to do

01:25:56.190 --> 01:26:06.265
that, we will be making a post request.

01:26:06.425 --> 01:26:15.705
So postapicomments is the endpoint we want to

01:26:15.705 --> 01:26:25.930
use. And then the body that we want

01:26:25.930 --> 01:26:31.055
to give is just literally this comment object.

01:26:31.535 --> 01:26:36.575
And now after we receive the request from

01:26:36.575 --> 01:26:38.735
the server, what we want to do is

01:26:38.735 --> 01:26:41.055
take the comment object that we get back

01:26:45.110 --> 01:26:59.615
and set comments to our original comments list

01:26:59.615 --> 01:27:07.455
with this common object added on. Well, so

01:27:07.455 --> 01:27:21.030
there's the solution. Yeah. Okay. One question that

01:27:21.030 --> 01:27:23.590
I'll give you like a minute to discuss

01:27:23.830 --> 01:27:28.175
is why we need to set this comment

01:27:28.175 --> 01:27:30.815
inside why we need this call set comments

01:27:30.815 --> 01:27:34.895
inside the dot then rather than just outside

01:27:34.895 --> 01:27:38.255
of why we can't just do the set

01:27:38.255 --> 01:27:40.600
comments outside the dot then. Because even outside

01:27:40.600 --> 01:27:43.960
the dot then we have this comment parameter

01:27:43.960 --> 01:27:45.880
that we're being passed into the function. So

01:27:45.880 --> 01:27:47.080
why do we do this inside the dot

01:27:47.080 --> 01:27:49.160
then rather than outside? Maybe you turn to

01:27:49.160 --> 01:28:44.680
talk and discuss for a bit. Okay. I'm

01:28:44.680 --> 01:28:46.680
just going to bring it back because we

01:28:46.680 --> 01:28:48.985
do need to keep moving forward. But, basically

01:28:48.985 --> 01:28:51.145
the reason why we put this, set comments

01:28:51.145 --> 01:28:52.665
inside the dot then, why we call it,

01:28:52.665 --> 01:28:54.185
why we call set comments inside dot then

01:28:54.185 --> 01:28:56.345
is because if we call that outside then

01:28:56.345 --> 01:28:58.825
there's a chance that our promise doesn't fulfill

01:28:58.825 --> 01:29:01.760
but we still call set comments. And what

01:29:01.920 --> 01:29:03.840
would that mean? Let's say like the server

01:29:03.840 --> 01:29:06.320
like crashed or errored when we were trying

01:29:06.320 --> 01:29:08.720
to post this comment, then we would still

01:29:08.720 --> 01:29:10.320
be showing it on our own front end

01:29:10.320 --> 01:29:12.400
but on the back end, it would actually

01:29:12.400 --> 01:29:15.805
like not exist. And this is a problem

01:29:15.805 --> 01:29:17.725
because generally we want whatever is showing on

01:29:17.725 --> 01:29:19.805
our website to reflect what's actually in the

01:29:19.805 --> 01:29:26.365
server. So we want be showing users, hey,

01:29:26.365 --> 01:29:29.160
you posted this post or you posted this

01:29:29.160 --> 01:29:32.760
comment successfully when in fact their comment actually

01:29:32.760 --> 01:29:36.040
didn't get posted successfully. So in general, we

01:29:36.840 --> 01:29:39.880
do these logic inside the .then to make

01:29:39.880 --> 01:29:42.280
sure that we're reflecting what is actually on

01:29:42.280 --> 01:29:48.105
the server basically. Okay. So we've already done

01:29:48.105 --> 01:29:50.505
the post request from the front end. Now

01:29:50.505 --> 01:29:54.745
we to respond to the post request from

01:29:54.745 --> 01:29:56.585
the back end. So again, that's going be

01:29:56.585 --> 01:30:17.695
in server. Js. Cool. So we need to

01:30:17.695 --> 01:30:20.895
add an API route, basically, that correctly responds

01:30:22.175 --> 01:30:26.255
to post request to apicomment. So that is

01:30:26.255 --> 01:30:35.830
this response arrow. Yeah. So it's going to

01:30:35.830 --> 01:30:40.070
look a lot like post slash apistory. Thankfully,

01:30:40.070 --> 01:30:41.475
again, we don't need to do too much

01:30:41.475 --> 01:30:43.635
work here because our comment is actually just

01:30:43.635 --> 01:30:48.995
passed in as the body of our our

01:30:48.995 --> 01:30:52.195
request. So all we need to do is

01:30:52.195 --> 01:30:55.710
basically take rec dot body and that will

01:30:55.710 --> 01:30:57.790
literally be the comment that we want and

01:30:57.790 --> 01:30:59.710
then add it to the comments list. So

01:30:59.710 --> 01:31:04.990
what is that gonna look like? Basically, we'll

01:31:04.990 --> 01:31:06.750
define a post request using app dot post

01:31:09.475 --> 01:31:11.635
And then apicomment is the endpoint that we

01:31:11.635 --> 01:31:16.515
want to define it on. And then taking

01:31:16.515 --> 01:31:19.875
in a request and response object, we want

01:31:19.875 --> 01:31:30.170
to simply get our new comment object, which

01:31:30.170 --> 01:31:33.850
is going to just be rect dot body.

01:31:35.530 --> 01:31:38.010
Then we add the new comments to our

01:31:38.010 --> 01:31:39.965
comments list, which we can do by doing

01:31:39.965 --> 01:31:48.765
comments dot push. New comment. Finally, we send

01:31:48.765 --> 01:31:50.525
it back to our client using res dot

01:31:50.525 --> 01:32:04.965
send. Cool. There's the solution. I'll leave it

01:32:04.965 --> 01:32:11.765
up for just a little bit. So yeah,

01:32:11.765 --> 01:32:13.605
I'll leave the solution up on this screen.

01:32:14.245 --> 01:32:17.205
If you have any questions about it, please

01:32:17.205 --> 01:32:20.400
let us know. In the meantime, I will

01:32:20.400 --> 01:32:24.240
test this on my front end to make

01:32:24.240 --> 01:32:29.600
sure everything is working. If I go here

01:32:29.920 --> 01:32:36.855
and I type, I like dogs. Stories still

01:32:36.855 --> 01:32:40.695
work and let's say underneath here I type

01:32:41.255 --> 01:32:48.080
And then if we refresh, everything is still

01:32:48.080 --> 01:32:51.920
there. So yay, we have made sure that

01:32:51.920 --> 01:32:54.480
these things, made sure that both the stories

01:32:54.480 --> 01:32:57.200
and comments have persisted on the back end

01:32:57.200 --> 01:33:04.055
as well so that when we refresh, when

01:33:04.055 --> 01:33:06.294
we refresh, the things don't go away basically.

01:33:06.375 --> 01:33:17.130
Yeah. Great. Any questions? So yeah, hopefully you

01:33:17.130 --> 01:33:18.410
should be able to also go and check

01:33:18.410 --> 01:33:20.010
and make sure everything is also working in

01:33:20.010 --> 01:33:25.130
your own browser. Are we doing another one?

01:33:47.910 --> 01:33:51.110
Alright. So now we're gonna briefly review everything

01:33:51.110 --> 01:33:53.190
that we just went over in steps three

01:33:53.190 --> 01:33:56.230
and four. And then after that, we'll take

01:33:55.665 --> 01:33:57.025
a quick break, and then we'll move on

01:33:57.025 --> 01:33:59.425
to something a little less brain intensive, more

01:33:59.425 --> 01:34:05.025
chill, more fun. Alright. So let's look again

01:34:05.025 --> 01:34:10.740
at the was everything in feed, Hong? Oh,

01:34:10.740 --> 01:34:13.780
right. Right. Right. Okay. So we have card

01:34:14.500 --> 01:34:20.180
and then split screen with oh, wait. I

01:34:20.180 --> 01:34:25.175
should split screen with server. Can I do

01:34:25.175 --> 01:34:31.575
this? Nope. Oh, I can. Okay. Okay. So

01:34:31.575 --> 01:34:33.255
first, if we wanna get all of the

01:34:33.255 --> 01:34:36.710
comments in step three, what we did was

01:34:36.710 --> 01:34:40.870
we sent a get request to api slash

01:34:40.870 --> 01:34:44.150
comments, and that included some query parameters here.

01:34:44.150 --> 01:34:46.950
So the get request included a query parameter

01:34:46.950 --> 01:34:48.710
that had the parent, which is the story

01:34:48.710 --> 01:34:51.215
that we were posting that comment under. And

01:34:51.215 --> 01:34:54.895
then what that looks like is it sends

01:34:54.895 --> 01:34:56.975
a request to the URL and then it

01:34:56.975 --> 01:34:59.535
adds the query parameters to the URL. So

01:34:59.535 --> 01:35:03.215
we have localhost 3,000 slash api, and that

01:35:03.215 --> 01:35:08.000
should be slash comments, yes. And then question

01:35:08.000 --> 01:35:10.640
mark and then the query parameters. So all

01:35:10.640 --> 01:35:12.800
of that information gets sent in the URL

01:35:12.800 --> 01:35:16.400
because for get requests, they cannot have bodies

01:35:16.635 --> 01:35:18.555
of the request. A get request will only

01:35:18.555 --> 01:35:21.275
have parameters inside the query, inside the URL

01:35:21.275 --> 01:35:25.115
itself. And so after we send that re

01:35:25.275 --> 01:35:28.635
re request here, then the server, we have

01:35:28.635 --> 01:35:31.995
this endpoint, slash api slash comments, that's listening

01:35:32.340 --> 01:35:35.540
for request to slash api slash comments. And

01:35:35.540 --> 01:35:38.740
when it receives one, it takes the comments

01:35:38.740 --> 01:35:40.900
list, filters out all of the ones that

01:35:40.900 --> 01:35:44.180
have that particular parent that we received from

01:35:44.180 --> 01:35:46.825
rec. Query. So this is pulling out the

01:35:46.825 --> 01:35:50.345
value associated with the parent in the http

01:35:50.345 --> 01:35:53.065
get request. And so it takes all of

01:35:53.065 --> 01:35:54.905
those comments and sends them back to the

01:35:54.905 --> 01:35:56.825
front end, and that's the response that you

01:35:56.825 --> 01:35:59.890
see at the bottom of the slide. And

01:35:59.890 --> 01:36:03.570
then on the front end, once as soon

01:36:03.570 --> 01:36:05.330
as we receive that response back from the

01:36:05.330 --> 01:36:08.210
server, then we take the comments that we

01:36:08.210 --> 01:36:11.810
received here and we set the React state

01:36:11.535 --> 01:36:13.375
with it, which allows the front end to

01:36:13.375 --> 01:36:15.935
render based on what we received back from

01:36:15.935 --> 01:36:20.495
the server. That was step three. And then

01:36:20.495 --> 01:36:23.295
finally, in step four, we implemented the functionality

01:36:23.295 --> 01:36:25.375
to send a new comment over to the

01:36:25.375 --> 01:36:28.890
server. And so what we did here is

01:36:29.690 --> 01:36:33.050
add new comment gets called any time you

01:36:33.050 --> 01:36:34.650
type in a thing into the little comment

01:36:34.650 --> 01:36:37.370
box and hit the submit button, and then

01:36:37.370 --> 01:36:39.145
that will pass in the information about a

01:36:39.145 --> 01:36:41.385
comment. And so we're gonna take that information

01:36:41.385 --> 01:36:42.825
about a comment that we have in our

01:36:42.825 --> 01:36:45.225
front end, that was defined in new post

01:36:45.225 --> 01:36:46.985
input. I won't pull it up, but it's

01:36:46.985 --> 01:36:49.305
just a JavaScript object that has the comment

01:36:49.305 --> 01:36:52.825
information. We're gonna take that and send it

01:36:52.825 --> 01:36:57.070
as the request body to the server. Now

01:36:57.070 --> 01:37:00.830
notice here that when we get our request,

01:37:00.990 --> 01:37:03.310
all of that information of the parent is

01:37:03.310 --> 01:37:05.390
in the URL. But then when we do

01:37:05.390 --> 01:37:07.470
a post request, the convention is a little

01:37:07.470 --> 01:37:09.825
bit different. When we do a post request,

01:37:13.425 --> 01:37:15.665
then that is sent not in the URL,

01:37:15.745 --> 01:37:17.665
but inside the body of the request. So

01:37:17.665 --> 01:37:19.425
this is what our HTTP request is going

01:37:19.425 --> 01:37:21.025
to look like to post a new command.

01:37:23.440 --> 01:37:25.360
And then same as before, we have this

01:37:25.360 --> 01:37:28.800
endpoint that's waiting and listening for any request

01:37:28.800 --> 01:37:31.280
to slash api slash comment. This is in

01:37:31.280 --> 01:37:33.200
our back end on server dot j s.

01:37:33.920 --> 01:37:36.000
And then once we receive that, then we're

01:37:36.000 --> 01:37:38.560
going to take the new comment that we

01:37:38.205 --> 01:37:40.125
received. This is rec dot body because it's

01:37:40.125 --> 01:37:41.885
the body of the request, as you see

01:37:41.885 --> 01:37:44.205
up there. And then we're going to add

01:37:44.205 --> 01:37:45.885
it to our comments list that's stored in

01:37:45.885 --> 01:37:48.285
the server, and then send back the comment

01:37:48.285 --> 01:37:49.885
that we just received to the front end.

01:37:49.965 --> 01:37:51.485
And so that's why you see in the

01:37:51.485 --> 01:37:54.380
response, we're sending back the exact same data

01:37:54.380 --> 01:37:56.140
that we received from the front end in

01:37:56.140 --> 01:37:58.540
the first place. And that's just confirming that

01:37:58.540 --> 01:38:02.220
it worked. And then in the front end,

01:38:02.220 --> 01:38:04.860
once we receive the response from the server,

01:38:05.180 --> 01:38:06.940
we take the response that we received from

01:38:06.940 --> 01:38:11.825
the server and set the React state, set

01:38:11.825 --> 01:38:16.065
comments to what it was before, plus that

01:38:16.065 --> 01:38:18.705
additional comment. And so we can display the

01:38:18.705 --> 01:38:21.985
new updated comment list on our front end.

01:38:23.330 --> 01:38:28.210
Any questions on any of that? Cool. Did

01:38:28.210 --> 01:38:31.090
you wanna take over for the last bit?

01:38:40.815 --> 01:38:48.370
Okay. Sorry. I'm a be kinda speedy speedy

01:38:48.370 --> 01:38:51.810
with the last part because we wanna finish

01:38:51.810 --> 01:38:55.010
on time, I think. But, basically, if you

01:38:55.010 --> 01:38:58.610
look into our server.js and we'll only be

01:38:58.610 --> 01:39:01.010
focusing us on our server for server now.

01:39:09.955 --> 01:39:15.155
We have a pretty long server.js file right

01:39:15.155 --> 01:39:19.170
now. Let's make sure we're caught up first

01:39:19.170 --> 01:39:21.250
using, like, get reset hard and then we'll

01:39:21.250 --> 01:39:26.850
check out the next step. Step five. Yeah.

01:39:27.810 --> 01:39:30.605
So we have a pretty long server. Js

01:39:30.605 --> 01:39:32.765
file right now. It's like 120 lines. And

01:39:32.765 --> 01:39:34.925
if we wanted to write more API endpoints,

01:39:35.085 --> 01:39:37.085
those are all and if we wanted to

01:39:37.085 --> 01:39:38.685
write those and they all went into server.

01:39:38.685 --> 01:39:41.565
Js, then it would get a little crowded.

01:39:41.805 --> 01:39:46.130
And this is especially an issue once server.

01:39:46.130 --> 01:39:49.650
Js starts having to also handle things like,

01:39:52.290 --> 01:39:56.130
connecting to our database or like making queries

01:39:56.130 --> 01:39:59.425
to Google Calendar or whatever else you want

01:39:59.425 --> 01:40:00.465
to do. If you all put it in

01:40:00.465 --> 01:40:02.225
one file, this would kind of be a

01:40:02.225 --> 01:40:04.225
nightmare. So what we want to do now

01:40:04.225 --> 01:40:08.065
is basically move some stuff away from server.

01:40:08.065 --> 01:40:11.880
Js. And kind of just like want to

01:40:11.880 --> 01:40:14.040
show how we would do that. If you'll

01:40:14.040 --> 01:40:17.880
notice in our workshop three step five, we

01:40:17.880 --> 01:40:22.760
have made a nice here or sorry, a

01:40:22.760 --> 01:40:25.240
nice file here called API dot js. And

01:40:25.240 --> 01:40:27.775
so our next step is basically going to

01:40:27.775 --> 01:40:30.415
be moving everything from server dot JS that

01:40:30.415 --> 01:40:32.975
is related to our API into this file

01:40:32.975 --> 01:40:35.295
so that we can implement all our endpoints

01:40:35.295 --> 01:40:40.400
over here. The syntax for this is going

01:40:40.400 --> 01:40:42.720
to be app dot use, which is a

01:40:42.720 --> 01:40:47.120
middleware. And we pass in a router, which

01:40:47.120 --> 01:40:52.080
is basically an app object just like const

01:40:52.080 --> 01:40:56.855
app equals express, except it allows us to

01:40:56.855 --> 01:41:04.455
import this object from other files and use

01:41:04.775 --> 01:41:09.570
the endpoints from that file, basically. So let's

01:41:09.570 --> 01:41:13.249
check out the branch, which I already did.

01:41:14.370 --> 01:41:19.410
But I'll move quickly here basically just because

01:41:19.410 --> 01:41:23.535
I want to finish. How this is going

01:41:23.535 --> 01:41:26.415
to work is we're going to move everything

01:41:26.415 --> 01:41:28.895
that is currently in app, which is server.

01:41:28.895 --> 01:41:31.375
Js, into a router. And the reason why

01:41:31.375 --> 01:41:33.535
we do this is mainly for organization and

01:41:33.535 --> 01:41:37.530
modularity. So basically if we organize into different

01:41:37.530 --> 01:41:38.810
files, it'll be a lot more clear where

01:41:38.810 --> 01:41:41.530
things are. And modularity means that we can

01:41:41.530 --> 01:41:43.370
work within a specific file without worrying about

01:41:43.370 --> 01:41:47.530
what's in the other files, basically. So currently,

01:41:47.530 --> 01:41:50.330
just as an example, we have an apitest

01:41:50.330 --> 01:41:52.675
endpoint right now. We want to move it

01:41:55.235 --> 01:41:58.915
to api. Js and we'll have apittest endpoint

01:41:58.915 --> 01:42:06.320
in api. Js instead. So the steps is

01:42:06.320 --> 01:42:07.840
creating a separate file, which we have already

01:42:07.840 --> 01:42:16.080
done, then defining a router for api. Js

01:42:16.080 --> 01:42:28.435
in api. Js. Cool. So that's all we

01:42:28.435 --> 01:42:39.600
need to do there. Next. We want to

01:42:39.680 --> 01:42:41.520
export our router so that our server can

01:42:41.520 --> 01:42:43.600
see it. So that's just going to look

01:42:43.600 --> 01:42:47.725
like module dot exports, which is essentially the

01:42:47.725 --> 01:42:50.845
back end or the back end version of

01:42:50.845 --> 01:42:57.405
export exporting like any function. So if you

01:42:57.405 --> 01:43:01.630
remember like export, export default from the front

01:43:01.630 --> 01:43:03.710
end, this is the version of that that

01:43:03.710 --> 01:43:05.710
we do in the back end. So module

01:43:05.710 --> 01:43:07.630
dot exports equals router will export this so

01:43:07.630 --> 01:43:14.585
that other files can see it. If you

01:43:14.585 --> 01:43:16.425
ever are confused about how we know how

01:43:16.425 --> 01:43:22.825
to do anything, generally you get these things

01:43:22.825 --> 01:43:24.745
by looking up the documentation. So if you

01:43:24.745 --> 01:43:26.185
ever don't know how to do something, you

01:43:26.185 --> 01:43:27.865
can look at the documentation for any help.

01:43:33.480 --> 01:43:37.400
Cool. So the next step is defining the

01:43:37.400 --> 01:43:41.160
middleware to route any API paths over. So

01:43:41.160 --> 01:43:42.280
to do that, we're going to go back

01:43:42.280 --> 01:43:53.275
into server. And we're going to define a

01:43:53.275 --> 01:43:58.690
router, which is just requiring which we do

01:43:58.690 --> 01:44:14.775
by just requiring API. And then the next

01:44:14.775 --> 01:44:22.615
step is to use the router in the

01:44:22.615 --> 01:44:24.855
server, which we do by implementing a middleware.

01:44:24.855 --> 01:44:28.230
So what that's going look like is using

01:44:28.230 --> 01:44:34.390
an app dot use. And we feed in

01:44:34.390 --> 01:44:36.790
this API path, which means that anything which

01:44:36.790 --> 01:44:40.405
starts with slash API will be using this

01:44:40.405 --> 01:44:54.530
router for. Finally, we're going to move everything

01:44:54.530 --> 01:45:09.505
that we've just implemented all into API .JS.

01:45:33.905 --> 01:45:36.225
Okay. So we just literally just copy pasted

01:45:36.225 --> 01:45:40.705
everything that we had in server dot j

01:45:40.705 --> 01:45:54.400
s into app .js. Let's see what this

01:45:54.400 --> 01:45:56.960
looks like. We see that we have this

01:45:57.120 --> 01:46:00.665
app. Getapitest over here. What that turns into

01:46:00.665 --> 01:46:06.505
on the server side is we instead use

01:46:06.505 --> 01:46:09.305
router dot get. And instead of slash api

01:46:09.305 --> 01:46:13.545
slash test, we use slash test because when

01:46:13.545 --> 01:46:16.870
we wrote here const or if app dot

01:46:16.870 --> 01:46:20.230
use slash API, this will route everything that

01:46:20.230 --> 01:46:22.470
starts with slash API over to the router

01:46:22.630 --> 01:46:25.350
and get rid of that slash API tag

01:46:25.350 --> 01:46:27.910
or slash API part of the URL on

01:46:27.910 --> 01:46:33.835
it. So to recap, app turns into router

01:46:33.835 --> 01:46:36.075
because we're now using our router instead of

01:46:37.435 --> 01:46:40.875
our app object. And then anything with this

01:46:40.875 --> 01:46:44.810
slash API tag, we get rid of that

01:46:44.810 --> 01:46:48.570
slash API tag. So let's do this for

01:46:48.570 --> 01:46:58.215
all of them. I'm gonna just replace all

01:46:58.215 --> 01:47:07.015
instances of app with router. Cool. So now

01:47:07.015 --> 01:47:09.655
we're doing router. Get for everything and then

01:47:09.655 --> 01:47:18.500
we'll just delete everything that every single slash

01:47:18.500 --> 01:47:35.745
API at the start of each URL. Cool.

01:47:35.745 --> 01:47:40.430
Okay. That was a little fast. But again,

01:47:40.430 --> 01:47:41.870
if you have any questions about this, just

01:47:41.870 --> 01:47:46.990
come to office hours. Okay. Let's go to

01:47:46.990 --> 01:47:48.750
our front end and see if everything is

01:47:48.750 --> 01:47:52.995
working. Okay, cool. So it looks like everything

01:47:52.995 --> 01:47:54.435
is working. We can try to do a

01:47:54.435 --> 01:48:10.480
few test things. And yeah, okay, cool. Everything

01:48:10.480 --> 01:48:14.160
is working over here. If you check-in server.js,

01:48:14.400 --> 01:48:17.280
we it's a lot shorter now. Now that

01:48:17.280 --> 01:48:25.035
we've moved stuff to API.JS. So in general,

01:48:26.315 --> 01:48:29.195
this kind of syntax is really helpful in

01:48:29.195 --> 01:48:31.275
case you ever want to move stuff that

01:48:31.275 --> 01:48:33.340
you have defined in server. Js to like

01:48:33.340 --> 01:48:37.900
another file basically. So now that we have

01:48:37.900 --> 01:48:40.860
everything in api. Js, any future endpoints that

01:48:40.860 --> 01:48:42.300
we write, we can just put in api.

01:48:42.300 --> 01:48:47.525
Js instead. Okay. You can play around with

01:48:47.525 --> 01:48:48.965
that a little bit if you like, but

01:48:48.965 --> 01:48:52.085
that's the end of my lecture and Lucas',

01:48:52.085 --> 01:48:55.605
so hopefully you guys enjoyed that. Please give

01:48:55.605 --> 01:48:57.685
us feedback at weblub dot in slash feedback.

01:48:58.310 --> 01:49:01.431
Our next lecture will be on databases. So

01:49:01.431 --> 01:49:03.030
I'll see you after a short break and

01:49:03.030 --> 01:49:03.990
maybe an announcement from
