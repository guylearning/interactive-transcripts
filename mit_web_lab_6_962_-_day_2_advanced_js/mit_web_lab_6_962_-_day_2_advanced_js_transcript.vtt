WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 59db1672-b375-4d8f-88ea-8fe203cd6d19
Created: 2025-05-15T20:04:53.548Z
Duration: 1687.9542
Channels: 1

00:00:00.000 --> 00:00:04.000
So a few important announcements before we start.

00:00:04.000 --> 00:00:06.480
As you guys probably have already seen, hopefully

00:00:06.480 --> 00:00:08.720
have already seen, Homework Zero has our setup

00:00:08.800 --> 00:00:11.760
and you should check that out either today

00:00:11.760 --> 00:00:14.125
or tomorrow because by Thursday, we're going to

00:00:14.125 --> 00:00:16.125
need to set up have MongoDB set up

00:00:16.125 --> 00:00:20.445
for our workshop on Thursday. Also, if you're

00:00:20.445 --> 00:00:24.045
on Zoom, our Panopto livestream is hopefully working

00:00:24.045 --> 00:00:26.980
now. If you go to weblab.is/livestream, you should

00:00:26.980 --> 00:00:28.980
be able to go to Panopto where you

00:00:28.980 --> 00:00:31.620
can easily toggle, like, you have multiple screens

00:00:31.620 --> 00:00:33.940
between the video, which will have the whole

00:00:33.940 --> 00:00:37.620
lecture hall, and the different slides, whatever, all

00:00:37.620 --> 00:00:39.305
the computers that we have plugged in. So

00:00:39.305 --> 00:00:40.745
if that's easier for you, feel free to

00:00:40.745 --> 00:00:42.345
use that, but of course, we'll still always

00:00:42.345 --> 00:00:46.425
have the Zoom room. No office hours today,

00:00:46.745 --> 00:00:49.625
but milestone zero, where you form your team,

00:00:49.625 --> 00:00:53.210
lock it on the portal, and submit a

00:00:53.210 --> 00:00:55.930
Google form with 10 ideas for your website.

00:00:56.010 --> 00:00:57.370
It's due on the end of day on

00:00:57.370 --> 00:00:59.610
Wednesday. And reminder that you need to complete

00:00:59.610 --> 00:01:01.690
all of the milestones in order to get

00:01:01.690 --> 00:01:03.610
credit for the class. You be a team

00:01:03.610 --> 00:01:05.290
by yourself, that's fine. We just need to

00:01:05.290 --> 00:01:08.005
submit your milestones. And if you still need

00:01:08.005 --> 00:01:10.645
a team even after our mixer yesterday, feel

00:01:10.645 --> 00:01:12.405
free to check out there's a place on

00:01:12.405 --> 00:01:14.885
Piazza where you can post about it. And

00:01:14.885 --> 00:01:18.245
then, finally, recordings for day one are up

00:01:18.485 --> 00:01:21.310
on YouTube, I think. Sanvid, are the recordings

00:01:21.310 --> 00:01:25.630
from day one up on YouTube? Okay. Sanvid

00:01:25.630 --> 00:01:27.870
is working on recording getting the recordings from

00:01:27.870 --> 00:01:31.550
yesterday up on YouTube. And we will try

00:01:31.550 --> 00:01:35.135
and get quicker in our turnaround time to

00:01:35.135 --> 00:01:36.735
get all of the recordings up on YouTube,

00:01:36.735 --> 00:01:42.175
so hopefully, the day of, or worst case

00:01:42.175 --> 00:01:44.540
day after, we'll have all of the videos

00:01:44.540 --> 00:01:46.300
up. But of course, you can always access

00:01:46.300 --> 00:01:49.500
the slides on the schedule page on our

00:01:49.500 --> 00:01:52.220
website, the schedule tab, or on our Google

00:01:52.220 --> 00:01:54.380
Calendar if you add it to your decal.

00:01:54.620 --> 00:01:57.580
That's probably one of the easiest ways to

00:01:57.660 --> 00:01:59.580
get access to all of the slides and

00:01:59.580 --> 00:02:05.075
videos as as they're up. Alright. Welcome, everyone.

00:02:05.315 --> 00:02:08.195
Everyone looks a little bit sleepy. So hopefully,

00:02:09.235 --> 00:02:11.955
coding will wake you up, question mark. Anyway.

00:02:13.800 --> 00:02:16.680
So the topic of today is we're doing

00:02:16.680 --> 00:02:19.000
a little bit more JavaScript. Yesterday, we just

00:02:19.000 --> 00:02:20.760
blazed through a ton of syntax for all

00:02:20.760 --> 00:02:23.160
the basic JavaScript stuff that you might need

00:02:23.160 --> 00:02:25.000
to know, but today, we're actually going to

00:02:25.000 --> 00:02:27.415
be talking about some things that are going

00:02:27.415 --> 00:02:29.815
to be very important for what we're doing

00:02:29.815 --> 00:02:31.815
in React. We're gonna be talking about callback

00:02:31.815 --> 00:02:34.615
functions and arrays. You are going to see

00:02:34.615 --> 00:02:36.775
this pretty soon later today as we start

00:02:36.775 --> 00:02:39.655
talking about React in our lectures. So let's

00:02:39.655 --> 00:02:43.430
dive in. So yesterday, we talked about how

00:02:43.430 --> 00:02:47.350
you can define a function in JavaScript. We

00:02:47.350 --> 00:02:49.270
have this example of a function that takes

00:02:49.270 --> 00:02:51.670
the temperature in Celsius and converts it to

00:02:51.670 --> 00:02:55.605
Fahrenheit. And we we noted that a function

00:02:55.605 --> 00:02:57.445
is just an input, and then you feed

00:02:57.445 --> 00:02:59.205
it into the body of a function, and

00:02:59.205 --> 00:03:01.605
it produces some kind of output. And so

00:03:01.605 --> 00:03:03.925
the input is in the parentheses, the arrow

00:03:03.925 --> 00:03:06.485
represents feeding it in, and then the output

00:03:06.485 --> 00:03:08.280
is the body of the function, which is

00:03:08.280 --> 00:03:11.160
wrapped in curly braces. So this is what

00:03:11.160 --> 00:03:13.560
a function represents and is stored in memory,

00:03:13.800 --> 00:03:16.600
kind of like that gray little box. But

00:03:16.600 --> 00:03:19.320
then, if we want to give that function

00:03:19.320 --> 00:03:20.765
a name so we can call it, so

00:03:20.765 --> 00:03:22.365
we can do things with it, we need

00:03:22.365 --> 00:03:24.525
to create a variable and set it equal

00:03:24.525 --> 00:03:27.645
to that function. And so this is the

00:03:27.645 --> 00:03:30.445
syntax to do that. We saw this yesterday

00:03:30.445 --> 00:03:34.190
where we have the variable, we're setting the

00:03:34.190 --> 00:03:37.470
variable const Celsius to Fahrenheit equal to just

00:03:37.470 --> 00:03:39.550
that exact same function. And the highlighted part

00:03:39.550 --> 00:03:42.030
is the same as the function definition at

00:03:42.030 --> 00:03:44.670
the top of the slide. Any questions on

00:03:44.670 --> 00:03:47.785
this before I move on? Cool. This is

00:03:47.785 --> 00:03:51.225
all just review from yesterday. And another thing

00:03:51.225 --> 00:03:52.985
we're gonna review from yesterday, because you'll need

00:03:52.985 --> 00:03:54.825
it in a sec, is push and pop

00:03:54.825 --> 00:03:56.985
for arrays. If you have an array, you

00:03:56.985 --> 00:03:58.905
can pop off the end or push a

00:03:58.905 --> 00:04:00.425
new element to the end of the array.

00:04:00.790 --> 00:04:02.630
So given these things, and if you need

00:04:02.630 --> 00:04:05.990
the slides to reference the syntax, feel free

00:04:05.990 --> 00:04:08.070
to pull it up. It's linked on the

00:04:08.070 --> 00:04:11.830
schedule page of our website. Oh, the other

00:04:11.830 --> 00:04:13.270
thing we needed to review is looping through

00:04:13.270 --> 00:04:15.915
an array. So this is the syntax for

00:04:15.915 --> 00:04:20.155
it. It's basically just creating an a variable

00:04:20.155 --> 00:04:21.835
I that will keep track of the index

00:04:21.835 --> 00:04:24.315
of our array, and then we increment that

00:04:24.315 --> 00:04:26.315
every single time we go through the loop,

00:04:26.475 --> 00:04:29.035
and we stop when I is equal to,

00:04:29.035 --> 00:04:31.330
because that's a strictly less than, pets dot

00:04:31.330 --> 00:04:33.810
length. So we go through every single element

00:04:33.810 --> 00:04:38.130
of our array. Okay. So what I'm going

00:04:38.130 --> 00:04:39.970
to ask you guys to do is write

00:04:39.970 --> 00:04:41.490
a function that takes in not just one

00:04:41.490 --> 00:04:44.290
temperature, but a whole array of temperatures, and

00:04:44.290 --> 00:04:46.905
outputs another array that has all of those

00:04:46.905 --> 00:04:50.265
temperatures but converted to Fahrenheit. And you should

00:04:50.265 --> 00:04:53.065
not be mutating or changing the array that

00:04:53.065 --> 00:04:54.665
is passed into the function. You should be

00:04:54.665 --> 00:04:56.585
creating a new one and returning that new

00:04:56.585 --> 00:05:00.250
array. And so you can the ways that

00:05:00.250 --> 00:05:03.210
you could do this are you could honestly

00:05:03.210 --> 00:05:05.450
write your code directly in the browser console

00:05:05.450 --> 00:05:07.450
if you wanted, or you could just open

00:05:07.450 --> 00:05:09.930
up your Versus code, create a new empty

00:05:09.465 --> 00:05:12.265
file with that ends in dot j s,

00:05:12.505 --> 00:05:15.065
write your code there, and then just paste

00:05:15.065 --> 00:05:17.065
it into your browser console and run it

00:05:17.065 --> 00:05:20.585
if you wanna test it. So I'll give

00:05:20.585 --> 00:05:24.600
you guys, like, four minutes to attempt that.

00:05:24.920 --> 00:05:26.520
Again, these slides are linked on the schedule

00:05:26.520 --> 00:05:28.120
if you need to reference the syntax from

00:05:28.120 --> 00:05:33.640
the previous slides. As always, add yourself to

00:05:33.640 --> 00:05:37.635
the queue if you get confused, or just

00:05:37.635 --> 00:05:49.850
flag me down. Zoom people, have you guys

00:05:49.850 --> 00:05:59.210
been able to hear me okay? Yes. Okay.

00:05:59.210 --> 00:08:08.030
Thank you. Give me, a show of fingers,

00:08:08.030 --> 00:08:09.790
one, two, three, four, etcetera. How many minute

00:08:09.870 --> 00:08:13.550
more minutes you think you need? Okay. Cool.

00:08:13.550 --> 00:08:14.990
I will give you guys two more minutes.

00:08:19.915 --> 00:08:21.995
Walk in circles around the lecture hall because

00:08:21.995 --> 00:08:23.275
I have nothing else to do, so flag

00:08:23.275 --> 00:08:24.955
me down if you get confused about anything.

00:09:51.335 --> 00:09:53.655
Alright. For the sake of time, I'm gonna

00:09:53.655 --> 00:09:55.735
pull everyone back together and start coding this

00:09:55.735 --> 00:09:58.550
up. But if you did not finish, no

00:09:58.550 --> 00:10:00.390
worries, you can just follow along with me.

00:10:01.190 --> 00:10:03.030
So I'm just gonna go to my Versus

00:10:03.030 --> 00:10:07.190
Code and create I'll just put this on

00:10:07.190 --> 00:10:11.995
the side. And I'll create a new empty

00:10:11.995 --> 00:10:16.795
JavaScript file. And I'm going to define my

00:10:16.795 --> 00:10:19.595
function. Let's give it a name. Actually, no.

00:10:19.595 --> 00:10:20.715
I won't give it a name right now.

00:10:21.710 --> 00:10:24.430
We'll take in an array of temperatures in

00:10:24.430 --> 00:10:29.870
Celsius, and then we're going to do something

00:10:29.870 --> 00:10:34.030
with it. So first, we want to iterate

00:10:34.030 --> 00:10:36.430
through our array of temperatures in Celsius. And

00:10:36.430 --> 00:10:38.005
how we do that is we use a

00:10:38.005 --> 00:10:39.765
for loop. So we'll say let I equals

00:10:39.765 --> 00:10:43.445
zero, I is less than array Celsius dot

00:10:43.445 --> 00:10:47.445
length, and increment I every time we go

00:10:47.445 --> 00:10:52.390
through the loop. And so now we're going

00:10:52.390 --> 00:10:54.630
to do something with array Celsius at index

00:10:54.630 --> 00:11:00.550
I. But what are we going to do

00:11:00.550 --> 00:11:02.230
with that? Well, we want to convert it

00:11:02.230 --> 00:11:04.790
to Fahrenheit and then add it to a

00:11:04.790 --> 00:11:07.535
new array that we're build. So we'll say

00:11:07.535 --> 00:11:10.895
temp f, that's a singular temperature, is going

00:11:10.895 --> 00:11:13.215
to be what is the formula? The temperature

00:11:13.215 --> 00:11:16.495
in Celsius, which is the element of the

00:11:16.975 --> 00:11:20.930
array Celsius at that index, times nine fifths

00:11:20.930 --> 00:11:27.810
plus 32. And then we wanna add this

00:11:27.810 --> 00:11:32.690
temp f to some kind of array. And

00:11:32.930 --> 00:11:34.865
in order to that, we can just create

00:11:34.865 --> 00:11:36.705
a new array, an empty array, that we'll

00:11:36.705 --> 00:11:39.585
just call array f. And then every time

00:11:39.585 --> 00:11:42.465
we go through the loop, we'll just do

00:11:44.065 --> 00:11:48.390
array f dot push temp f. I think

00:11:48.390 --> 00:11:50.230
that syntax is right. If it's wrong, someone

00:11:50.230 --> 00:11:53.350
can raise their hand and correct me. And

00:11:54.150 --> 00:11:57.430
so we go through why don't you need

00:11:57.430 --> 00:11:59.270
the let in front of array f? I

00:11:59.270 --> 00:12:02.515
do, actually. Actually, I'll call it const because

00:12:02.515 --> 00:12:05.955
we're not going to change the place in

00:12:05.955 --> 00:12:08.515
memory where array f points to, so we'll

00:12:08.515 --> 00:12:12.595
just use const. Thank you for the correction.

00:12:14.000 --> 00:12:16.400
And so now once we're done constructing our

00:12:16.400 --> 00:12:19.280
array f, we are going to return it.

00:12:21.120 --> 00:12:24.240
And I will now give this function a

00:12:24.240 --> 00:12:30.045
name. I'll say const, array Celsius to Fahrenheit

00:12:30.045 --> 00:12:36.605
equals that. And then let's paste this into

00:12:36.605 --> 00:12:39.325
our browser console and see if it works.

00:12:43.850 --> 00:12:46.730
So we can go something like that, and

00:12:46.730 --> 00:12:48.730
then that will define the function. And then

00:12:48.730 --> 00:12:54.665
we'll say, temps c equals, I don't know,

00:12:54.665 --> 00:12:57.785
let's do, like, 20 degrees, 22 around room

00:12:57.785 --> 00:13:01.145
temperature, zero, a hundred, or something like that.

00:13:02.185 --> 00:13:05.065
And say, temps f equals and then we'll

00:13:05.065 --> 00:13:13.770
pass in this array into our function. And

00:13:13.770 --> 00:13:16.810
we get around room temperature, around freezing, around

00:13:16.810 --> 00:13:19.985
boiling. Amazing. So I'll leave this code out

00:13:19.985 --> 00:13:21.825
for a second. Does anyone have any questions

00:13:21.825 --> 00:13:30.065
on the code that we just wrote? Alright.

00:13:30.065 --> 00:13:39.470
Let's move on then. Okay. And this is

00:13:39.470 --> 00:13:42.430
where the formula comes in. So now let's

00:13:42.430 --> 00:13:45.070
say that we want to add some more.

00:13:45.070 --> 00:13:47.735
I have some more operations I wanna do

00:13:47.735 --> 00:13:50.295
on my temperatures. Let's say I want to

00:13:50.295 --> 00:13:52.935
also convert an array of Fahrenheit temperatures to

00:13:52.935 --> 00:13:55.015
Celsius. Or maybe I'm scientific and I wanna

00:13:55.015 --> 00:13:57.335
convert my array of Celsius temperatures to Kelvin.

00:13:58.135 --> 00:14:01.770
How would we do that? Well, you could

00:14:01.770 --> 00:14:05.290
just take this code and copy and paste

00:14:05.290 --> 00:14:06.970
it three times and just change a little

00:14:06.970 --> 00:14:08.410
bit. But if you copy and paste this

00:14:08.410 --> 00:14:10.410
code three times, notice that the only part

00:14:10.410 --> 00:14:12.730
that we're changing is that part that I

00:14:12.730 --> 00:14:14.655
highlighted in orange. The code the rest of

00:14:14.655 --> 00:14:17.455
the code will be exactly the same. So

00:14:17.775 --> 00:14:20.095
ideally, we would want to have some way

00:14:20.095 --> 00:14:23.055
where we can reuse that 90% of the

00:14:23.055 --> 00:14:25.375
code, everything except the part highlighted in orange.

00:14:26.495 --> 00:14:28.630
Turn and talk to someone near you how

00:14:28.630 --> 00:14:41.395
you think you might do that. Okay. I'm

00:14:41.395 --> 00:14:43.715
gonna pull us back together. I'm not sure

00:14:43.715 --> 00:14:45.635
if many people knew the answer because it's

00:14:45.635 --> 00:14:47.875
kind of quick tricky. So okay if you

00:14:47.875 --> 00:14:55.250
didn't. But we use callback functions. So how

00:14:55.250 --> 00:14:57.490
are we gonna use a callback function? Well,

00:14:58.450 --> 00:15:01.170
what we're going to do is we're going

00:15:01.170 --> 00:15:03.170
to write a function that is the general

00:15:03.170 --> 00:15:06.015
version of what we just saw. And so

00:15:06.015 --> 00:15:07.055
what I want you to do is write

00:15:07.055 --> 00:15:09.615
a function that's called modify array, and it'll

00:15:09.615 --> 00:15:11.375
take in two inputs. It'll take in an

00:15:11.375 --> 00:15:13.775
array, but it'll also take in a callback

00:15:13.775 --> 00:15:16.095
function. And then it will return a new

00:15:16.095 --> 00:15:18.495
array, the result of applying the callback function

00:15:18.495 --> 00:15:21.200
to every element of our original array. What

00:15:21.200 --> 00:15:22.400
the heck does that mean? That was a

00:15:22.400 --> 00:15:26.240
lot of words. If I have my modify

00:15:26.240 --> 00:15:28.640
array function and it takes in my array

00:15:28.640 --> 00:15:32.000
and this callback function called transform func, then

00:15:32.000 --> 00:15:34.400
it will apply this function to all the

00:15:34.400 --> 00:15:36.275
elements of the array. If I have call

00:15:36.275 --> 00:15:38.995
modify array on this array of cats, and

00:15:38.995 --> 00:15:41.315
I pass in a function that is called

00:15:41.315 --> 00:15:43.635
hatify, that will take in a cat as

00:15:43.635 --> 00:15:45.635
input and output a cat with a hat,

00:15:46.275 --> 00:15:49.020
then what my modify function will do is

00:15:49.020 --> 00:15:51.900
it will call Hattify on every single one

00:15:51.980 --> 00:15:55.420
of my cats and spit out this array

00:15:55.420 --> 00:15:57.260
at the bottom of the slide, which has

00:15:57.260 --> 00:16:03.195
all of my cats but now Hattified. So

00:16:03.195 --> 00:16:05.435
now I'm going to ask you guys to

00:16:05.435 --> 00:16:08.875
code this function, this modify array function. Mostly

00:16:08.875 --> 00:16:12.875
focus on step one, but if you have

00:16:12.875 --> 00:16:14.810
extra time, you are free to use your

00:16:14.810 --> 00:16:17.370
modify array function and play around with it.

00:16:17.690 --> 00:16:19.450
And on the bottom right of the slide,

00:16:19.450 --> 00:16:21.850
that's the syntax reference for the array Celsius

00:16:21.850 --> 00:16:24.330
to Fahrenheit function that I just wrote earlier.

00:16:26.685 --> 00:16:29.885
So I will give you guys a few

00:16:29.885 --> 00:16:33.325
minutes to attempt this and then talk to

00:16:33.325 --> 00:16:35.005
someone next to you if you get stuck.

00:18:28.835 --> 00:18:32.210
Alright. Hopefully, was enough time. If not, no

00:18:32.210 --> 00:18:36.610
worries. The main, point of having you guys

00:18:36.610 --> 00:18:37.890
code these things is just to get you

00:18:37.890 --> 00:18:39.410
thinking about them. So if you were thinking

00:18:39.410 --> 00:18:44.265
about it, then that's what we want. Alright.

00:18:44.905 --> 00:18:49.305
So basically, to make this general modify array

00:18:49.305 --> 00:18:51.465
function, all we need to do is take

00:18:51.465 --> 00:18:56.585
this and we'll rename it. Oh, I have

00:18:56.585 --> 00:18:58.950
it on the slides. I'll just do that.

00:18:59.030 --> 00:19:02.710
It's easier than coding it. So all of

00:19:02.710 --> 00:19:04.950
the changes that I made were just adding

00:19:04.950 --> 00:19:07.670
in another parameter for the transform function. And

00:19:07.670 --> 00:19:10.470
then instead of doing this very specific calculation

00:19:10.470 --> 00:19:13.285
to convert from Celsius to Fahrenheit, now I

00:19:13.285 --> 00:19:16.885
just apply the transform function to whatever element

00:19:16.885 --> 00:19:22.245
of the array that I'm looking at. So

00:19:22.245 --> 00:19:24.725
this is the things that I've changed. And

00:19:24.725 --> 00:19:27.080
then if I were to actually call this

00:19:27.080 --> 00:19:30.040
modify array function, then I would define a

00:19:30.040 --> 00:19:32.040
function that takes in one temperature in Celsius

00:19:32.040 --> 00:19:34.360
and outputs one temperature in Fahrenheit, that's the

00:19:34.360 --> 00:19:36.840
c to f function there. And then I

00:19:36.840 --> 00:19:39.160
call modify array with my c to f

00:19:39.160 --> 00:19:48.785
function. Any questions on this code? Alright. Just

00:19:48.785 --> 00:19:50.545
as a side note, one thing that we

00:19:50.545 --> 00:19:53.580
can do is write functions in slightly shorthand

00:19:53.580 --> 00:19:58.540
notation. In the bottom half, in the bottom

00:19:58.540 --> 00:20:01.020
section of the code, that's more similar to

00:20:01.020 --> 00:20:03.580
the functions that we've been writing so far.

00:20:03.660 --> 00:20:05.500
But we can also, if there's The only

00:20:05.500 --> 00:20:07.145
thing in our function is just a single

00:20:07.145 --> 00:20:09.785
return statement, then we can shorten it by

00:20:09.785 --> 00:20:12.505
just having the input in parentheses, the arrow,

00:20:12.505 --> 00:20:14.425
and then the output in parentheses. So it's

00:20:14.425 --> 00:20:16.585
very much like input feeds into your output

00:20:16.585 --> 00:20:21.440
kind of notation. And this is just the

00:20:21.440 --> 00:20:27.600
more general way of thinking about this, of

00:20:27.600 --> 00:20:29.440
the two different notations that we can use

00:20:29.440 --> 00:20:34.075
to write functions in JavaScript. Okay. Well, it

00:20:34.075 --> 00:20:35.595
turns out that there's a function that is

00:20:35.595 --> 00:20:38.955
modify array because some very smart JavaScript people

00:20:38.955 --> 00:20:40.555
recognize that this is a thing that we

00:20:40.555 --> 00:20:42.475
might have to do all the time. And

00:20:42.475 --> 00:20:45.275
so the map function is almost exactly the

00:20:45.275 --> 00:20:47.560
same as the modify modify array function that

00:20:47.560 --> 00:20:50.200
we just wrote, but the only difference is

00:20:50.200 --> 00:20:51.800
that you need to take the array and

00:20:51.800 --> 00:20:54.280
do the array, the name of the variable

00:20:54.280 --> 00:20:56.120
that holds your array and then dot map,

00:20:56.120 --> 00:20:58.600
instead of having that array as a parameter

00:20:58.600 --> 00:21:03.065
to your map function. I'll give you a

00:21:03.065 --> 00:21:05.305
sec to look at this code, make sure

00:21:05.305 --> 00:21:11.865
you understand what map does. Okay. Since we

00:21:11.865 --> 00:21:14.130
are pretty short on time, I'm actually not

00:21:14.130 --> 00:21:17.730
going to do this map practice. But the

00:21:17.730 --> 00:21:20.130
basic idea is that we want to we

00:21:20.130 --> 00:21:23.090
have rectangles, which is array of JavaScript objects,

00:21:23.730 --> 00:21:25.890
and then we want to use map to

00:21:25.890 --> 00:21:27.890
create an array that contains the areas of

00:21:27.890 --> 00:21:32.505
those rectangles. So why don't I ask you

00:21:32.505 --> 00:21:34.185
to just turn to someone next to you

00:21:34.185 --> 00:21:36.185
and just talk out verbally how you would

00:21:36.185 --> 00:21:37.945
implement this, because we don't have much time

00:21:37.945 --> 00:22:09.965
to code it. Alright. I'll pull us back

00:22:09.965 --> 00:22:14.030
together and show the solution. Nope. Nope. There's

00:22:14.030 --> 00:22:18.830
no solution. Okay. That works. Alright. You know,

00:22:18.830 --> 00:22:20.430
I'm gonna just put the solution on a

00:22:20.430 --> 00:22:22.830
slide after this and you guys can look

00:22:22.830 --> 00:22:24.910
at it and try this practice afterwards, if

00:22:24.910 --> 00:22:26.670
you have time, as an extra little homework

00:22:26.670 --> 00:22:28.265
thing, because I need to make sure that

00:22:28.265 --> 00:22:29.545
the next group has enough time to do

00:22:29.545 --> 00:22:33.705
their lecture. So the next concept we're introducing

00:22:33.705 --> 00:22:36.585
is filter. It's very similar in a map,

00:22:36.825 --> 00:22:39.785
but it just does a different thing. So

00:22:39.785 --> 00:22:42.020
if we have an array, then we can

00:22:42.020 --> 00:22:44.100
do filter and then that filter takes in

00:22:44.100 --> 00:22:46.500
a function, but this function takes in a

00:22:46.500 --> 00:22:48.980
single element of the array and outputs a

00:22:48.980 --> 00:22:52.260
boolean, true or false. And so basically, we

00:22:52.260 --> 00:22:54.965
feed so for in this example, we have

00:22:54.965 --> 00:22:57.445
this array of numbers, positive and negative in

00:22:57.445 --> 00:22:59.925
the values array. And then we have a

00:22:59.925 --> 00:23:02.405
function that takes in a single number and

00:23:02.405 --> 00:23:05.125
outputs true if x is positive or that

00:23:05.125 --> 00:23:08.180
particular element of array is positive, and false

00:23:08.180 --> 00:23:11.860
if that is zero or negative. And so

00:23:11.860 --> 00:23:13.860
then filter, what filter will do is it'll

00:23:13.860 --> 00:23:16.020
go through every element of the array, feed

00:23:16.020 --> 00:23:17.860
it into our function, and if that function

00:23:17.860 --> 00:23:20.645
output's true, it'll keep that element. If the

00:23:20.645 --> 00:23:23.205
function output's false, it won't keep that element.

00:23:23.845 --> 00:23:26.805
And then, for example, on the bottom code

00:23:26.805 --> 00:23:28.805
section of the slide, we have our staff

00:23:28.805 --> 00:23:30.325
names. And let's say I just really don't

00:23:30.325 --> 00:23:32.805
like Annabelle, and so I want to filter

00:23:32.805 --> 00:23:36.240
out I I want this function to return

00:23:36.240 --> 00:23:39.760
false only if the staff name is Annabel.

00:23:40.240 --> 00:23:42.640
And so that way, I can have a

00:23:42.640 --> 00:23:44.960
new array that contains everyone except Annabel in

00:23:44.960 --> 00:23:51.245
it. Sad. Okay. This is also going to

00:23:51.245 --> 00:23:53.485
be extra practice for after you can view

00:23:53.485 --> 00:23:58.125
these slides and try it out yourself. So

00:23:58.125 --> 00:24:01.085
question, why in in a very general sense,

00:24:01.085 --> 00:24:03.960
why do we use callback functions? Well, one

00:24:03.960 --> 00:24:06.040
is for reusability. For map and filter, we

00:24:06.040 --> 00:24:07.400
don't wanna have to rewrite the code to

00:24:07.400 --> 00:24:09.480
iterate through the array, pass the elements through

00:24:09.480 --> 00:24:12.040
this function every single time, and so we

00:24:12.040 --> 00:24:17.495
use callback functions. But another way another reason

00:24:17.495 --> 00:24:20.295
we use callback functions is abstraction. What does

00:24:20.295 --> 00:24:23.175
that mean? It means sometimes I wanna write

00:24:23.175 --> 00:24:25.975
code that says, when this happens, do something

00:24:25.975 --> 00:24:29.390
else. Do this. And what callback functions allow

00:24:29.390 --> 00:24:30.510
us to do is write the code for

00:24:30.510 --> 00:24:32.430
the do this, write the code for what

00:24:32.430 --> 00:24:34.750
I should be doing, and let other smart

00:24:34.750 --> 00:24:36.510
people, also known as the writers of the

00:24:36.510 --> 00:24:38.990
JavaScript libraries, write the code for when x

00:24:38.990 --> 00:24:43.185
happens. So for example, let's say we have

00:24:43.185 --> 00:24:45.985
a function called update animation, and we wanna

00:24:45.985 --> 00:24:48.145
call that every ten milliseconds. Maybe we're making

00:24:48.145 --> 00:24:50.545
a game or something and we need to

00:24:50.545 --> 00:24:53.665
update the display, and we know how to

00:24:54.070 --> 00:24:55.990
how we wanna update the display according to

00:24:55.990 --> 00:24:57.830
the game we're making. And so we have

00:24:57.830 --> 00:25:01.590
this function, update animation, that we wrote. However,

00:25:03.270 --> 00:25:05.510
we don't want to write code to manage

00:25:05.510 --> 00:25:08.525
timers, interfacing with the computer clock or something

00:25:08.525 --> 00:25:10.845
with the browser or, I don't know. It's

00:25:10.845 --> 00:25:13.165
just a lot of low level code that

00:25:13.165 --> 00:25:15.565
is kind of complicated and we don't wanna

00:25:15.565 --> 00:25:17.885
write it ourselves. So the JavaScript authors did

00:25:17.885 --> 00:25:20.125
it for us. And so they wrote this

00:25:20.125 --> 00:25:23.930
JavaScript library function called set interval, and that

00:25:23.930 --> 00:25:27.130
interval will call whatever callback function is passed

00:25:27.130 --> 00:25:28.970
into it, which in this case is our

00:25:28.970 --> 00:25:34.195
update animation, every ten milliseconds. And so we

00:25:34.195 --> 00:25:36.755
wrote the code for update animation. The JavaScript

00:25:36.755 --> 00:25:38.915
authors wrote the code for set interval that

00:25:38.915 --> 00:25:41.155
allows us to that allows this function to

00:25:41.155 --> 00:25:44.675
be called every ten milliseconds. And we're happy

00:25:44.675 --> 00:25:45.795
because all we had to worry about was

00:25:45.795 --> 00:25:51.140
updating our animation. Okay. So next up, I'm

00:25:51.140 --> 00:25:53.140
just gonna flash up a few slides. You

00:25:53.140 --> 00:25:55.940
probably won't recognize any of this code. You

00:25:55.940 --> 00:25:57.700
probably won't fully understand what it means, but

00:25:57.700 --> 00:26:01.140
I'm just gonna show you. And we'll see

00:26:01.140 --> 00:26:02.980
this later in WebLab. And so I want

00:26:02.980 --> 00:26:04.900
you to just mark this down in your

00:26:04.755 --> 00:26:06.275
head and remember, oh, this is a callback

00:26:06.275 --> 00:26:08.035
function. And so when you see it later

00:26:08.035 --> 00:26:10.435
in WebLab, you can note, oh, that's a

00:26:10.435 --> 00:26:12.195
callback function, and think about it in terms

00:26:12.195 --> 00:26:16.275
of callback functions. So this is one example

00:26:16.275 --> 00:26:19.240
where we wanna get something from a database

00:26:19.800 --> 00:26:21.960
and then we once we receive that thing,

00:26:21.960 --> 00:26:23.480
that's what the dot then means. Once we

00:26:23.480 --> 00:26:26.520
receive the thing back from the database, then

00:26:26.600 --> 00:26:29.800
do this. And so the reason we use

00:26:29.800 --> 00:26:32.395
a callback function is cause we don't know

00:26:32.395 --> 00:26:34.235
how to write the code that detects whether

00:26:34.235 --> 00:26:36.235
the thing has been received from the database,

00:26:36.555 --> 00:26:37.835
but we do know what we wanna do

00:26:37.835 --> 00:26:40.955
once we get that information back. We wanna

00:26:40.955 --> 00:26:42.315
send it in this case, we're sending it

00:26:42.315 --> 00:26:46.260
back to the front end. And then similarly

00:26:46.260 --> 00:26:48.420
to this, in our back end code, you're

00:26:48.420 --> 00:26:50.100
gonna see code like this that says, when

00:26:50.100 --> 00:26:54.020
we receive an HTTP request to this particular

00:26:54.020 --> 00:26:57.300
endpoint, we want to do this, do something.

00:26:58.255 --> 00:27:02.575
And so alright. My clicker isn't working now.

00:27:02.575 --> 00:27:06.095
But basically, we don't wanna write the code

00:27:06.095 --> 00:27:08.095
that detects whether we get an whether we've

00:27:08.095 --> 00:27:10.410
received an HTTP request or not. That's some

00:27:10.410 --> 00:27:12.170
kind of weird low level stuff with ports

00:27:12.170 --> 00:27:14.410
and everything. But we know that as soon

00:27:14.410 --> 00:27:16.410
as we get an HTTP request that follows

00:27:16.410 --> 00:27:19.530
this particular form, we want to do some

00:27:19.530 --> 00:27:24.765
stuff with it. And so in general, whenever

00:27:24.765 --> 00:27:28.765
you see the syntax for callback functions with

00:27:28.765 --> 00:27:31.725
the parentheses and the input and the arrow

00:27:32.045 --> 00:27:34.685
being passed as a parameter into another function,

00:27:34.925 --> 00:27:36.620
I want you to think, like, what is

00:27:36.620 --> 00:27:38.220
the when this happens and what is the

00:27:38.220 --> 00:27:39.740
do this? Like, why are we using a

00:27:39.740 --> 00:27:42.140
callback function here? And if you can think

00:27:42.140 --> 00:27:44.060
about it in those terms, that will serve

00:27:44.060 --> 00:27:46.620
you well for the rest of WebLab. And

00:27:46.620 --> 00:27:50.865
this is just highlighting the particular the the

00:27:50.865 --> 00:27:56.769
area that is itself the callback function. Okay.

00:27:56.769 --> 00:27:57.889
I think that was the end of my

00:27:57.889 --> 00:28:00.609
slides. So thank you all for bearing with

00:28:00.609 --> 00:28:03.569
me, and take a couple minute break as

00:28:03.569 --> 00:28:05.729
we transition into our Intro to React lecture.
